{"ast":null,"code":"/**\r\n * Javascript implementation of a basic Public Key Infrastructure, including\r\n * support for RSA public and private keys.\r\n *\r\n * @author Dave Longley\r\n *\r\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\r\n */\nvar forge = require('./forge');\nrequire('./asn1');\nrequire('./oids');\nrequire('./pbe');\nrequire('./pem');\nrequire('./pbkdf2');\nrequire('./pkcs12');\nrequire('./pss');\nrequire('./rsa');\nrequire('./util');\nrequire('./x509');\n\n// shortcut for asn.1 API\nvar asn1 = forge.asn1;\n\n/* Public Key Infrastructure (PKI) implementation. */\nvar pki = module.exports = forge.pki = forge.pki || {};\n\n/**\r\n * NOTE: THIS METHOD IS DEPRECATED. Use pem.decode() instead.\r\n *\r\n * Converts PEM-formatted data to DER.\r\n *\r\n * @param pem the PEM-formatted data.\r\n *\r\n * @return the DER-formatted data.\r\n */\npki.pemToDer = function (pem) {\n  var msg = forge.pem.decode(pem)[0];\n  if (msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert PEM to DER; PEM is encrypted.');\n  }\n  return forge.util.createBuffer(msg.body);\n};\n\n/**\r\n * Converts an RSA private key from PEM format.\r\n *\r\n * @param pem the PEM-formatted private key.\r\n *\r\n * @return the private key.\r\n */\npki.privateKeyFromPem = function (pem) {\n  var msg = forge.pem.decode(pem)[0];\n  if (msg.type !== 'PRIVATE KEY' && msg.type !== 'RSA PRIVATE KEY') {\n    var error = new Error('Could not convert private key from PEM; PEM ' + 'header type is not \"PRIVATE KEY\" or \"RSA PRIVATE KEY\".');\n    error.headerType = msg.type;\n    throw error;\n  }\n  if (msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert private key from PEM; PEM is encrypted.');\n  }\n\n  // convert DER to ASN.1 object\n  var obj = asn1.fromDer(msg.body);\n  return pki.privateKeyFromAsn1(obj);\n};\n\n/**\r\n * Converts an RSA private key to PEM format.\r\n *\r\n * @param key the private key.\r\n * @param maxline the maximum characters per line, defaults to 64.\r\n *\r\n * @return the PEM-formatted private key.\r\n */\npki.privateKeyToPem = function (key, maxline) {\n  // convert to ASN.1, then DER, then PEM-encode\n  var msg = {\n    type: 'RSA PRIVATE KEY',\n    body: asn1.toDer(pki.privateKeyToAsn1(key)).getBytes()\n  };\n  return forge.pem.encode(msg, {\n    maxline: maxline\n  });\n};\n\n/**\r\n * Converts a PrivateKeyInfo to PEM format.\r\n *\r\n * @param pki the PrivateKeyInfo.\r\n * @param maxline the maximum characters per line, defaults to 64.\r\n *\r\n * @return the PEM-formatted private key.\r\n */\npki.privateKeyInfoToPem = function (pki, maxline) {\n  // convert to DER, then PEM-encode\n  var msg = {\n    type: 'PRIVATE KEY',\n    body: asn1.toDer(pki).getBytes()\n  };\n  return forge.pem.encode(msg, {\n    maxline: maxline\n  });\n};","map":{"version":3,"names":["forge","require","asn1","pki","module","exports","pemToDer","pem","msg","decode","procType","type","Error","util","createBuffer","body","privateKeyFromPem","error","headerType","obj","fromDer","privateKeyFromAsn1","privateKeyToPem","key","maxline","toDer","privateKeyToAsn1","getBytes","encode","privateKeyInfoToPem"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/node-forge/lib/pki.js"],"sourcesContent":["/**\r\n * Javascript implementation of a basic Public Key Infrastructure, including\r\n * support for RSA public and private keys.\r\n *\r\n * @author Dave Longley\r\n *\r\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\r\n */\r\nvar forge = require('./forge');\r\nrequire('./asn1');\r\nrequire('./oids');\r\nrequire('./pbe');\r\nrequire('./pem');\r\nrequire('./pbkdf2');\r\nrequire('./pkcs12');\r\nrequire('./pss');\r\nrequire('./rsa');\r\nrequire('./util');\r\nrequire('./x509');\r\n\r\n// shortcut for asn.1 API\r\nvar asn1 = forge.asn1;\r\n\r\n/* Public Key Infrastructure (PKI) implementation. */\r\nvar pki = module.exports = forge.pki = forge.pki || {};\r\n\r\n/**\r\n * NOTE: THIS METHOD IS DEPRECATED. Use pem.decode() instead.\r\n *\r\n * Converts PEM-formatted data to DER.\r\n *\r\n * @param pem the PEM-formatted data.\r\n *\r\n * @return the DER-formatted data.\r\n */\r\npki.pemToDer = function(pem) {\r\n  var msg = forge.pem.decode(pem)[0];\r\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\r\n    throw new Error('Could not convert PEM to DER; PEM is encrypted.');\r\n  }\r\n  return forge.util.createBuffer(msg.body);\r\n};\r\n\r\n/**\r\n * Converts an RSA private key from PEM format.\r\n *\r\n * @param pem the PEM-formatted private key.\r\n *\r\n * @return the private key.\r\n */\r\npki.privateKeyFromPem = function(pem) {\r\n  var msg = forge.pem.decode(pem)[0];\r\n\r\n  if(msg.type !== 'PRIVATE KEY' && msg.type !== 'RSA PRIVATE KEY') {\r\n    var error = new Error('Could not convert private key from PEM; PEM ' +\r\n      'header type is not \"PRIVATE KEY\" or \"RSA PRIVATE KEY\".');\r\n    error.headerType = msg.type;\r\n    throw error;\r\n  }\r\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\r\n    throw new Error('Could not convert private key from PEM; PEM is encrypted.');\r\n  }\r\n\r\n  // convert DER to ASN.1 object\r\n  var obj = asn1.fromDer(msg.body);\r\n\r\n  return pki.privateKeyFromAsn1(obj);\r\n};\r\n\r\n/**\r\n * Converts an RSA private key to PEM format.\r\n *\r\n * @param key the private key.\r\n * @param maxline the maximum characters per line, defaults to 64.\r\n *\r\n * @return the PEM-formatted private key.\r\n */\r\npki.privateKeyToPem = function(key, maxline) {\r\n  // convert to ASN.1, then DER, then PEM-encode\r\n  var msg = {\r\n    type: 'RSA PRIVATE KEY',\r\n    body: asn1.toDer(pki.privateKeyToAsn1(key)).getBytes()\r\n  };\r\n  return forge.pem.encode(msg, {maxline: maxline});\r\n};\r\n\r\n/**\r\n * Converts a PrivateKeyInfo to PEM format.\r\n *\r\n * @param pki the PrivateKeyInfo.\r\n * @param maxline the maximum characters per line, defaults to 64.\r\n *\r\n * @return the PEM-formatted private key.\r\n */\r\npki.privateKeyInfoToPem = function(pki, maxline) {\r\n  // convert to DER, then PEM-encode\r\n  var msg = {\r\n    type: 'PRIVATE KEY',\r\n    body: asn1.toDer(pki).getBytes()\r\n  };\r\n  return forge.pem.encode(msg, {maxline: maxline});\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}