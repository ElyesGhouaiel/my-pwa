{"ast":null,"code":"/*! firebase-admin v13.0.1 */\n\"use strict\";\n\n/*!\r\n * @license\r\n * Copyright 2021 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applicationDefault = applicationDefault;\nexports.cert = cert;\nexports.refreshToken = refreshToken;\nexports.clearGlobalAppDefaultCred = clearGlobalAppDefaultCred;\nconst credential_internal_1 = require(\"./credential-internal\");\nlet globalAppDefaultCred;\nconst globalCertCreds = {};\nconst globalRefreshTokenCreds = {};\n/**\r\n * Returns a credential created from the\r\n * {@link https://developers.google.com/identity/protocols/application-default-credentials |\r\n * Google Application Default Credentials}\r\n * that grants admin access to Firebase services. This credential can be used\r\n * in the call to {@link firebase-admin.app#initializeApp}.\r\n *\r\n * Google Application Default Credentials are available on any Google\r\n * infrastructure, such as Google App Engine and Google Compute Engine.\r\n *\r\n * See\r\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\r\n * for more details.\r\n *\r\n * @example\r\n * ```javascript\r\n * initializeApp({\r\n *   credential: applicationDefault(),\r\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\r\n * });\r\n * ```\r\n *\r\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\r\n *   to be used when retrieving access tokens from Google token servers.\r\n *\r\n * @returns A credential authenticated via Google\r\n *   Application Default Credentials that can be used to initialize an app.\r\n */\nfunction applicationDefault(httpAgent) {\n  if (typeof globalAppDefaultCred === 'undefined') {\n    globalAppDefaultCred = (0, credential_internal_1.getApplicationDefault)(httpAgent);\n  }\n  return globalAppDefaultCred;\n}\n/**\r\n * Returns a credential created from the provided service account that grants\r\n * admin access to Firebase services. This credential can be used in the call\r\n * to {@link firebase-admin.app#initializeApp}.\r\n *\r\n * See\r\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\r\n * for more details.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Providing a path to a service account key JSON file\r\n * const serviceAccount = require(\"path/to/serviceAccountKey.json\");\r\n * initializeApp({\r\n *   credential: cert(serviceAccount),\r\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\r\n * });\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Providing a service account object inline\r\n * initializeApp({\r\n *   credential: cert({\r\n *     projectId: \"<PROJECT_ID>\",\r\n *     clientEmail: \"foo@<PROJECT_ID>.iam.gserviceaccount.com\",\r\n *     privateKey: \"-----BEGIN PRIVATE KEY-----<KEY>-----END PRIVATE KEY-----\\n\"\r\n *   }),\r\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\r\n * });\r\n * ```\r\n *\r\n * @param serviceAccountPathOrObject - The path to a service\r\n *   account key JSON file or an object representing a service account key.\r\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\r\n *   to be used when retrieving access tokens from Google token servers.\r\n *\r\n * @returns A credential authenticated via the\r\n *   provided service account that can be used to initialize an app.\r\n */\nfunction cert(serviceAccountPathOrObject, httpAgent) {\n  const stringifiedServiceAccount = JSON.stringify(serviceAccountPathOrObject);\n  if (!(stringifiedServiceAccount in globalCertCreds)) {\n    globalCertCreds[stringifiedServiceAccount] = new credential_internal_1.ServiceAccountCredential(serviceAccountPathOrObject, httpAgent);\n  }\n  return globalCertCreds[stringifiedServiceAccount];\n}\n/**\r\n * Returns a credential created from the provided refresh token that grants\r\n * admin access to Firebase services. This credential can be used in the call\r\n * to {@link firebase-admin.app#initializeApp}.\r\n *\r\n * See\r\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\r\n * for more details.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Providing a path to a refresh token JSON file\r\n * const refreshToken = require(\"path/to/refreshToken.json\");\r\n * initializeApp({\r\n *   credential: refreshToken(refreshToken),\r\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\r\n * });\r\n * ```\r\n *\r\n * @param refreshTokenPathOrObject - The path to a Google\r\n *   OAuth2 refresh token JSON file or an object representing a Google OAuth2\r\n *   refresh token.\r\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\r\n *   to be used when retrieving access tokens from Google token servers.\r\n *\r\n * @returns A credential authenticated via the\r\n *   provided service account that can be used to initialize an app.\r\n */\nfunction refreshToken(refreshTokenPathOrObject, httpAgent) {\n  const stringifiedRefreshToken = JSON.stringify(refreshTokenPathOrObject);\n  if (!(stringifiedRefreshToken in globalRefreshTokenCreds)) {\n    globalRefreshTokenCreds[stringifiedRefreshToken] = new credential_internal_1.RefreshTokenCredential(refreshTokenPathOrObject, httpAgent);\n  }\n  return globalRefreshTokenCreds[stringifiedRefreshToken];\n}\n/**\r\n * Clears the global ADC cache. Exported for testing.\r\n */\nfunction clearGlobalAppDefaultCred() {\n  globalAppDefaultCred = undefined;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","applicationDefault","cert","refreshToken","clearGlobalAppDefaultCred","credential_internal_1","require","globalAppDefaultCred","globalCertCreds","globalRefreshTokenCreds","httpAgent","getApplicationDefault","serviceAccountPathOrObject","stringifiedServiceAccount","JSON","stringify","ServiceAccountCredential","refreshTokenPathOrObject","stringifiedRefreshToken","RefreshTokenCredential","undefined"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/firebase-admin/lib/app/credential-factory.js"],"sourcesContent":["/*! firebase-admin v13.0.1 */\r\n\"use strict\";\r\n/*!\r\n * @license\r\n * Copyright 2021 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.applicationDefault = applicationDefault;\r\nexports.cert = cert;\r\nexports.refreshToken = refreshToken;\r\nexports.clearGlobalAppDefaultCred = clearGlobalAppDefaultCred;\r\nconst credential_internal_1 = require(\"./credential-internal\");\r\nlet globalAppDefaultCred;\r\nconst globalCertCreds = {};\r\nconst globalRefreshTokenCreds = {};\r\n/**\r\n * Returns a credential created from the\r\n * {@link https://developers.google.com/identity/protocols/application-default-credentials |\r\n * Google Application Default Credentials}\r\n * that grants admin access to Firebase services. This credential can be used\r\n * in the call to {@link firebase-admin.app#initializeApp}.\r\n *\r\n * Google Application Default Credentials are available on any Google\r\n * infrastructure, such as Google App Engine and Google Compute Engine.\r\n *\r\n * See\r\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\r\n * for more details.\r\n *\r\n * @example\r\n * ```javascript\r\n * initializeApp({\r\n *   credential: applicationDefault(),\r\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\r\n * });\r\n * ```\r\n *\r\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\r\n *   to be used when retrieving access tokens from Google token servers.\r\n *\r\n * @returns A credential authenticated via Google\r\n *   Application Default Credentials that can be used to initialize an app.\r\n */\r\nfunction applicationDefault(httpAgent) {\r\n    if (typeof globalAppDefaultCred === 'undefined') {\r\n        globalAppDefaultCred = (0, credential_internal_1.getApplicationDefault)(httpAgent);\r\n    }\r\n    return globalAppDefaultCred;\r\n}\r\n/**\r\n * Returns a credential created from the provided service account that grants\r\n * admin access to Firebase services. This credential can be used in the call\r\n * to {@link firebase-admin.app#initializeApp}.\r\n *\r\n * See\r\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\r\n * for more details.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Providing a path to a service account key JSON file\r\n * const serviceAccount = require(\"path/to/serviceAccountKey.json\");\r\n * initializeApp({\r\n *   credential: cert(serviceAccount),\r\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\r\n * });\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Providing a service account object inline\r\n * initializeApp({\r\n *   credential: cert({\r\n *     projectId: \"<PROJECT_ID>\",\r\n *     clientEmail: \"foo@<PROJECT_ID>.iam.gserviceaccount.com\",\r\n *     privateKey: \"-----BEGIN PRIVATE KEY-----<KEY>-----END PRIVATE KEY-----\\n\"\r\n *   }),\r\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\r\n * });\r\n * ```\r\n *\r\n * @param serviceAccountPathOrObject - The path to a service\r\n *   account key JSON file or an object representing a service account key.\r\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\r\n *   to be used when retrieving access tokens from Google token servers.\r\n *\r\n * @returns A credential authenticated via the\r\n *   provided service account that can be used to initialize an app.\r\n */\r\nfunction cert(serviceAccountPathOrObject, httpAgent) {\r\n    const stringifiedServiceAccount = JSON.stringify(serviceAccountPathOrObject);\r\n    if (!(stringifiedServiceAccount in globalCertCreds)) {\r\n        globalCertCreds[stringifiedServiceAccount] = new credential_internal_1.ServiceAccountCredential(serviceAccountPathOrObject, httpAgent);\r\n    }\r\n    return globalCertCreds[stringifiedServiceAccount];\r\n}\r\n/**\r\n * Returns a credential created from the provided refresh token that grants\r\n * admin access to Firebase services. This credential can be used in the call\r\n * to {@link firebase-admin.app#initializeApp}.\r\n *\r\n * See\r\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\r\n * for more details.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Providing a path to a refresh token JSON file\r\n * const refreshToken = require(\"path/to/refreshToken.json\");\r\n * initializeApp({\r\n *   credential: refreshToken(refreshToken),\r\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\r\n * });\r\n * ```\r\n *\r\n * @param refreshTokenPathOrObject - The path to a Google\r\n *   OAuth2 refresh token JSON file or an object representing a Google OAuth2\r\n *   refresh token.\r\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\r\n *   to be used when retrieving access tokens from Google token servers.\r\n *\r\n * @returns A credential authenticated via the\r\n *   provided service account that can be used to initialize an app.\r\n */\r\nfunction refreshToken(refreshTokenPathOrObject, httpAgent) {\r\n    const stringifiedRefreshToken = JSON.stringify(refreshTokenPathOrObject);\r\n    if (!(stringifiedRefreshToken in globalRefreshTokenCreds)) {\r\n        globalRefreshTokenCreds[stringifiedRefreshToken] = new credential_internal_1.RefreshTokenCredential(refreshTokenPathOrObject, httpAgent);\r\n    }\r\n    return globalRefreshTokenCreds[stringifiedRefreshToken];\r\n}\r\n/**\r\n * Clears the global ADC cache. Exported for testing.\r\n */\r\nfunction clearGlobalAppDefaultCred() {\r\n    globalAppDefaultCred = undefined;\r\n}\r\n"],"mappings":"AAAA;AACA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB;AAC/CF,OAAO,CAACG,IAAI,GAAGA,IAAI;AACnBH,OAAO,CAACI,YAAY,GAAGA,YAAY;AACnCJ,OAAO,CAACK,yBAAyB,GAAGA,yBAAyB;AAC7D,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAC9D,IAAIC,oBAAoB;AACxB,MAAMC,eAAe,GAAG,CAAC,CAAC;AAC1B,MAAMC,uBAAuB,GAAG,CAAC,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASR,kBAAkBA,CAACS,SAAS,EAAE;EACnC,IAAI,OAAOH,oBAAoB,KAAK,WAAW,EAAE;IAC7CA,oBAAoB,GAAG,CAAC,CAAC,EAAEF,qBAAqB,CAACM,qBAAqB,EAAED,SAAS,CAAC;EACtF;EACA,OAAOH,oBAAoB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASL,IAAIA,CAACU,0BAA0B,EAAEF,SAAS,EAAE;EACjD,MAAMG,yBAAyB,GAAGC,IAAI,CAACC,SAAS,CAACH,0BAA0B,CAAC;EAC5E,IAAI,EAAEC,yBAAyB,IAAIL,eAAe,CAAC,EAAE;IACjDA,eAAe,CAACK,yBAAyB,CAAC,GAAG,IAAIR,qBAAqB,CAACW,wBAAwB,CAACJ,0BAA0B,EAAEF,SAAS,CAAC;EAC1I;EACA,OAAOF,eAAe,CAACK,yBAAyB,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASV,YAAYA,CAACc,wBAAwB,EAAEP,SAAS,EAAE;EACvD,MAAMQ,uBAAuB,GAAGJ,IAAI,CAACC,SAAS,CAACE,wBAAwB,CAAC;EACxE,IAAI,EAAEC,uBAAuB,IAAIT,uBAAuB,CAAC,EAAE;IACvDA,uBAAuB,CAACS,uBAAuB,CAAC,GAAG,IAAIb,qBAAqB,CAACc,sBAAsB,CAACF,wBAAwB,EAAEP,SAAS,CAAC;EAC5I;EACA,OAAOD,uBAAuB,CAACS,uBAAuB,CAAC;AAC3D;AACA;AACA;AACA;AACA,SAASd,yBAAyBA,CAAA,EAAG;EACjCG,oBAAoB,GAAGa,SAAS;AACpC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}