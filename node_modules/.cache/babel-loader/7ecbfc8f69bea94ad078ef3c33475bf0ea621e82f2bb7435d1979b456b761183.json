{"ast":null,"code":"/*! firebase-admin v13.0.1 */\n\"use strict\";\n\n/*!\r\n * @license\r\n * Copyright 2021 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirebaseInstallationsRequestHandler = void 0;\nconst error_1 = require(\"../utils/error\");\nconst api_request_1 = require(\"../utils/api-request\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\n/** Firebase IID backend host. */\nconst FIREBASE_IID_HOST = 'console.firebase.google.com';\n/** Firebase IID backend path. */\nconst FIREBASE_IID_PATH = '/v1/';\n/** Firebase IID request timeout duration in milliseconds. */\nconst FIREBASE_IID_TIMEOUT = 10000;\n/** HTTP error codes raised by the backend server. */\nconst ERROR_CODES = {\n  400: 'Malformed installation ID argument.',\n  401: 'Request not authorized.',\n  403: 'Project does not match installation ID or the client does not have sufficient privileges.',\n  404: 'Failed to find the installation ID.',\n  409: 'Already deleted.',\n  429: 'Request throttled out by the backend server.',\n  500: 'Internal server error.',\n  503: 'Backend servers are over capacity. Try again later.'\n};\n/**\r\n * Class that provides mechanism to send requests to the FIS backend endpoints.\r\n */\nclass FirebaseInstallationsRequestHandler {\n  /**\r\n   * @param app - The app used to fetch access tokens to sign API requests.\r\n   *\r\n   * @constructor\r\n   */\n  constructor(app) {\n    this.app = app;\n    this.host = FIREBASE_IID_HOST;\n    this.timeout = FIREBASE_IID_TIMEOUT;\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n  deleteInstallation(fid) {\n    if (!validator.isNonEmptyString(fid)) {\n      return Promise.reject(new error_1.FirebaseInstallationsError(error_1.InstallationsClientErrorCode.INVALID_INSTALLATION_ID, 'Installation ID must be a non-empty string.'));\n    }\n    return this.invokeRequestHandler(new api_request_1.ApiSettings(fid, 'DELETE'));\n  }\n  /**\r\n   * Invokes the request handler based on the API settings object passed.\r\n   *\r\n   * @param apiSettings - The API endpoint settings to apply to request and response.\r\n   * @returns A promise that resolves when the request is complete.\r\n   */\n  invokeRequestHandler(apiSettings) {\n    return this.getPathPrefix().then(path => {\n      const req = {\n        url: `https://${this.host}${path}${apiSettings.getEndpoint()}`,\n        method: apiSettings.getHttpMethod(),\n        timeout: this.timeout\n      };\n      return this.httpClient.send(req);\n    }).then(() => {\n      // return nothing on success\n    }).catch(err => {\n      if (err instanceof api_request_1.RequestResponseError) {\n        const response = err.response;\n        const errorMessage = response.isJson() && 'error' in response.data ? response.data.error : response.text;\n        const template = ERROR_CODES[response.status];\n        const message = template ? `Installation ID \"${apiSettings.getEndpoint()}\": ${template}` : errorMessage;\n        throw new error_1.FirebaseInstallationsError(error_1.InstallationsClientErrorCode.API_ERROR, message);\n      }\n      // In case of timeouts and other network errors, the HttpClient returns a\n      // FirebaseError wrapped in the response. Simply throw it here.\n      throw err;\n    });\n  }\n  getPathPrefix() {\n    if (this.path) {\n      return Promise.resolve(this.path);\n    }\n    return utils.findProjectId(this.app).then(projectId => {\n      if (!validator.isNonEmptyString(projectId)) {\n        // Assert for an explicit projct ID (either via AppOptions or the cert itself).\n        throw new error_1.FirebaseInstallationsError(error_1.InstallationsClientErrorCode.INVALID_PROJECT_ID, 'Failed to determine project ID for Installations. Initialize the ' + 'SDK with service account credentials or set project ID as an app option. ' + 'Alternatively set the GOOGLE_CLOUD_PROJECT environment variable.');\n      }\n      this.path = FIREBASE_IID_PATH + `project/${projectId}/instanceId/`;\n      return this.path;\n    });\n  }\n}\nexports.FirebaseInstallationsRequestHandler = FirebaseInstallationsRequestHandler;","map":{"version":3,"names":["Object","defineProperty","exports","value","FirebaseInstallationsRequestHandler","error_1","require","api_request_1","utils","validator","FIREBASE_IID_HOST","FIREBASE_IID_PATH","FIREBASE_IID_TIMEOUT","ERROR_CODES","constructor","app","host","timeout","httpClient","AuthorizedHttpClient","deleteInstallation","fid","isNonEmptyString","Promise","reject","FirebaseInstallationsError","InstallationsClientErrorCode","INVALID_INSTALLATION_ID","invokeRequestHandler","ApiSettings","apiSettings","getPathPrefix","then","path","req","url","getEndpoint","method","getHttpMethod","send","catch","err","RequestResponseError","response","errorMessage","isJson","data","error","text","template","status","message","API_ERROR","resolve","findProjectId","projectId","INVALID_PROJECT_ID"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/firebase-admin/lib/installations/installations-request-handler.js"],"sourcesContent":["/*! firebase-admin v13.0.1 */\r\n\"use strict\";\r\n/*!\r\n * @license\r\n * Copyright 2021 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FirebaseInstallationsRequestHandler = void 0;\r\nconst error_1 = require(\"../utils/error\");\r\nconst api_request_1 = require(\"../utils/api-request\");\r\nconst utils = require(\"../utils/index\");\r\nconst validator = require(\"../utils/validator\");\r\n/** Firebase IID backend host. */\r\nconst FIREBASE_IID_HOST = 'console.firebase.google.com';\r\n/** Firebase IID backend path. */\r\nconst FIREBASE_IID_PATH = '/v1/';\r\n/** Firebase IID request timeout duration in milliseconds. */\r\nconst FIREBASE_IID_TIMEOUT = 10000;\r\n/** HTTP error codes raised by the backend server. */\r\nconst ERROR_CODES = {\r\n    400: 'Malformed installation ID argument.',\r\n    401: 'Request not authorized.',\r\n    403: 'Project does not match installation ID or the client does not have sufficient privileges.',\r\n    404: 'Failed to find the installation ID.',\r\n    409: 'Already deleted.',\r\n    429: 'Request throttled out by the backend server.',\r\n    500: 'Internal server error.',\r\n    503: 'Backend servers are over capacity. Try again later.',\r\n};\r\n/**\r\n * Class that provides mechanism to send requests to the FIS backend endpoints.\r\n */\r\nclass FirebaseInstallationsRequestHandler {\r\n    /**\r\n     * @param app - The app used to fetch access tokens to sign API requests.\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(app) {\r\n        this.app = app;\r\n        this.host = FIREBASE_IID_HOST;\r\n        this.timeout = FIREBASE_IID_TIMEOUT;\r\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\r\n    }\r\n    deleteInstallation(fid) {\r\n        if (!validator.isNonEmptyString(fid)) {\r\n            return Promise.reject(new error_1.FirebaseInstallationsError(error_1.InstallationsClientErrorCode.INVALID_INSTALLATION_ID, 'Installation ID must be a non-empty string.'));\r\n        }\r\n        return this.invokeRequestHandler(new api_request_1.ApiSettings(fid, 'DELETE'));\r\n    }\r\n    /**\r\n     * Invokes the request handler based on the API settings object passed.\r\n     *\r\n     * @param apiSettings - The API endpoint settings to apply to request and response.\r\n     * @returns A promise that resolves when the request is complete.\r\n     */\r\n    invokeRequestHandler(apiSettings) {\r\n        return this.getPathPrefix()\r\n            .then((path) => {\r\n            const req = {\r\n                url: `https://${this.host}${path}${apiSettings.getEndpoint()}`,\r\n                method: apiSettings.getHttpMethod(),\r\n                timeout: this.timeout,\r\n            };\r\n            return this.httpClient.send(req);\r\n        })\r\n            .then(() => {\r\n            // return nothing on success\r\n        })\r\n            .catch((err) => {\r\n            if (err instanceof api_request_1.RequestResponseError) {\r\n                const response = err.response;\r\n                const errorMessage = (response.isJson() && 'error' in response.data) ?\r\n                    response.data.error : response.text;\r\n                const template = ERROR_CODES[response.status];\r\n                const message = template ?\r\n                    `Installation ID \"${apiSettings.getEndpoint()}\": ${template}` : errorMessage;\r\n                throw new error_1.FirebaseInstallationsError(error_1.InstallationsClientErrorCode.API_ERROR, message);\r\n            }\r\n            // In case of timeouts and other network errors, the HttpClient returns a\r\n            // FirebaseError wrapped in the response. Simply throw it here.\r\n            throw err;\r\n        });\r\n    }\r\n    getPathPrefix() {\r\n        if (this.path) {\r\n            return Promise.resolve(this.path);\r\n        }\r\n        return utils.findProjectId(this.app)\r\n            .then((projectId) => {\r\n            if (!validator.isNonEmptyString(projectId)) {\r\n                // Assert for an explicit projct ID (either via AppOptions or the cert itself).\r\n                throw new error_1.FirebaseInstallationsError(error_1.InstallationsClientErrorCode.INVALID_PROJECT_ID, 'Failed to determine project ID for Installations. Initialize the '\r\n                    + 'SDK with service account credentials or set project ID as an app option. '\r\n                    + 'Alternatively set the GOOGLE_CLOUD_PROJECT environment variable.');\r\n            }\r\n            this.path = FIREBASE_IID_PATH + `project/${projectId}/instanceId/`;\r\n            return this.path;\r\n        });\r\n    }\r\n}\r\nexports.FirebaseInstallationsRequestHandler = FirebaseInstallationsRequestHandler;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}