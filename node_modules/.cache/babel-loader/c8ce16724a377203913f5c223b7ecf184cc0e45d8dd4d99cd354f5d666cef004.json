{"ast":null,"code":"'use strict';\n\n/**\r\n * @param typeMap [Object] Map of MIME type -> Array[extensions]\r\n * @param ...\r\n */\nfunction Mime() {\n  this._types = Object.create(null);\n  this._extensions = Object.create(null);\n  for (let i = 0; i < arguments.length; i++) {\n    this.define(arguments[i]);\n  }\n  this.define = this.define.bind(this);\n  this.getType = this.getType.bind(this);\n  this.getExtension = this.getExtension.bind(this);\n}\n\n/**\r\n * Define mimetype -> extension mappings.  Each key is a mime-type that maps\r\n * to an array of extensions associated with the type.  The first extension is\r\n * used as the default extension for the type.\r\n *\r\n * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\r\n *\r\n * If a type declares an extension that has already been defined, an error will\r\n * be thrown.  To suppress this error and force the extension to be associated\r\n * with the new type, pass `force`=true.  Alternatively, you may prefix the\r\n * extension with \"*\" to map the type to extension, without mapping the\r\n * extension to the type.\r\n *\r\n * e.g. mime.define({'audio/wav', ['wav']}, {'audio/x-wav', ['*wav']});\r\n *\r\n *\r\n * @param map (Object) type definitions\r\n * @param force (Boolean) if true, force overriding of existing definitions\r\n */\nMime.prototype.define = function (typeMap, force) {\n  for (let type in typeMap) {\n    let extensions = typeMap[type].map(function (t) {\n      return t.toLowerCase();\n    });\n    type = type.toLowerCase();\n    for (let i = 0; i < extensions.length; i++) {\n      const ext = extensions[i];\n\n      // '*' prefix = not the preferred type for this extension.  So fixup the\n      // extension, and skip it.\n      if (ext[0] === '*') {\n        continue;\n      }\n      if (!force && ext in this._types) {\n        throw new Error('Attempt to change mapping for \"' + ext + '\" extension from \"' + this._types[ext] + '\" to \"' + type + '\". Pass `force=true` to allow this, otherwise remove \"' + ext + '\" from the list of extensions for \"' + type + '\".');\n      }\n      this._types[ext] = type;\n    }\n\n    // Use first extension as default\n    if (force || !this._extensions[type]) {\n      const ext = extensions[0];\n      this._extensions[type] = ext[0] !== '*' ? ext : ext.substr(1);\n    }\n  }\n};\n\n/**\r\n * Lookup a mime type based on extension\r\n */\nMime.prototype.getType = function (path) {\n  path = String(path);\n  let last = path.replace(/^.*[/\\\\]/, '').toLowerCase();\n  let ext = last.replace(/^.*\\./, '').toLowerCase();\n  let hasPath = last.length < path.length;\n  let hasDot = ext.length < last.length - 1;\n  return (hasDot || !hasPath) && this._types[ext] || null;\n};\n\n/**\r\n * Return file extension associated with a mime type\r\n */\nMime.prototype.getExtension = function (type) {\n  type = /^\\s*([^;\\s]*)/.test(type) && RegExp.$1;\n  return type && this._extensions[type.toLowerCase()] || null;\n};\nmodule.exports = Mime;","map":{"version":3,"names":["Mime","_types","Object","create","_extensions","i","arguments","length","define","bind","getType","getExtension","prototype","typeMap","force","type","extensions","map","t","toLowerCase","ext","Error","substr","path","String","last","replace","hasPath","hasDot","test","RegExp","$1","module","exports"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/mime/Mime.js"],"sourcesContent":["'use strict';\r\n\r\n/**\r\n * @param typeMap [Object] Map of MIME type -> Array[extensions]\r\n * @param ...\r\n */\r\nfunction Mime() {\r\n  this._types = Object.create(null);\r\n  this._extensions = Object.create(null);\r\n\r\n  for (let i = 0; i < arguments.length; i++) {\r\n    this.define(arguments[i]);\r\n  }\r\n\r\n  this.define = this.define.bind(this);\r\n  this.getType = this.getType.bind(this);\r\n  this.getExtension = this.getExtension.bind(this);\r\n}\r\n\r\n/**\r\n * Define mimetype -> extension mappings.  Each key is a mime-type that maps\r\n * to an array of extensions associated with the type.  The first extension is\r\n * used as the default extension for the type.\r\n *\r\n * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\r\n *\r\n * If a type declares an extension that has already been defined, an error will\r\n * be thrown.  To suppress this error and force the extension to be associated\r\n * with the new type, pass `force`=true.  Alternatively, you may prefix the\r\n * extension with \"*\" to map the type to extension, without mapping the\r\n * extension to the type.\r\n *\r\n * e.g. mime.define({'audio/wav', ['wav']}, {'audio/x-wav', ['*wav']});\r\n *\r\n *\r\n * @param map (Object) type definitions\r\n * @param force (Boolean) if true, force overriding of existing definitions\r\n */\r\nMime.prototype.define = function(typeMap, force) {\r\n  for (let type in typeMap) {\r\n    let extensions = typeMap[type].map(function(t) {\r\n      return t.toLowerCase();\r\n    });\r\n    type = type.toLowerCase();\r\n\r\n    for (let i = 0; i < extensions.length; i++) {\r\n      const ext = extensions[i];\r\n\r\n      // '*' prefix = not the preferred type for this extension.  So fixup the\r\n      // extension, and skip it.\r\n      if (ext[0] === '*') {\r\n        continue;\r\n      }\r\n\r\n      if (!force && (ext in this._types)) {\r\n        throw new Error(\r\n          'Attempt to change mapping for \"' + ext +\r\n          '\" extension from \"' + this._types[ext] + '\" to \"' + type +\r\n          '\". Pass `force=true` to allow this, otherwise remove \"' + ext +\r\n          '\" from the list of extensions for \"' + type + '\".'\r\n        );\r\n      }\r\n\r\n      this._types[ext] = type;\r\n    }\r\n\r\n    // Use first extension as default\r\n    if (force || !this._extensions[type]) {\r\n      const ext = extensions[0];\r\n      this._extensions[type] = (ext[0] !== '*') ? ext : ext.substr(1);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Lookup a mime type based on extension\r\n */\r\nMime.prototype.getType = function(path) {\r\n  path = String(path);\r\n  let last = path.replace(/^.*[/\\\\]/, '').toLowerCase();\r\n  let ext = last.replace(/^.*\\./, '').toLowerCase();\r\n\r\n  let hasPath = last.length < path.length;\r\n  let hasDot = ext.length < last.length - 1;\r\n\r\n  return (hasDot || !hasPath) && this._types[ext] || null;\r\n};\r\n\r\n/**\r\n * Return file extension associated with a mime type\r\n */\r\nMime.prototype.getExtension = function(type) {\r\n  type = /^\\s*([^;\\s]*)/.test(type) && RegExp.$1;\r\n  return type && this._extensions[type.toLowerCase()] || null;\r\n};\r\n\r\nmodule.exports = Mime;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}