{"ast":null,"code":"\"use strict\";\n\n/*!\r\n * Copyright 2023 Google LLC. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompositeFilter = exports.UnaryFilter = exports.Filter = void 0;\n/**\r\n * A `Filter` represents a restriction on one or more field values and can\r\n * be used to refine the results of a {@link Query}.\r\n * `Filters`s are created by invoking {@link Filter#where}, {@link Filter#or},\r\n * or {@link Filter#and} and can then be passed to {@link Query#where}\r\n * to create a new {@link Query} instance that also contains this `Filter`.\r\n */\nclass Filter {\n  /**\r\n   * Creates and returns a new [Filter]{@link Filter}, which can be\r\n   * applied to [Query.where()]{@link Query#where}, [Filter.or()]{@link Filter#or},\r\n   * or [Filter.and()]{@link Filter#and}. When applied to a [Query]{@link Query}\r\n   * it requires that documents must contain the specified field and that its value should\r\n   * satisfy the relation constraint provided.\r\n   *\r\n   * @param {string|FieldPath} fieldPath The name of a property value to compare.\r\n   * @param {string} opStr A comparison operation in the form of a string.\r\n   * Acceptable operator strings are \"<\", \"<=\", \"==\", \"!=\", \">=\", \">\", \"array-contains\",\r\n   * \"in\", \"not-in\", and \"array-contains-any\".\r\n   * @param {*} value The value to which to compare the field for inclusion in\r\n   * a query.\r\n   * @returns {Filter} The created Filter.\r\n   *\r\n   * @example\r\n   * ```\r\n   * let collectionRef = firestore.collection('col');\r\n   *\r\n   * collectionRef.where(Filter.where('foo', '==', 'bar')).get().then(querySnapshot => {\r\n   *   querySnapshot.forEach(documentSnapshot => {\r\n   *     console.log(`Found document at ${documentSnapshot.ref.path}`);\r\n   *   });\r\n   * });\r\n   * ```\r\n   */\n  static where(fieldPath, opStr, value) {\n    return new UnaryFilter(fieldPath, opStr, value);\n  }\n  /**\r\n   * Creates and returns a new [Filter]{@link Filter} that is a\r\n   * disjunction of the given {@link Filter}s. A disjunction filter includes\r\n   * a document if it satisfies any of the given {@link Filter}s.\r\n   *\r\n   * The returned Filter can be applied to [Query.where()]{@link Query#where},\r\n   * [Filter.or()]{@link Filter#or}, or [Filter.and()]{@link Filter#and}. When\r\n   * applied to a [Query]{@link Query} it requires that documents must satisfy\r\n   * one of the provided {@link Filter}s.\r\n   *\r\n   * @param {...Filter} filters  Optional. The {@link Filter}s\r\n   * for OR operation. These must be created with calls to {@link Filter#where},\r\n   * {@link Filter#or}, or {@link Filter#and}.\r\n   * @returns {Filter} The created {@link Filter}.\r\n   *\r\n   * @example\r\n   * ```\r\n   * let collectionRef = firestore.collection('col');\r\n   *\r\n   * // doc.foo == 'bar' || doc.baz > 0\r\n   * let orFilter = Filter.or(Filter.where('foo', '==', 'bar'), Filter.where('baz', '>', 0));\r\n   *\r\n   * collectionRef.where(orFilter).get().then(querySnapshot => {\r\n   *   querySnapshot.forEach(documentSnapshot => {\r\n   *     console.log(`Found document at ${documentSnapshot.ref.path}`);\r\n   *   });\r\n   * });\r\n   * ```\r\n   */\n  static or(...filters) {\n    return new CompositeFilter(filters, 'OR');\n  }\n  /**\r\n   * Creates and returns a new [Filter]{@link Filter} that is a\r\n   * conjunction of the given {@link Filter}s. A conjunction filter includes\r\n   * a document if it satisfies all of the given {@link Filter}s.\r\n   *\r\n   * The returned Filter can be applied to [Query.where()]{@link Query#where},\r\n   * [Filter.or()]{@link Filter#or}, or [Filter.and()]{@link Filter#and}. When\r\n   * applied to a [Query]{@link Query} it requires that documents must satisfy\r\n   * one of the provided {@link Filter}s.\r\n   *\r\n   * @param {...Filter} filters  Optional. The {@link Filter}s\r\n   * for AND operation. These must be created with calls to {@link Filter#where},\r\n   * {@link Filter#or}, or {@link Filter#and}.\r\n   * @returns {Filter} The created {@link Filter}.\r\n   *\r\n   * @example\r\n   * ```\r\n   * let collectionRef = firestore.collection('col');\r\n   *\r\n   * // doc.foo == 'bar' && doc.baz > 0\r\n   * let andFilter = Filter.and(Filter.where('foo', '==', 'bar'), Filter.where('baz', '>', 0));\r\n   *\r\n   * collectionRef.where(andFilter).get().then(querySnapshot => {\r\n   *   querySnapshot.forEach(documentSnapshot => {\r\n   *     console.log(`Found document at ${documentSnapshot.ref.path}`);\r\n   *   });\r\n   * });\r\n   * ```\r\n   */\n  static and(...filters) {\n    return new CompositeFilter(filters, 'AND');\n  }\n}\nexports.Filter = Filter;\n/**\r\n * A `UnaryFilter` represents a restriction on one field value and can\r\n * be used to refine the results of a {@link Query}.\r\n * `UnaryFilter`s are created by invoking {@link Filter#where} and can then\r\n * be passed to {@link Query#where} to create a new {@link Query} instance\r\n * that also contains this `UnaryFilter`.\r\n *\r\n * @private\r\n * @internal\r\n */\nclass UnaryFilter extends Filter {\n  /**\r\n   @private\r\n   @internal\r\n   */\n  constructor(field, operator, value) {\n    super();\n    this.field = field;\n    this.operator = operator;\n    this.value = value;\n  }\n  /**\r\n   @private\r\n   @internal\r\n   */\n  _getField() {\n    return this.field;\n  }\n  /**\r\n   @private\r\n   @internal\r\n   */\n  _getOperator() {\n    return this.operator;\n  }\n  /**\r\n   @private\r\n   @internal\r\n   */\n  _getValue() {\n    return this.value;\n  }\n}\nexports.UnaryFilter = UnaryFilter;\n/**\r\n * A `CompositeFilter` is used to narrow the set of documents returned\r\n * by a Firestore query by performing the logical OR or AND of multiple\r\n * {@link Filters}s. `CompositeFilters`s are created by invoking {@link Filter#or}\r\n * or {@link Filter#and} and can then be passed to {@link Query#where}\r\n * to create a new query instance that also contains the `CompositeFilter`.\r\n *\r\n * @private\r\n * @internal\r\n */\nclass CompositeFilter extends Filter {\n  /**\r\n   @private\r\n   @internal\r\n   */\n  constructor(filters, operator) {\n    super();\n    this.filters = filters;\n    this.operator = operator;\n  }\n  /**\r\n   @private\r\n   @internal\r\n   */\n  _getFilters() {\n    return this.filters;\n  }\n  /**\r\n   @private\r\n   @internal\r\n   */\n  _getOperator() {\n    return this.operator;\n  }\n}\nexports.CompositeFilter = CompositeFilter;","map":{"version":3,"names":["Object","defineProperty","exports","value","CompositeFilter","UnaryFilter","Filter","where","fieldPath","opStr","or","filters","and","constructor","field","operator","_getField","_getOperator","_getValue","_getFilters"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/@google-cloud/firestore/build/src/filter.js"],"sourcesContent":["\"use strict\";\r\n/*!\r\n * Copyright 2023 Google LLC. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CompositeFilter = exports.UnaryFilter = exports.Filter = void 0;\r\n/**\r\n * A `Filter` represents a restriction on one or more field values and can\r\n * be used to refine the results of a {@link Query}.\r\n * `Filters`s are created by invoking {@link Filter#where}, {@link Filter#or},\r\n * or {@link Filter#and} and can then be passed to {@link Query#where}\r\n * to create a new {@link Query} instance that also contains this `Filter`.\r\n */\r\nclass Filter {\r\n    /**\r\n     * Creates and returns a new [Filter]{@link Filter}, which can be\r\n     * applied to [Query.where()]{@link Query#where}, [Filter.or()]{@link Filter#or},\r\n     * or [Filter.and()]{@link Filter#and}. When applied to a [Query]{@link Query}\r\n     * it requires that documents must contain the specified field and that its value should\r\n     * satisfy the relation constraint provided.\r\n     *\r\n     * @param {string|FieldPath} fieldPath The name of a property value to compare.\r\n     * @param {string} opStr A comparison operation in the form of a string.\r\n     * Acceptable operator strings are \"<\", \"<=\", \"==\", \"!=\", \">=\", \">\", \"array-contains\",\r\n     * \"in\", \"not-in\", and \"array-contains-any\".\r\n     * @param {*} value The value to which to compare the field for inclusion in\r\n     * a query.\r\n     * @returns {Filter} The created Filter.\r\n     *\r\n     * @example\r\n     * ```\r\n     * let collectionRef = firestore.collection('col');\r\n     *\r\n     * collectionRef.where(Filter.where('foo', '==', 'bar')).get().then(querySnapshot => {\r\n     *   querySnapshot.forEach(documentSnapshot => {\r\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\r\n     *   });\r\n     * });\r\n     * ```\r\n     */\r\n    static where(fieldPath, opStr, value) {\r\n        return new UnaryFilter(fieldPath, opStr, value);\r\n    }\r\n    /**\r\n     * Creates and returns a new [Filter]{@link Filter} that is a\r\n     * disjunction of the given {@link Filter}s. A disjunction filter includes\r\n     * a document if it satisfies any of the given {@link Filter}s.\r\n     *\r\n     * The returned Filter can be applied to [Query.where()]{@link Query#where},\r\n     * [Filter.or()]{@link Filter#or}, or [Filter.and()]{@link Filter#and}. When\r\n     * applied to a [Query]{@link Query} it requires that documents must satisfy\r\n     * one of the provided {@link Filter}s.\r\n     *\r\n     * @param {...Filter} filters  Optional. The {@link Filter}s\r\n     * for OR operation. These must be created with calls to {@link Filter#where},\r\n     * {@link Filter#or}, or {@link Filter#and}.\r\n     * @returns {Filter} The created {@link Filter}.\r\n     *\r\n     * @example\r\n     * ```\r\n     * let collectionRef = firestore.collection('col');\r\n     *\r\n     * // doc.foo == 'bar' || doc.baz > 0\r\n     * let orFilter = Filter.or(Filter.where('foo', '==', 'bar'), Filter.where('baz', '>', 0));\r\n     *\r\n     * collectionRef.where(orFilter).get().then(querySnapshot => {\r\n     *   querySnapshot.forEach(documentSnapshot => {\r\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\r\n     *   });\r\n     * });\r\n     * ```\r\n     */\r\n    static or(...filters) {\r\n        return new CompositeFilter(filters, 'OR');\r\n    }\r\n    /**\r\n     * Creates and returns a new [Filter]{@link Filter} that is a\r\n     * conjunction of the given {@link Filter}s. A conjunction filter includes\r\n     * a document if it satisfies all of the given {@link Filter}s.\r\n     *\r\n     * The returned Filter can be applied to [Query.where()]{@link Query#where},\r\n     * [Filter.or()]{@link Filter#or}, or [Filter.and()]{@link Filter#and}. When\r\n     * applied to a [Query]{@link Query} it requires that documents must satisfy\r\n     * one of the provided {@link Filter}s.\r\n     *\r\n     * @param {...Filter} filters  Optional. The {@link Filter}s\r\n     * for AND operation. These must be created with calls to {@link Filter#where},\r\n     * {@link Filter#or}, or {@link Filter#and}.\r\n     * @returns {Filter} The created {@link Filter}.\r\n     *\r\n     * @example\r\n     * ```\r\n     * let collectionRef = firestore.collection('col');\r\n     *\r\n     * // doc.foo == 'bar' && doc.baz > 0\r\n     * let andFilter = Filter.and(Filter.where('foo', '==', 'bar'), Filter.where('baz', '>', 0));\r\n     *\r\n     * collectionRef.where(andFilter).get().then(querySnapshot => {\r\n     *   querySnapshot.forEach(documentSnapshot => {\r\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\r\n     *   });\r\n     * });\r\n     * ```\r\n     */\r\n    static and(...filters) {\r\n        return new CompositeFilter(filters, 'AND');\r\n    }\r\n}\r\nexports.Filter = Filter;\r\n/**\r\n * A `UnaryFilter` represents a restriction on one field value and can\r\n * be used to refine the results of a {@link Query}.\r\n * `UnaryFilter`s are created by invoking {@link Filter#where} and can then\r\n * be passed to {@link Query#where} to create a new {@link Query} instance\r\n * that also contains this `UnaryFilter`.\r\n *\r\n * @private\r\n * @internal\r\n */\r\nclass UnaryFilter extends Filter {\r\n    /**\r\n     @private\r\n     @internal\r\n     */\r\n    constructor(field, operator, value) {\r\n        super();\r\n        this.field = field;\r\n        this.operator = operator;\r\n        this.value = value;\r\n    }\r\n    /**\r\n     @private\r\n     @internal\r\n     */\r\n    _getField() {\r\n        return this.field;\r\n    }\r\n    /**\r\n     @private\r\n     @internal\r\n     */\r\n    _getOperator() {\r\n        return this.operator;\r\n    }\r\n    /**\r\n     @private\r\n     @internal\r\n     */\r\n    _getValue() {\r\n        return this.value;\r\n    }\r\n}\r\nexports.UnaryFilter = UnaryFilter;\r\n/**\r\n * A `CompositeFilter` is used to narrow the set of documents returned\r\n * by a Firestore query by performing the logical OR or AND of multiple\r\n * {@link Filters}s. `CompositeFilters`s are created by invoking {@link Filter#or}\r\n * or {@link Filter#and} and can then be passed to {@link Query#where}\r\n * to create a new query instance that also contains the `CompositeFilter`.\r\n *\r\n * @private\r\n * @internal\r\n */\r\nclass CompositeFilter extends Filter {\r\n    /**\r\n     @private\r\n     @internal\r\n     */\r\n    constructor(filters, operator) {\r\n        super();\r\n        this.filters = filters;\r\n        this.operator = operator;\r\n    }\r\n    /**\r\n     @private\r\n     @internal\r\n     */\r\n    _getFilters() {\r\n        return this.filters;\r\n    }\r\n    /**\r\n     @private\r\n     @internal\r\n     */\r\n    _getOperator() {\r\n        return this.operator;\r\n    }\r\n}\r\nexports.CompositeFilter = CompositeFilter;\r\n//# sourceMappingURL=filter.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAGF,OAAO,CAACG,WAAW,GAAGH,OAAO,CAACI,MAAM,GAAG,KAAK,CAAC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,MAAM,CAAC;EACT;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,KAAKA,CAACC,SAAS,EAAEC,KAAK,EAAEN,KAAK,EAAE;IAClC,OAAO,IAAIE,WAAW,CAACG,SAAS,EAAEC,KAAK,EAAEN,KAAK,CAAC;EACnD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOO,EAAEA,CAAC,GAAGC,OAAO,EAAE;IAClB,OAAO,IAAIP,eAAe,CAACO,OAAO,EAAE,IAAI,CAAC;EAC7C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,GAAGA,CAAC,GAAGD,OAAO,EAAE;IACnB,OAAO,IAAIP,eAAe,CAACO,OAAO,EAAE,KAAK,CAAC;EAC9C;AACJ;AACAT,OAAO,CAACI,MAAM,GAAGA,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMD,WAAW,SAASC,MAAM,CAAC;EAC7B;AACJ;AACA;AACA;EACIO,WAAWA,CAACC,KAAK,EAAEC,QAAQ,EAAEZ,KAAK,EAAE;IAChC,KAAK,CAAC,CAAC;IACP,IAAI,CAACW,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACZ,KAAK,GAAGA,KAAK;EACtB;EACA;AACJ;AACA;AACA;EACIa,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAACF,KAAK;EACrB;EACA;AACJ;AACA;AACA;EACIG,YAAYA,CAAA,EAAG;IACX,OAAO,IAAI,CAACF,QAAQ;EACxB;EACA;AACJ;AACA;AACA;EACIG,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAACf,KAAK;EACrB;AACJ;AACAD,OAAO,CAACG,WAAW,GAAGA,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMD,eAAe,SAASE,MAAM,CAAC;EACjC;AACJ;AACA;AACA;EACIO,WAAWA,CAACF,OAAO,EAAEI,QAAQ,EAAE;IAC3B,KAAK,CAAC,CAAC;IACP,IAAI,CAACJ,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACI,QAAQ,GAAGA,QAAQ;EAC5B;EACA;AACJ;AACA;AACA;EACII,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACR,OAAO;EACvB;EACA;AACJ;AACA;AACA;EACIM,YAAYA,CAAA,EAAG;IACX,OAAO,IAAI,CAACF,QAAQ;EACxB;AACJ;AACAb,OAAO,CAACE,eAAe,GAAGA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}