{"ast":null,"code":"/*! firebase-admin v13.0.1 */\n\"use strict\";\n\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBuffer = isBuffer;\nexports.isArray = isArray;\nexports.isNonEmptyArray = isNonEmptyArray;\nexports.isBoolean = isBoolean;\nexports.isNumber = isNumber;\nexports.isString = isString;\nexports.isBase64String = isBase64String;\nexports.isNonEmptyString = isNonEmptyString;\nexports.isObject = isObject;\nexports.isNonNullObject = isNonNullObject;\nexports.isUid = isUid;\nexports.isPassword = isPassword;\nexports.isEmail = isEmail;\nexports.isPhoneNumber = isPhoneNumber;\nexports.isISODateString = isISODateString;\nexports.isUTCDateString = isUTCDateString;\nexports.isURL = isURL;\nexports.isTopic = isTopic;\nexports.isTaskId = isTaskId;\nconst url = require(\"url\");\n/**\r\n * Validates that a value is a byte buffer.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is byte buffer or not.\r\n */\nfunction isBuffer(value) {\n  return value instanceof Buffer;\n}\n/**\r\n * Validates that a value is an array.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is an array or not.\r\n */\nfunction isArray(value) {\n  return Array.isArray(value);\n}\n/**\r\n * Validates that a value is a non-empty array.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is a non-empty array or not.\r\n */\nfunction isNonEmptyArray(value) {\n  return isArray(value) && value.length !== 0;\n}\n/**\r\n * Validates that a value is a boolean.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is a boolean or not.\r\n */\nfunction isBoolean(value) {\n  return typeof value === 'boolean';\n}\n/**\r\n * Validates that a value is a number.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is a number or not.\r\n */\nfunction isNumber(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\n/**\r\n * Validates that a value is a string.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is a string or not.\r\n */\nfunction isString(value) {\n  return typeof value === 'string';\n}\n/**\r\n * Validates that a value is a base64 string.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is a base64 string or not.\r\n */\nfunction isBase64String(value) {\n  if (!isString(value)) {\n    return false;\n  }\n  return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(value);\n}\n/**\r\n * Validates that a value is a non-empty string.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is a non-empty string or not.\r\n */\nfunction isNonEmptyString(value) {\n  return isString(value) && value !== '';\n}\n/**\r\n * Validates that a value is a nullable object.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is an object or not.\r\n */\nfunction isObject(value) {\n  return typeof value === 'object' && !isArray(value);\n}\n/**\r\n * Validates that a value is a non-null object.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is a non-null object or not.\r\n */\nfunction isNonNullObject(value) {\n  return isObject(value) && value !== null;\n}\n/**\r\n * Validates that a string is a valid Firebase Auth uid.\r\n *\r\n * @param uid - The string to validate.\r\n * @returns Whether the string is a valid Firebase Auth uid.\r\n */\nfunction isUid(uid) {\n  return typeof uid === 'string' && uid.length > 0 && uid.length <= 128;\n}\n/**\r\n * Validates that a string is a valid Firebase Auth password.\r\n *\r\n * @param password - The password string to validate.\r\n * @returns Whether the string is a valid Firebase Auth password.\r\n */\nfunction isPassword(password) {\n  // A password must be a string of at least 6 characters.\n  return typeof password === 'string' && password.length >= 6;\n}\n/**\r\n * Validates that a string is a valid email.\r\n *\r\n * @param email - The string to validate.\r\n * @returns Whether the string is valid email or not.\r\n */\nfunction isEmail(email) {\n  if (typeof email !== 'string') {\n    return false;\n  }\n  // There must at least one character before the @ symbol and another after.\n  const re = /^[^@]+@[^@]+$/;\n  return re.test(email);\n}\n/**\r\n * Validates that a string is a valid phone number.\r\n *\r\n * @param phoneNumber - The string to validate.\r\n * @returns Whether the string is a valid phone number or not.\r\n */\nfunction isPhoneNumber(phoneNumber) {\n  if (typeof phoneNumber !== 'string') {\n    return false;\n  }\n  // Phone number validation is very lax here. Backend will enforce E.164\n  // spec compliance and will normalize accordingly.\n  // The phone number string must be non-empty and starts with a plus sign.\n  const re1 = /^\\+/;\n  // The phone number string must contain at least one alphanumeric character.\n  const re2 = /[\\da-zA-Z]+/;\n  return re1.test(phoneNumber) && re2.test(phoneNumber);\n}\n/**\r\n * Validates that a string is a valid ISO date string.\r\n *\r\n * @param dateString - The string to validate.\r\n * @returns Whether the string is a valid ISO date string.\r\n */\nfunction isISODateString(dateString) {\n  try {\n    return isNonEmptyString(dateString) && new Date(dateString).toISOString() === dateString;\n  } catch (e) {\n    return false;\n  }\n}\n/**\r\n * Validates that a string is a valid UTC date string.\r\n *\r\n * @param dateString - The string to validate.\r\n * @returns Whether the string is a valid UTC date string.\r\n */\nfunction isUTCDateString(dateString) {\n  try {\n    return isNonEmptyString(dateString) && new Date(dateString).toUTCString() === dateString;\n  } catch (e) {\n    return false;\n  }\n}\n/**\r\n * Validates that a string is a valid web URL.\r\n *\r\n * @param urlStr - The string to validate.\r\n * @returns Whether the string is valid web URL or not.\r\n */\nfunction isURL(urlStr) {\n  if (typeof urlStr !== 'string') {\n    return false;\n  }\n  // Lookup illegal characters.\n  const re = /[^a-z0-9:/?#[\\]@!$&'()*+,;=.\\-_~%]/i;\n  if (re.test(urlStr)) {\n    return false;\n  }\n  try {\n    const uri = url.parse(urlStr);\n    const scheme = uri.protocol;\n    const slashes = uri.slashes;\n    const hostname = uri.hostname;\n    const pathname = uri.pathname;\n    if (scheme !== 'http:' && scheme !== 'https:' || !slashes) {\n      return false;\n    }\n    // Validate hostname: Can contain letters, numbers, underscore and dashes separated by a dot.\n    // Each zone must not start with a hyphen or underscore.\n    if (!hostname || !/^[a-zA-Z0-9]+[\\w-]*([.]?[a-zA-Z0-9]+[\\w-]*)*$/.test(hostname)) {\n      return false;\n    }\n    // Allow for pathnames: (/chars+)*/?\n    // Where chars can be a combination of: a-z A-Z 0-9 - _ . ~ ! $ & ' ( ) * + , ; = : @ %\n    const pathnameRe = /^(\\/[\\w\\-.~!$'()*+,;=:@%]+)*\\/?$/;\n    // Validate pathname.\n    if (pathname && pathname !== '/' && !pathnameRe.test(pathname)) {\n      return false;\n    }\n    // Allow any query string and hash as long as no invalid character is used.\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\n/**\r\n * Validates that the provided topic is a valid FCM topic name.\r\n *\r\n * @param topic - The topic to validate.\r\n * @returns Whether the provided topic is a valid FCM topic name.\r\n */\nfunction isTopic(topic) {\n  if (typeof topic !== 'string') {\n    return false;\n  }\n  const VALID_TOPIC_REGEX = /^(\\/topics\\/)?(private\\/)?[a-zA-Z0-9-_.~%]+$/;\n  return VALID_TOPIC_REGEX.test(topic);\n}\n/**\r\n * Validates that the provided string can be used as a task ID\r\n * for Cloud Tasks.\r\n *\r\n * @param taskId - the task ID to validate.\r\n * @returns Whether the provided task ID is valid.\r\n */\nfunction isTaskId(taskId) {\n  if (typeof taskId !== 'string') {\n    return false;\n  }\n  const VALID_TASK_ID_REGEX = /^[A-Za-z0-9_-]+$/;\n  return VALID_TASK_ID_REGEX.test(taskId);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","isBuffer","isArray","isNonEmptyArray","isBoolean","isNumber","isString","isBase64String","isNonEmptyString","isObject","isNonNullObject","isUid","isPassword","isEmail","isPhoneNumber","isISODateString","isUTCDateString","isURL","isTopic","isTaskId","url","require","Buffer","Array","length","isNaN","test","uid","password","email","re","phoneNumber","re1","re2","dateString","Date","toISOString","e","toUTCString","urlStr","uri","parse","scheme","protocol","slashes","hostname","pathname","pathnameRe","topic","VALID_TOPIC_REGEX","taskId","VALID_TASK_ID_REGEX"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/firebase-admin/lib/utils/validator.js"],"sourcesContent":["/*! firebase-admin v13.0.1 */\r\n\"use strict\";\r\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.isBuffer = isBuffer;\r\nexports.isArray = isArray;\r\nexports.isNonEmptyArray = isNonEmptyArray;\r\nexports.isBoolean = isBoolean;\r\nexports.isNumber = isNumber;\r\nexports.isString = isString;\r\nexports.isBase64String = isBase64String;\r\nexports.isNonEmptyString = isNonEmptyString;\r\nexports.isObject = isObject;\r\nexports.isNonNullObject = isNonNullObject;\r\nexports.isUid = isUid;\r\nexports.isPassword = isPassword;\r\nexports.isEmail = isEmail;\r\nexports.isPhoneNumber = isPhoneNumber;\r\nexports.isISODateString = isISODateString;\r\nexports.isUTCDateString = isUTCDateString;\r\nexports.isURL = isURL;\r\nexports.isTopic = isTopic;\r\nexports.isTaskId = isTaskId;\r\nconst url = require(\"url\");\r\n/**\r\n * Validates that a value is a byte buffer.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is byte buffer or not.\r\n */\r\nfunction isBuffer(value) {\r\n    return value instanceof Buffer;\r\n}\r\n/**\r\n * Validates that a value is an array.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is an array or not.\r\n */\r\nfunction isArray(value) {\r\n    return Array.isArray(value);\r\n}\r\n/**\r\n * Validates that a value is a non-empty array.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is a non-empty array or not.\r\n */\r\nfunction isNonEmptyArray(value) {\r\n    return isArray(value) && value.length !== 0;\r\n}\r\n/**\r\n * Validates that a value is a boolean.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is a boolean or not.\r\n */\r\nfunction isBoolean(value) {\r\n    return typeof value === 'boolean';\r\n}\r\n/**\r\n * Validates that a value is a number.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is a number or not.\r\n */\r\nfunction isNumber(value) {\r\n    return typeof value === 'number' && !isNaN(value);\r\n}\r\n/**\r\n * Validates that a value is a string.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is a string or not.\r\n */\r\nfunction isString(value) {\r\n    return typeof value === 'string';\r\n}\r\n/**\r\n * Validates that a value is a base64 string.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is a base64 string or not.\r\n */\r\nfunction isBase64String(value) {\r\n    if (!isString(value)) {\r\n        return false;\r\n    }\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(value);\r\n}\r\n/**\r\n * Validates that a value is a non-empty string.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is a non-empty string or not.\r\n */\r\nfunction isNonEmptyString(value) {\r\n    return isString(value) && value !== '';\r\n}\r\n/**\r\n * Validates that a value is a nullable object.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is an object or not.\r\n */\r\nfunction isObject(value) {\r\n    return typeof value === 'object' && !isArray(value);\r\n}\r\n/**\r\n * Validates that a value is a non-null object.\r\n *\r\n * @param value - The value to validate.\r\n * @returns Whether the value is a non-null object or not.\r\n */\r\nfunction isNonNullObject(value) {\r\n    return isObject(value) && value !== null;\r\n}\r\n/**\r\n * Validates that a string is a valid Firebase Auth uid.\r\n *\r\n * @param uid - The string to validate.\r\n * @returns Whether the string is a valid Firebase Auth uid.\r\n */\r\nfunction isUid(uid) {\r\n    return typeof uid === 'string' && uid.length > 0 && uid.length <= 128;\r\n}\r\n/**\r\n * Validates that a string is a valid Firebase Auth password.\r\n *\r\n * @param password - The password string to validate.\r\n * @returns Whether the string is a valid Firebase Auth password.\r\n */\r\nfunction isPassword(password) {\r\n    // A password must be a string of at least 6 characters.\r\n    return typeof password === 'string' && password.length >= 6;\r\n}\r\n/**\r\n * Validates that a string is a valid email.\r\n *\r\n * @param email - The string to validate.\r\n * @returns Whether the string is valid email or not.\r\n */\r\nfunction isEmail(email) {\r\n    if (typeof email !== 'string') {\r\n        return false;\r\n    }\r\n    // There must at least one character before the @ symbol and another after.\r\n    const re = /^[^@]+@[^@]+$/;\r\n    return re.test(email);\r\n}\r\n/**\r\n * Validates that a string is a valid phone number.\r\n *\r\n * @param phoneNumber - The string to validate.\r\n * @returns Whether the string is a valid phone number or not.\r\n */\r\nfunction isPhoneNumber(phoneNumber) {\r\n    if (typeof phoneNumber !== 'string') {\r\n        return false;\r\n    }\r\n    // Phone number validation is very lax here. Backend will enforce E.164\r\n    // spec compliance and will normalize accordingly.\r\n    // The phone number string must be non-empty and starts with a plus sign.\r\n    const re1 = /^\\+/;\r\n    // The phone number string must contain at least one alphanumeric character.\r\n    const re2 = /[\\da-zA-Z]+/;\r\n    return re1.test(phoneNumber) && re2.test(phoneNumber);\r\n}\r\n/**\r\n * Validates that a string is a valid ISO date string.\r\n *\r\n * @param dateString - The string to validate.\r\n * @returns Whether the string is a valid ISO date string.\r\n */\r\nfunction isISODateString(dateString) {\r\n    try {\r\n        return isNonEmptyString(dateString) &&\r\n            (new Date(dateString).toISOString() === dateString);\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Validates that a string is a valid UTC date string.\r\n *\r\n * @param dateString - The string to validate.\r\n * @returns Whether the string is a valid UTC date string.\r\n */\r\nfunction isUTCDateString(dateString) {\r\n    try {\r\n        return isNonEmptyString(dateString) &&\r\n            (new Date(dateString).toUTCString() === dateString);\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Validates that a string is a valid web URL.\r\n *\r\n * @param urlStr - The string to validate.\r\n * @returns Whether the string is valid web URL or not.\r\n */\r\nfunction isURL(urlStr) {\r\n    if (typeof urlStr !== 'string') {\r\n        return false;\r\n    }\r\n    // Lookup illegal characters.\r\n    const re = /[^a-z0-9:/?#[\\]@!$&'()*+,;=.\\-_~%]/i;\r\n    if (re.test(urlStr)) {\r\n        return false;\r\n    }\r\n    try {\r\n        const uri = url.parse(urlStr);\r\n        const scheme = uri.protocol;\r\n        const slashes = uri.slashes;\r\n        const hostname = uri.hostname;\r\n        const pathname = uri.pathname;\r\n        if ((scheme !== 'http:' && scheme !== 'https:') || !slashes) {\r\n            return false;\r\n        }\r\n        // Validate hostname: Can contain letters, numbers, underscore and dashes separated by a dot.\r\n        // Each zone must not start with a hyphen or underscore.\r\n        if (!hostname || !/^[a-zA-Z0-9]+[\\w-]*([.]?[a-zA-Z0-9]+[\\w-]*)*$/.test(hostname)) {\r\n            return false;\r\n        }\r\n        // Allow for pathnames: (/chars+)*/?\r\n        // Where chars can be a combination of: a-z A-Z 0-9 - _ . ~ ! $ & ' ( ) * + , ; = : @ %\r\n        const pathnameRe = /^(\\/[\\w\\-.~!$'()*+,;=:@%]+)*\\/?$/;\r\n        // Validate pathname.\r\n        if (pathname &&\r\n            pathname !== '/' &&\r\n            !pathnameRe.test(pathname)) {\r\n            return false;\r\n        }\r\n        // Allow any query string and hash as long as no invalid character is used.\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Validates that the provided topic is a valid FCM topic name.\r\n *\r\n * @param topic - The topic to validate.\r\n * @returns Whether the provided topic is a valid FCM topic name.\r\n */\r\nfunction isTopic(topic) {\r\n    if (typeof topic !== 'string') {\r\n        return false;\r\n    }\r\n    const VALID_TOPIC_REGEX = /^(\\/topics\\/)?(private\\/)?[a-zA-Z0-9-_.~%]+$/;\r\n    return VALID_TOPIC_REGEX.test(topic);\r\n}\r\n/**\r\n * Validates that the provided string can be used as a task ID\r\n * for Cloud Tasks.\r\n *\r\n * @param taskId - the task ID to validate.\r\n * @returns Whether the provided task ID is valid.\r\n */\r\nfunction isTaskId(taskId) {\r\n    if (typeof taskId !== 'string') {\r\n        return false;\r\n    }\r\n    const VALID_TASK_ID_REGEX = /^[A-Za-z0-9_-]+$/;\r\n    return VALID_TASK_ID_REGEX.test(taskId);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}