{"ast":null,"code":"/**\r\n * DES (Data Encryption Standard) implementation.\r\n *\r\n * This implementation supports DES as well as 3DES-EDE in ECB and CBC mode.\r\n * It is based on the BSD-licensed implementation by Paul Tero:\r\n *\r\n * Paul Tero, July 2001\r\n * http://www.tero.co.uk/des/\r\n *\r\n * Optimised for performance with large blocks by\r\n * Michael Hayworth, November 2001\r\n * http://www.netdealing.com\r\n *\r\n * THIS SOFTWARE IS PROVIDED \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\r\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\r\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\r\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\r\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n *\r\n * @author Stefan Siegl\r\n * @author Dave Longley\r\n *\r\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\r\n * Copyright (c) 2012-2014 Digital Bazaar, Inc.\r\n */\nvar forge = require('./forge');\nrequire('./cipher');\nrequire('./cipherModes');\nrequire('./util');\n\n/* DES API */\nmodule.exports = forge.des = forge.des || {};\n\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * var cipher = forge.cipher.createCipher('DES-<mode>', key);\r\n * cipher.start({iv: iv});\r\n *\r\n * Creates an DES cipher object to encrypt data using the given symmetric key.\r\n * The output will be stored in the 'output' member of the returned cipher.\r\n *\r\n * The key and iv may be given as binary-encoded strings of bytes or\r\n * byte buffers.\r\n *\r\n * @param key the symmetric key to use (64 or 192 bits).\r\n * @param iv the initialization vector to use.\r\n * @param output the buffer to write to, null to create one.\r\n * @param mode the cipher mode to use (default: 'CBC' if IV is\r\n *          given, 'ECB' if null).\r\n *\r\n * @return the cipher.\r\n */\nforge.des.startEncrypting = function (key, iv, output, mode) {\n  var cipher = _createCipher({\n    key: key,\n    output: output,\n    decrypt: false,\n    mode: mode || (iv === null ? 'ECB' : 'CBC')\n  });\n  cipher.start(iv);\n  return cipher;\n};\n\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * var cipher = forge.cipher.createCipher('DES-<mode>', key);\r\n *\r\n * Creates an DES cipher object to encrypt data using the given symmetric key.\r\n *\r\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\r\n *\r\n * @param key the symmetric key to use (64 or 192 bits).\r\n * @param mode the cipher mode to use (default: 'CBC').\r\n *\r\n * @return the cipher.\r\n */\nforge.des.createEncryptionCipher = function (key, mode) {\n  return _createCipher({\n    key: key,\n    output: null,\n    decrypt: false,\n    mode: mode\n  });\n};\n\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * var decipher = forge.cipher.createDecipher('DES-<mode>', key);\r\n * decipher.start({iv: iv});\r\n *\r\n * Creates an DES cipher object to decrypt data using the given symmetric key.\r\n * The output will be stored in the 'output' member of the returned cipher.\r\n *\r\n * The key and iv may be given as binary-encoded strings of bytes or\r\n * byte buffers.\r\n *\r\n * @param key the symmetric key to use (64 or 192 bits).\r\n * @param iv the initialization vector to use.\r\n * @param output the buffer to write to, null to create one.\r\n * @param mode the cipher mode to use (default: 'CBC' if IV is\r\n *          given, 'ECB' if null).\r\n *\r\n * @return the cipher.\r\n */\nforge.des.startDecrypting = function (key, iv, output, mode) {\n  var cipher = _createCipher({\n    key: key,\n    output: output,\n    decrypt: true,\n    mode: mode || (iv === null ? 'ECB' : 'CBC')\n  });\n  cipher.start(iv);\n  return cipher;\n};\n\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * var decipher = forge.cipher.createDecipher('DES-<mode>', key);\r\n *\r\n * Creates an DES cipher object to decrypt data using the given symmetric key.\r\n *\r\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\r\n *\r\n * @param key the symmetric key to use (64 or 192 bits).\r\n * @param mode the cipher mode to use (default: 'CBC').\r\n *\r\n * @return the cipher.\r\n */\nforge.des.createDecryptionCipher = function (key, mode) {\n  return _createCipher({\n    key: key,\n    output: null,\n    decrypt: true,\n    mode: mode\n  });\n};\n\n/**\r\n * Creates a new DES cipher algorithm object.\r\n *\r\n * @param name the name of the algorithm.\r\n * @param mode the mode factory function.\r\n *\r\n * @return the DES algorithm object.\r\n */\nforge.des.Algorithm = function (name, mode) {\n  var self = this;\n  self.name = name;\n  self.mode = new mode({\n    blockSize: 8,\n    cipher: {\n      encrypt: function (inBlock, outBlock) {\n        return _updateBlock(self._keys, inBlock, outBlock, false);\n      },\n      decrypt: function (inBlock, outBlock) {\n        return _updateBlock(self._keys, inBlock, outBlock, true);\n      }\n    }\n  });\n  self._init = false;\n};\n\n/**\r\n * Initializes this DES algorithm by expanding its key.\r\n *\r\n * @param options the options to use.\r\n *          key the key to use with this algorithm.\r\n *          decrypt true if the algorithm should be initialized for decryption,\r\n *            false for encryption.\r\n */\nforge.des.Algorithm.prototype.initialize = function (options) {\n  if (this._init) {\n    return;\n  }\n  var key = forge.util.createBuffer(options.key);\n  if (this.name.indexOf('3DES') === 0) {\n    if (key.length() !== 24) {\n      throw new Error('Invalid Triple-DES key size: ' + key.length() * 8);\n    }\n  }\n\n  // do key expansion to 16 or 48 subkeys (single or triple DES)\n  this._keys = _createKeys(key);\n  this._init = true;\n};\n\n/** Register DES algorithms **/\n\nregisterAlgorithm('DES-ECB', forge.cipher.modes.ecb);\nregisterAlgorithm('DES-CBC', forge.cipher.modes.cbc);\nregisterAlgorithm('DES-CFB', forge.cipher.modes.cfb);\nregisterAlgorithm('DES-OFB', forge.cipher.modes.ofb);\nregisterAlgorithm('DES-CTR', forge.cipher.modes.ctr);\nregisterAlgorithm('3DES-ECB', forge.cipher.modes.ecb);\nregisterAlgorithm('3DES-CBC', forge.cipher.modes.cbc);\nregisterAlgorithm('3DES-CFB', forge.cipher.modes.cfb);\nregisterAlgorithm('3DES-OFB', forge.cipher.modes.ofb);\nregisterAlgorithm('3DES-CTR', forge.cipher.modes.ctr);\nfunction registerAlgorithm(name, mode) {\n  var factory = function () {\n    return new forge.des.Algorithm(name, mode);\n  };\n  forge.cipher.registerAlgorithm(name, factory);\n}\n\n/** DES implementation **/\n\nvar spfunction1 = [0x1010400, 0, 0x10000, 0x1010404, 0x1010004, 0x10404, 0x4, 0x10000, 0x400, 0x1010400, 0x1010404, 0x400, 0x1000404, 0x1010004, 0x1000000, 0x4, 0x404, 0x1000400, 0x1000400, 0x10400, 0x10400, 0x1010000, 0x1010000, 0x1000404, 0x10004, 0x1000004, 0x1000004, 0x10004, 0, 0x404, 0x10404, 0x1000000, 0x10000, 0x1010404, 0x4, 0x1010000, 0x1010400, 0x1000000, 0x1000000, 0x400, 0x1010004, 0x10000, 0x10400, 0x1000004, 0x400, 0x4, 0x1000404, 0x10404, 0x1010404, 0x10004, 0x1010000, 0x1000404, 0x1000004, 0x404, 0x10404, 0x1010400, 0x404, 0x1000400, 0x1000400, 0, 0x10004, 0x10400, 0, 0x1010004];\nvar spfunction2 = [-0x7fef7fe0, -0x7fff8000, 0x8000, 0x108020, 0x100000, 0x20, -0x7fefffe0, -0x7fff7fe0, -0x7fffffe0, -0x7fef7fe0, -0x7fef8000, -0x80000000, -0x7fff8000, 0x100000, 0x20, -0x7fefffe0, 0x108000, 0x100020, -0x7fff7fe0, 0, -0x80000000, 0x8000, 0x108020, -0x7ff00000, 0x100020, -0x7fffffe0, 0, 0x108000, 0x8020, -0x7fef8000, -0x7ff00000, 0x8020, 0, 0x108020, -0x7fefffe0, 0x100000, -0x7fff7fe0, -0x7ff00000, -0x7fef8000, 0x8000, -0x7ff00000, -0x7fff8000, 0x20, -0x7fef7fe0, 0x108020, 0x20, 0x8000, -0x80000000, 0x8020, -0x7fef8000, 0x100000, -0x7fffffe0, 0x100020, -0x7fff7fe0, -0x7fffffe0, 0x100020, 0x108000, 0, -0x7fff8000, 0x8020, -0x80000000, -0x7fefffe0, -0x7fef7fe0, 0x108000];\nvar spfunction3 = [0x208, 0x8020200, 0, 0x8020008, 0x8000200, 0, 0x20208, 0x8000200, 0x20008, 0x8000008, 0x8000008, 0x20000, 0x8020208, 0x20008, 0x8020000, 0x208, 0x8000000, 0x8, 0x8020200, 0x200, 0x20200, 0x8020000, 0x8020008, 0x20208, 0x8000208, 0x20200, 0x20000, 0x8000208, 0x8, 0x8020208, 0x200, 0x8000000, 0x8020200, 0x8000000, 0x20008, 0x208, 0x20000, 0x8020200, 0x8000200, 0, 0x200, 0x20008, 0x8020208, 0x8000200, 0x8000008, 0x200, 0, 0x8020008, 0x8000208, 0x20000, 0x8000000, 0x8020208, 0x8, 0x20208, 0x20200, 0x8000008, 0x8020000, 0x8000208, 0x208, 0x8020000, 0x20208, 0x8, 0x8020008, 0x20200];\nvar spfunction4 = [0x802001, 0x2081, 0x2081, 0x80, 0x802080, 0x800081, 0x800001, 0x2001, 0, 0x802000, 0x802000, 0x802081, 0x81, 0, 0x800080, 0x800001, 0x1, 0x2000, 0x800000, 0x802001, 0x80, 0x800000, 0x2001, 0x2080, 0x800081, 0x1, 0x2080, 0x800080, 0x2000, 0x802080, 0x802081, 0x81, 0x800080, 0x800001, 0x802000, 0x802081, 0x81, 0, 0, 0x802000, 0x2080, 0x800080, 0x800081, 0x1, 0x802001, 0x2081, 0x2081, 0x80, 0x802081, 0x81, 0x1, 0x2000, 0x800001, 0x2001, 0x802080, 0x800081, 0x2001, 0x2080, 0x800000, 0x802001, 0x80, 0x800000, 0x2000, 0x802080];\nvar spfunction5 = [0x100, 0x2080100, 0x2080000, 0x42000100, 0x80000, 0x100, 0x40000000, 0x2080000, 0x40080100, 0x80000, 0x2000100, 0x40080100, 0x42000100, 0x42080000, 0x80100, 0x40000000, 0x2000000, 0x40080000, 0x40080000, 0, 0x40000100, 0x42080100, 0x42080100, 0x2000100, 0x42080000, 0x40000100, 0, 0x42000000, 0x2080100, 0x2000000, 0x42000000, 0x80100, 0x80000, 0x42000100, 0x100, 0x2000000, 0x40000000, 0x2080000, 0x42000100, 0x40080100, 0x2000100, 0x40000000, 0x42080000, 0x2080100, 0x40080100, 0x100, 0x2000000, 0x42080000, 0x42080100, 0x80100, 0x42000000, 0x42080100, 0x2080000, 0, 0x40080000, 0x42000000, 0x80100, 0x2000100, 0x40000100, 0x80000, 0, 0x40080000, 0x2080100, 0x40000100];\nvar spfunction6 = [0x20000010, 0x20400000, 0x4000, 0x20404010, 0x20400000, 0x10, 0x20404010, 0x400000, 0x20004000, 0x404010, 0x400000, 0x20000010, 0x400010, 0x20004000, 0x20000000, 0x4010, 0, 0x400010, 0x20004010, 0x4000, 0x404000, 0x20004010, 0x10, 0x20400010, 0x20400010, 0, 0x404010, 0x20404000, 0x4010, 0x404000, 0x20404000, 0x20000000, 0x20004000, 0x10, 0x20400010, 0x404000, 0x20404010, 0x400000, 0x4010, 0x20000010, 0x400000, 0x20004000, 0x20000000, 0x4010, 0x20000010, 0x20404010, 0x404000, 0x20400000, 0x404010, 0x20404000, 0, 0x20400010, 0x10, 0x4000, 0x20400000, 0x404010, 0x4000, 0x400010, 0x20004010, 0, 0x20404000, 0x20000000, 0x400010, 0x20004010];\nvar spfunction7 = [0x200000, 0x4200002, 0x4000802, 0, 0x800, 0x4000802, 0x200802, 0x4200800, 0x4200802, 0x200000, 0, 0x4000002, 0x2, 0x4000000, 0x4200002, 0x802, 0x4000800, 0x200802, 0x200002, 0x4000800, 0x4000002, 0x4200000, 0x4200800, 0x200002, 0x4200000, 0x800, 0x802, 0x4200802, 0x200800, 0x2, 0x4000000, 0x200800, 0x4000000, 0x200800, 0x200000, 0x4000802, 0x4000802, 0x4200002, 0x4200002, 0x2, 0x200002, 0x4000000, 0x4000800, 0x200000, 0x4200800, 0x802, 0x200802, 0x4200800, 0x802, 0x4000002, 0x4200802, 0x4200000, 0x200800, 0, 0x2, 0x4200802, 0, 0x200802, 0x4200000, 0x800, 0x4000002, 0x4000800, 0x800, 0x200002];\nvar spfunction8 = [0x10001040, 0x1000, 0x40000, 0x10041040, 0x10000000, 0x10001040, 0x40, 0x10000000, 0x40040, 0x10040000, 0x10041040, 0x41000, 0x10041000, 0x41040, 0x1000, 0x40, 0x10040000, 0x10000040, 0x10001000, 0x1040, 0x41000, 0x40040, 0x10040040, 0x10041000, 0x1040, 0, 0, 0x10040040, 0x10000040, 0x10001000, 0x41040, 0x40000, 0x41040, 0x40000, 0x10041000, 0x1000, 0x40, 0x10040040, 0x1000, 0x41040, 0x10001000, 0x40, 0x10000040, 0x10040000, 0x10040040, 0x10000000, 0x40000, 0x10001040, 0, 0x10041040, 0x40040, 0x10000040, 0x10040000, 0x10001000, 0x10001040, 0, 0x10041040, 0x41000, 0x41000, 0x1040, 0x1040, 0x40040, 0x10000000, 0x10041000];\n\n/**\r\n * Create necessary sub keys.\r\n *\r\n * @param key the 64-bit or 192-bit key.\r\n *\r\n * @return the expanded keys.\r\n */\nfunction _createKeys(key) {\n  var pc2bytes0 = [0, 0x4, 0x20000000, 0x20000004, 0x10000, 0x10004, 0x20010000, 0x20010004, 0x200, 0x204, 0x20000200, 0x20000204, 0x10200, 0x10204, 0x20010200, 0x20010204],\n    pc2bytes1 = [0, 0x1, 0x100000, 0x100001, 0x4000000, 0x4000001, 0x4100000, 0x4100001, 0x100, 0x101, 0x100100, 0x100101, 0x4000100, 0x4000101, 0x4100100, 0x4100101],\n    pc2bytes2 = [0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808, 0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808],\n    pc2bytes3 = [0, 0x200000, 0x8000000, 0x8200000, 0x2000, 0x202000, 0x8002000, 0x8202000, 0x20000, 0x220000, 0x8020000, 0x8220000, 0x22000, 0x222000, 0x8022000, 0x8222000],\n    pc2bytes4 = [0, 0x40000, 0x10, 0x40010, 0, 0x40000, 0x10, 0x40010, 0x1000, 0x41000, 0x1010, 0x41010, 0x1000, 0x41000, 0x1010, 0x41010],\n    pc2bytes5 = [0, 0x400, 0x20, 0x420, 0, 0x400, 0x20, 0x420, 0x2000000, 0x2000400, 0x2000020, 0x2000420, 0x2000000, 0x2000400, 0x2000020, 0x2000420],\n    pc2bytes6 = [0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002, 0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002],\n    pc2bytes7 = [0, 0x10000, 0x800, 0x10800, 0x20000000, 0x20010000, 0x20000800, 0x20010800, 0x20000, 0x30000, 0x20800, 0x30800, 0x20020000, 0x20030000, 0x20020800, 0x20030800],\n    pc2bytes8 = [0, 0x40000, 0, 0x40000, 0x2, 0x40002, 0x2, 0x40002, 0x2000000, 0x2040000, 0x2000000, 0x2040000, 0x2000002, 0x2040002, 0x2000002, 0x2040002],\n    pc2bytes9 = [0, 0x10000000, 0x8, 0x10000008, 0, 0x10000000, 0x8, 0x10000008, 0x400, 0x10000400, 0x408, 0x10000408, 0x400, 0x10000400, 0x408, 0x10000408],\n    pc2bytes10 = [0, 0x20, 0, 0x20, 0x100000, 0x100020, 0x100000, 0x100020, 0x2000, 0x2020, 0x2000, 0x2020, 0x102000, 0x102020, 0x102000, 0x102020],\n    pc2bytes11 = [0, 0x1000000, 0x200, 0x1000200, 0x200000, 0x1200000, 0x200200, 0x1200200, 0x4000000, 0x5000000, 0x4000200, 0x5000200, 0x4200000, 0x5200000, 0x4200200, 0x5200200],\n    pc2bytes12 = [0, 0x1000, 0x8000000, 0x8001000, 0x80000, 0x81000, 0x8080000, 0x8081000, 0x10, 0x1010, 0x8000010, 0x8001010, 0x80010, 0x81010, 0x8080010, 0x8081010],\n    pc2bytes13 = [0, 0x4, 0x100, 0x104, 0, 0x4, 0x100, 0x104, 0x1, 0x5, 0x101, 0x105, 0x1, 0x5, 0x101, 0x105];\n\n  // how many iterations (1 for des, 3 for triple des)\n  // changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys\n  var iterations = key.length() > 8 ? 3 : 1;\n\n  // stores the return keys\n  var keys = [];\n\n  // now define the left shifts which need to be done\n  var shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];\n  var n = 0,\n    tmp;\n  for (var j = 0; j < iterations; j++) {\n    var left = key.getInt32();\n    var right = key.getInt32();\n    tmp = (left >>> 4 ^ right) & 0x0f0f0f0f;\n    right ^= tmp;\n    left ^= tmp << 4;\n    tmp = (right >>> -16 ^ left) & 0x0000ffff;\n    left ^= tmp;\n    right ^= tmp << -16;\n    tmp = (left >>> 2 ^ right) & 0x33333333;\n    right ^= tmp;\n    left ^= tmp << 2;\n    tmp = (right >>> -16 ^ left) & 0x0000ffff;\n    left ^= tmp;\n    right ^= tmp << -16;\n    tmp = (left >>> 1 ^ right) & 0x55555555;\n    right ^= tmp;\n    left ^= tmp << 1;\n    tmp = (right >>> 8 ^ left) & 0x00ff00ff;\n    left ^= tmp;\n    right ^= tmp << 8;\n    tmp = (left >>> 1 ^ right) & 0x55555555;\n    right ^= tmp;\n    left ^= tmp << 1;\n\n    // right needs to be shifted and OR'd with last four bits of left\n    tmp = left << 8 | right >>> 20 & 0x000000f0;\n\n    // left needs to be put upside down\n    left = right << 24 | right << 8 & 0xff0000 | right >>> 8 & 0xff00 | right >>> 24 & 0xf0;\n    right = tmp;\n\n    // now go through and perform these shifts on the left and right keys\n    for (var i = 0; i < shifts.length; ++i) {\n      //shift the keys either one or two bits to the left\n      if (shifts[i]) {\n        left = left << 2 | left >>> 26;\n        right = right << 2 | right >>> 26;\n      } else {\n        left = left << 1 | left >>> 27;\n        right = right << 1 | right >>> 27;\n      }\n      left &= -0xf;\n      right &= -0xf;\n\n      // now apply PC-2, in such a way that E is easier when encrypting or\n      // decrypting this conversion will look like PC-2 except only the last 6\n      // bits of each byte are used rather than 48 consecutive bits and the\n      // order of lines will be according to how the S selection functions will\n      // be applied: S2, S4, S6, S8, S1, S3, S5, S7\n      var lefttmp = pc2bytes0[left >>> 28] | pc2bytes1[left >>> 24 & 0xf] | pc2bytes2[left >>> 20 & 0xf] | pc2bytes3[left >>> 16 & 0xf] | pc2bytes4[left >>> 12 & 0xf] | pc2bytes5[left >>> 8 & 0xf] | pc2bytes6[left >>> 4 & 0xf];\n      var righttmp = pc2bytes7[right >>> 28] | pc2bytes8[right >>> 24 & 0xf] | pc2bytes9[right >>> 20 & 0xf] | pc2bytes10[right >>> 16 & 0xf] | pc2bytes11[right >>> 12 & 0xf] | pc2bytes12[right >>> 8 & 0xf] | pc2bytes13[right >>> 4 & 0xf];\n      tmp = (righttmp >>> 16 ^ lefttmp) & 0x0000ffff;\n      keys[n++] = lefttmp ^ tmp;\n      keys[n++] = righttmp ^ tmp << 16;\n    }\n  }\n  return keys;\n}\n\n/**\r\n * Updates a single block (1 byte) using DES. The update will either\r\n * encrypt or decrypt the block.\r\n *\r\n * @param keys the expanded keys.\r\n * @param input the input block (an array of 32-bit words).\r\n * @param output the updated output block.\r\n * @param decrypt true to decrypt the block, false to encrypt it.\r\n */\nfunction _updateBlock(keys, input, output, decrypt) {\n  // set up loops for single or triple DES\n  var iterations = keys.length === 32 ? 3 : 9;\n  var looping;\n  if (iterations === 3) {\n    looping = decrypt ? [30, -2, -2] : [0, 32, 2];\n  } else {\n    looping = decrypt ? [94, 62, -2, 32, 64, 2, 30, -2, -2] : [0, 32, 2, 62, 30, -2, 64, 96, 2];\n  }\n  var tmp;\n  var left = input[0];\n  var right = input[1];\n\n  // first each 64 bit chunk of the message must be permuted according to IP\n  tmp = (left >>> 4 ^ right) & 0x0f0f0f0f;\n  right ^= tmp;\n  left ^= tmp << 4;\n  tmp = (left >>> 16 ^ right) & 0x0000ffff;\n  right ^= tmp;\n  left ^= tmp << 16;\n  tmp = (right >>> 2 ^ left) & 0x33333333;\n  left ^= tmp;\n  right ^= tmp << 2;\n  tmp = (right >>> 8 ^ left) & 0x00ff00ff;\n  left ^= tmp;\n  right ^= tmp << 8;\n  tmp = (left >>> 1 ^ right) & 0x55555555;\n  right ^= tmp;\n  left ^= tmp << 1;\n\n  // rotate left 1 bit\n  left = left << 1 | left >>> 31;\n  right = right << 1 | right >>> 31;\n  for (var j = 0; j < iterations; j += 3) {\n    var endloop = looping[j + 1];\n    var loopinc = looping[j + 2];\n\n    // now go through and perform the encryption or decryption\n    for (var i = looping[j]; i != endloop; i += loopinc) {\n      var right1 = right ^ keys[i];\n      var right2 = (right >>> 4 | right << 28) ^ keys[i + 1];\n\n      // passing these bytes through the S selection functions\n      tmp = left;\n      left = right;\n      right = tmp ^ (spfunction2[right1 >>> 24 & 0x3f] | spfunction4[right1 >>> 16 & 0x3f] | spfunction6[right1 >>> 8 & 0x3f] | spfunction8[right1 & 0x3f] | spfunction1[right2 >>> 24 & 0x3f] | spfunction3[right2 >>> 16 & 0x3f] | spfunction5[right2 >>> 8 & 0x3f] | spfunction7[right2 & 0x3f]);\n    }\n    // unreverse left and right\n    tmp = left;\n    left = right;\n    right = tmp;\n  }\n\n  // rotate right 1 bit\n  left = left >>> 1 | left << 31;\n  right = right >>> 1 | right << 31;\n\n  // now perform IP-1, which is IP in the opposite direction\n  tmp = (left >>> 1 ^ right) & 0x55555555;\n  right ^= tmp;\n  left ^= tmp << 1;\n  tmp = (right >>> 8 ^ left) & 0x00ff00ff;\n  left ^= tmp;\n  right ^= tmp << 8;\n  tmp = (right >>> 2 ^ left) & 0x33333333;\n  left ^= tmp;\n  right ^= tmp << 2;\n  tmp = (left >>> 16 ^ right) & 0x0000ffff;\n  right ^= tmp;\n  left ^= tmp << 16;\n  tmp = (left >>> 4 ^ right) & 0x0f0f0f0f;\n  right ^= tmp;\n  left ^= tmp << 4;\n  output[0] = left;\n  output[1] = right;\n}\n\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * forge.cipher.createCipher('DES-<mode>', key);\r\n * forge.cipher.createDecipher('DES-<mode>', key);\r\n *\r\n * Creates a deprecated DES cipher object. This object's mode will default to\r\n * CBC (cipher-block-chaining).\r\n *\r\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\r\n *\r\n * @param options the options to use.\r\n *          key the symmetric key to use (64 or 192 bits).\r\n *          output the buffer to write to.\r\n *          decrypt true for decryption, false for encryption.\r\n *          mode the cipher mode to use (default: 'CBC').\r\n *\r\n * @return the cipher.\r\n */\nfunction _createCipher(options) {\n  options = options || {};\n  var mode = (options.mode || 'CBC').toUpperCase();\n  var algorithm = 'DES-' + mode;\n  var cipher;\n  if (options.decrypt) {\n    cipher = forge.cipher.createDecipher(algorithm, options.key);\n  } else {\n    cipher = forge.cipher.createCipher(algorithm, options.key);\n  }\n\n  // backwards compatible start API\n  var start = cipher.start;\n  cipher.start = function (iv, options) {\n    // backwards compatibility: support second arg as output buffer\n    var output = null;\n    if (options instanceof forge.util.ByteBuffer) {\n      output = options;\n      options = {};\n    }\n    options = options || {};\n    options.output = output;\n    options.iv = iv;\n    start.call(cipher, options);\n  };\n  return cipher;\n}","map":{"version":3,"names":["forge","require","module","exports","des","startEncrypting","key","iv","output","mode","cipher","_createCipher","decrypt","start","createEncryptionCipher","startDecrypting","createDecryptionCipher","Algorithm","name","self","blockSize","encrypt","inBlock","outBlock","_updateBlock","_keys","_init","prototype","initialize","options","util","createBuffer","indexOf","length","Error","_createKeys","registerAlgorithm","modes","ecb","cbc","cfb","ofb","ctr","factory","spfunction1","spfunction2","spfunction3","spfunction4","spfunction5","spfunction6","spfunction7","spfunction8","pc2bytes0","pc2bytes1","pc2bytes2","pc2bytes3","pc2bytes4","pc2bytes5","pc2bytes6","pc2bytes7","pc2bytes8","pc2bytes9","pc2bytes10","pc2bytes11","pc2bytes12","pc2bytes13","iterations","keys","shifts","n","tmp","j","left","getInt32","right","i","lefttmp","righttmp","input","looping","endloop","loopinc","right1","right2","toUpperCase","algorithm","createDecipher","createCipher","ByteBuffer","call"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/node-forge/lib/des.js"],"sourcesContent":["/**\r\n * DES (Data Encryption Standard) implementation.\r\n *\r\n * This implementation supports DES as well as 3DES-EDE in ECB and CBC mode.\r\n * It is based on the BSD-licensed implementation by Paul Tero:\r\n *\r\n * Paul Tero, July 2001\r\n * http://www.tero.co.uk/des/\r\n *\r\n * Optimised for performance with large blocks by\r\n * Michael Hayworth, November 2001\r\n * http://www.netdealing.com\r\n *\r\n * THIS SOFTWARE IS PROVIDED \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\r\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\r\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\r\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\r\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n *\r\n * @author Stefan Siegl\r\n * @author Dave Longley\r\n *\r\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\r\n * Copyright (c) 2012-2014 Digital Bazaar, Inc.\r\n */\r\nvar forge = require('./forge');\r\nrequire('./cipher');\r\nrequire('./cipherModes');\r\nrequire('./util');\r\n\r\n/* DES API */\r\nmodule.exports = forge.des = forge.des || {};\r\n\r\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * var cipher = forge.cipher.createCipher('DES-<mode>', key);\r\n * cipher.start({iv: iv});\r\n *\r\n * Creates an DES cipher object to encrypt data using the given symmetric key.\r\n * The output will be stored in the 'output' member of the returned cipher.\r\n *\r\n * The key and iv may be given as binary-encoded strings of bytes or\r\n * byte buffers.\r\n *\r\n * @param key the symmetric key to use (64 or 192 bits).\r\n * @param iv the initialization vector to use.\r\n * @param output the buffer to write to, null to create one.\r\n * @param mode the cipher mode to use (default: 'CBC' if IV is\r\n *          given, 'ECB' if null).\r\n *\r\n * @return the cipher.\r\n */\r\nforge.des.startEncrypting = function(key, iv, output, mode) {\r\n  var cipher = _createCipher({\r\n    key: key,\r\n    output: output,\r\n    decrypt: false,\r\n    mode: mode || (iv === null ? 'ECB' : 'CBC')\r\n  });\r\n  cipher.start(iv);\r\n  return cipher;\r\n};\r\n\r\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * var cipher = forge.cipher.createCipher('DES-<mode>', key);\r\n *\r\n * Creates an DES cipher object to encrypt data using the given symmetric key.\r\n *\r\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\r\n *\r\n * @param key the symmetric key to use (64 or 192 bits).\r\n * @param mode the cipher mode to use (default: 'CBC').\r\n *\r\n * @return the cipher.\r\n */\r\nforge.des.createEncryptionCipher = function(key, mode) {\r\n  return _createCipher({\r\n    key: key,\r\n    output: null,\r\n    decrypt: false,\r\n    mode: mode\r\n  });\r\n};\r\n\r\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * var decipher = forge.cipher.createDecipher('DES-<mode>', key);\r\n * decipher.start({iv: iv});\r\n *\r\n * Creates an DES cipher object to decrypt data using the given symmetric key.\r\n * The output will be stored in the 'output' member of the returned cipher.\r\n *\r\n * The key and iv may be given as binary-encoded strings of bytes or\r\n * byte buffers.\r\n *\r\n * @param key the symmetric key to use (64 or 192 bits).\r\n * @param iv the initialization vector to use.\r\n * @param output the buffer to write to, null to create one.\r\n * @param mode the cipher mode to use (default: 'CBC' if IV is\r\n *          given, 'ECB' if null).\r\n *\r\n * @return the cipher.\r\n */\r\nforge.des.startDecrypting = function(key, iv, output, mode) {\r\n  var cipher = _createCipher({\r\n    key: key,\r\n    output: output,\r\n    decrypt: true,\r\n    mode: mode || (iv === null ? 'ECB' : 'CBC')\r\n  });\r\n  cipher.start(iv);\r\n  return cipher;\r\n};\r\n\r\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * var decipher = forge.cipher.createDecipher('DES-<mode>', key);\r\n *\r\n * Creates an DES cipher object to decrypt data using the given symmetric key.\r\n *\r\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\r\n *\r\n * @param key the symmetric key to use (64 or 192 bits).\r\n * @param mode the cipher mode to use (default: 'CBC').\r\n *\r\n * @return the cipher.\r\n */\r\nforge.des.createDecryptionCipher = function(key, mode) {\r\n  return _createCipher({\r\n    key: key,\r\n    output: null,\r\n    decrypt: true,\r\n    mode: mode\r\n  });\r\n};\r\n\r\n/**\r\n * Creates a new DES cipher algorithm object.\r\n *\r\n * @param name the name of the algorithm.\r\n * @param mode the mode factory function.\r\n *\r\n * @return the DES algorithm object.\r\n */\r\nforge.des.Algorithm = function(name, mode) {\r\n  var self = this;\r\n  self.name = name;\r\n  self.mode = new mode({\r\n    blockSize: 8,\r\n    cipher: {\r\n      encrypt: function(inBlock, outBlock) {\r\n        return _updateBlock(self._keys, inBlock, outBlock, false);\r\n      },\r\n      decrypt: function(inBlock, outBlock) {\r\n        return _updateBlock(self._keys, inBlock, outBlock, true);\r\n      }\r\n    }\r\n  });\r\n  self._init = false;\r\n};\r\n\r\n/**\r\n * Initializes this DES algorithm by expanding its key.\r\n *\r\n * @param options the options to use.\r\n *          key the key to use with this algorithm.\r\n *          decrypt true if the algorithm should be initialized for decryption,\r\n *            false for encryption.\r\n */\r\nforge.des.Algorithm.prototype.initialize = function(options) {\r\n  if(this._init) {\r\n    return;\r\n  }\r\n\r\n  var key = forge.util.createBuffer(options.key);\r\n  if(this.name.indexOf('3DES') === 0) {\r\n    if(key.length() !== 24) {\r\n      throw new Error('Invalid Triple-DES key size: ' + key.length() * 8);\r\n    }\r\n  }\r\n\r\n  // do key expansion to 16 or 48 subkeys (single or triple DES)\r\n  this._keys = _createKeys(key);\r\n  this._init = true;\r\n};\r\n\r\n/** Register DES algorithms **/\r\n\r\nregisterAlgorithm('DES-ECB', forge.cipher.modes.ecb);\r\nregisterAlgorithm('DES-CBC', forge.cipher.modes.cbc);\r\nregisterAlgorithm('DES-CFB', forge.cipher.modes.cfb);\r\nregisterAlgorithm('DES-OFB', forge.cipher.modes.ofb);\r\nregisterAlgorithm('DES-CTR', forge.cipher.modes.ctr);\r\n\r\nregisterAlgorithm('3DES-ECB', forge.cipher.modes.ecb);\r\nregisterAlgorithm('3DES-CBC', forge.cipher.modes.cbc);\r\nregisterAlgorithm('3DES-CFB', forge.cipher.modes.cfb);\r\nregisterAlgorithm('3DES-OFB', forge.cipher.modes.ofb);\r\nregisterAlgorithm('3DES-CTR', forge.cipher.modes.ctr);\r\n\r\nfunction registerAlgorithm(name, mode) {\r\n  var factory = function() {\r\n    return new forge.des.Algorithm(name, mode);\r\n  };\r\n  forge.cipher.registerAlgorithm(name, factory);\r\n}\r\n\r\n/** DES implementation **/\r\n\r\nvar spfunction1 = [0x1010400,0,0x10000,0x1010404,0x1010004,0x10404,0x4,0x10000,0x400,0x1010400,0x1010404,0x400,0x1000404,0x1010004,0x1000000,0x4,0x404,0x1000400,0x1000400,0x10400,0x10400,0x1010000,0x1010000,0x1000404,0x10004,0x1000004,0x1000004,0x10004,0,0x404,0x10404,0x1000000,0x10000,0x1010404,0x4,0x1010000,0x1010400,0x1000000,0x1000000,0x400,0x1010004,0x10000,0x10400,0x1000004,0x400,0x4,0x1000404,0x10404,0x1010404,0x10004,0x1010000,0x1000404,0x1000004,0x404,0x10404,0x1010400,0x404,0x1000400,0x1000400,0,0x10004,0x10400,0,0x1010004];\r\nvar spfunction2 = [-0x7fef7fe0,-0x7fff8000,0x8000,0x108020,0x100000,0x20,-0x7fefffe0,-0x7fff7fe0,-0x7fffffe0,-0x7fef7fe0,-0x7fef8000,-0x80000000,-0x7fff8000,0x100000,0x20,-0x7fefffe0,0x108000,0x100020,-0x7fff7fe0,0,-0x80000000,0x8000,0x108020,-0x7ff00000,0x100020,-0x7fffffe0,0,0x108000,0x8020,-0x7fef8000,-0x7ff00000,0x8020,0,0x108020,-0x7fefffe0,0x100000,-0x7fff7fe0,-0x7ff00000,-0x7fef8000,0x8000,-0x7ff00000,-0x7fff8000,0x20,-0x7fef7fe0,0x108020,0x20,0x8000,-0x80000000,0x8020,-0x7fef8000,0x100000,-0x7fffffe0,0x100020,-0x7fff7fe0,-0x7fffffe0,0x100020,0x108000,0,-0x7fff8000,0x8020,-0x80000000,-0x7fefffe0,-0x7fef7fe0,0x108000];\r\nvar spfunction3 = [0x208,0x8020200,0,0x8020008,0x8000200,0,0x20208,0x8000200,0x20008,0x8000008,0x8000008,0x20000,0x8020208,0x20008,0x8020000,0x208,0x8000000,0x8,0x8020200,0x200,0x20200,0x8020000,0x8020008,0x20208,0x8000208,0x20200,0x20000,0x8000208,0x8,0x8020208,0x200,0x8000000,0x8020200,0x8000000,0x20008,0x208,0x20000,0x8020200,0x8000200,0,0x200,0x20008,0x8020208,0x8000200,0x8000008,0x200,0,0x8020008,0x8000208,0x20000,0x8000000,0x8020208,0x8,0x20208,0x20200,0x8000008,0x8020000,0x8000208,0x208,0x8020000,0x20208,0x8,0x8020008,0x20200];\r\nvar spfunction4 = [0x802001,0x2081,0x2081,0x80,0x802080,0x800081,0x800001,0x2001,0,0x802000,0x802000,0x802081,0x81,0,0x800080,0x800001,0x1,0x2000,0x800000,0x802001,0x80,0x800000,0x2001,0x2080,0x800081,0x1,0x2080,0x800080,0x2000,0x802080,0x802081,0x81,0x800080,0x800001,0x802000,0x802081,0x81,0,0,0x802000,0x2080,0x800080,0x800081,0x1,0x802001,0x2081,0x2081,0x80,0x802081,0x81,0x1,0x2000,0x800001,0x2001,0x802080,0x800081,0x2001,0x2080,0x800000,0x802001,0x80,0x800000,0x2000,0x802080];\r\nvar spfunction5 = [0x100,0x2080100,0x2080000,0x42000100,0x80000,0x100,0x40000000,0x2080000,0x40080100,0x80000,0x2000100,0x40080100,0x42000100,0x42080000,0x80100,0x40000000,0x2000000,0x40080000,0x40080000,0,0x40000100,0x42080100,0x42080100,0x2000100,0x42080000,0x40000100,0,0x42000000,0x2080100,0x2000000,0x42000000,0x80100,0x80000,0x42000100,0x100,0x2000000,0x40000000,0x2080000,0x42000100,0x40080100,0x2000100,0x40000000,0x42080000,0x2080100,0x40080100,0x100,0x2000000,0x42080000,0x42080100,0x80100,0x42000000,0x42080100,0x2080000,0,0x40080000,0x42000000,0x80100,0x2000100,0x40000100,0x80000,0,0x40080000,0x2080100,0x40000100];\r\nvar spfunction6 = [0x20000010,0x20400000,0x4000,0x20404010,0x20400000,0x10,0x20404010,0x400000,0x20004000,0x404010,0x400000,0x20000010,0x400010,0x20004000,0x20000000,0x4010,0,0x400010,0x20004010,0x4000,0x404000,0x20004010,0x10,0x20400010,0x20400010,0,0x404010,0x20404000,0x4010,0x404000,0x20404000,0x20000000,0x20004000,0x10,0x20400010,0x404000,0x20404010,0x400000,0x4010,0x20000010,0x400000,0x20004000,0x20000000,0x4010,0x20000010,0x20404010,0x404000,0x20400000,0x404010,0x20404000,0,0x20400010,0x10,0x4000,0x20400000,0x404010,0x4000,0x400010,0x20004010,0,0x20404000,0x20000000,0x400010,0x20004010];\r\nvar spfunction7 = [0x200000,0x4200002,0x4000802,0,0x800,0x4000802,0x200802,0x4200800,0x4200802,0x200000,0,0x4000002,0x2,0x4000000,0x4200002,0x802,0x4000800,0x200802,0x200002,0x4000800,0x4000002,0x4200000,0x4200800,0x200002,0x4200000,0x800,0x802,0x4200802,0x200800,0x2,0x4000000,0x200800,0x4000000,0x200800,0x200000,0x4000802,0x4000802,0x4200002,0x4200002,0x2,0x200002,0x4000000,0x4000800,0x200000,0x4200800,0x802,0x200802,0x4200800,0x802,0x4000002,0x4200802,0x4200000,0x200800,0,0x2,0x4200802,0,0x200802,0x4200000,0x800,0x4000002,0x4000800,0x800,0x200002];\r\nvar spfunction8 = [0x10001040,0x1000,0x40000,0x10041040,0x10000000,0x10001040,0x40,0x10000000,0x40040,0x10040000,0x10041040,0x41000,0x10041000,0x41040,0x1000,0x40,0x10040000,0x10000040,0x10001000,0x1040,0x41000,0x40040,0x10040040,0x10041000,0x1040,0,0,0x10040040,0x10000040,0x10001000,0x41040,0x40000,0x41040,0x40000,0x10041000,0x1000,0x40,0x10040040,0x1000,0x41040,0x10001000,0x40,0x10000040,0x10040000,0x10040040,0x10000000,0x40000,0x10001040,0,0x10041040,0x40040,0x10000040,0x10040000,0x10001000,0x10001040,0,0x10041040,0x41000,0x41000,0x1040,0x1040,0x40040,0x10000000,0x10041000];\r\n\r\n/**\r\n * Create necessary sub keys.\r\n *\r\n * @param key the 64-bit or 192-bit key.\r\n *\r\n * @return the expanded keys.\r\n */\r\nfunction _createKeys(key) {\r\n  var pc2bytes0  = [0,0x4,0x20000000,0x20000004,0x10000,0x10004,0x20010000,0x20010004,0x200,0x204,0x20000200,0x20000204,0x10200,0x10204,0x20010200,0x20010204],\r\n      pc2bytes1  = [0,0x1,0x100000,0x100001,0x4000000,0x4000001,0x4100000,0x4100001,0x100,0x101,0x100100,0x100101,0x4000100,0x4000101,0x4100100,0x4100101],\r\n      pc2bytes2  = [0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808,0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808],\r\n      pc2bytes3  = [0,0x200000,0x8000000,0x8200000,0x2000,0x202000,0x8002000,0x8202000,0x20000,0x220000,0x8020000,0x8220000,0x22000,0x222000,0x8022000,0x8222000],\r\n      pc2bytes4  = [0,0x40000,0x10,0x40010,0,0x40000,0x10,0x40010,0x1000,0x41000,0x1010,0x41010,0x1000,0x41000,0x1010,0x41010],\r\n      pc2bytes5  = [0,0x400,0x20,0x420,0,0x400,0x20,0x420,0x2000000,0x2000400,0x2000020,0x2000420,0x2000000,0x2000400,0x2000020,0x2000420],\r\n      pc2bytes6  = [0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002,0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002],\r\n      pc2bytes7  = [0,0x10000,0x800,0x10800,0x20000000,0x20010000,0x20000800,0x20010800,0x20000,0x30000,0x20800,0x30800,0x20020000,0x20030000,0x20020800,0x20030800],\r\n      pc2bytes8  = [0,0x40000,0,0x40000,0x2,0x40002,0x2,0x40002,0x2000000,0x2040000,0x2000000,0x2040000,0x2000002,0x2040002,0x2000002,0x2040002],\r\n      pc2bytes9  = [0,0x10000000,0x8,0x10000008,0,0x10000000,0x8,0x10000008,0x400,0x10000400,0x408,0x10000408,0x400,0x10000400,0x408,0x10000408],\r\n      pc2bytes10 = [0,0x20,0,0x20,0x100000,0x100020,0x100000,0x100020,0x2000,0x2020,0x2000,0x2020,0x102000,0x102020,0x102000,0x102020],\r\n      pc2bytes11 = [0,0x1000000,0x200,0x1000200,0x200000,0x1200000,0x200200,0x1200200,0x4000000,0x5000000,0x4000200,0x5000200,0x4200000,0x5200000,0x4200200,0x5200200],\r\n      pc2bytes12 = [0,0x1000,0x8000000,0x8001000,0x80000,0x81000,0x8080000,0x8081000,0x10,0x1010,0x8000010,0x8001010,0x80010,0x81010,0x8080010,0x8081010],\r\n      pc2bytes13 = [0,0x4,0x100,0x104,0,0x4,0x100,0x104,0x1,0x5,0x101,0x105,0x1,0x5,0x101,0x105];\r\n\r\n  // how many iterations (1 for des, 3 for triple des)\r\n  // changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys\r\n  var iterations = key.length() > 8 ? 3 : 1;\r\n\r\n  // stores the return keys\r\n  var keys = [];\r\n\r\n  // now define the left shifts which need to be done\r\n  var shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];\r\n\r\n  var n = 0, tmp;\r\n  for(var j = 0; j < iterations; j++) {\r\n    var left = key.getInt32();\r\n    var right = key.getInt32();\r\n\r\n    tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\r\n    right ^= tmp;\r\n    left ^= (tmp << 4);\r\n\r\n    tmp = ((right >>> -16) ^ left) & 0x0000ffff;\r\n    left ^= tmp;\r\n    right ^= (tmp << -16);\r\n\r\n    tmp = ((left >>> 2) ^ right) & 0x33333333;\r\n    right ^= tmp;\r\n    left ^= (tmp << 2);\r\n\r\n    tmp = ((right >>> -16) ^ left) & 0x0000ffff;\r\n    left ^= tmp;\r\n    right ^= (tmp << -16);\r\n\r\n    tmp = ((left >>> 1) ^ right) & 0x55555555;\r\n    right ^= tmp;\r\n    left ^= (tmp << 1);\r\n\r\n    tmp = ((right >>> 8) ^ left) & 0x00ff00ff;\r\n    left ^= tmp;\r\n    right ^= (tmp << 8);\r\n\r\n    tmp = ((left >>> 1) ^ right) & 0x55555555;\r\n    right ^= tmp;\r\n    left ^= (tmp << 1);\r\n\r\n    // right needs to be shifted and OR'd with last four bits of left\r\n    tmp = (left << 8) | ((right >>> 20) & 0x000000f0);\r\n\r\n    // left needs to be put upside down\r\n    left = ((right << 24) | ((right << 8) & 0xff0000) |\r\n      ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0));\r\n    right = tmp;\r\n\r\n    // now go through and perform these shifts on the left and right keys\r\n    for(var i = 0; i < shifts.length; ++i) {\r\n      //shift the keys either one or two bits to the left\r\n      if(shifts[i]) {\r\n        left = (left << 2) | (left >>> 26);\r\n        right = (right << 2) | (right >>> 26);\r\n      } else {\r\n        left = (left << 1) | (left >>> 27);\r\n        right = (right << 1) | (right >>> 27);\r\n      }\r\n      left &= -0xf;\r\n      right &= -0xf;\r\n\r\n      // now apply PC-2, in such a way that E is easier when encrypting or\r\n      // decrypting this conversion will look like PC-2 except only the last 6\r\n      // bits of each byte are used rather than 48 consecutive bits and the\r\n      // order of lines will be according to how the S selection functions will\r\n      // be applied: S2, S4, S6, S8, S1, S3, S5, S7\r\n      var lefttmp = (\r\n        pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf] |\r\n        pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(left >>> 16) & 0xf] |\r\n        pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf] |\r\n        pc2bytes6[(left >>> 4) & 0xf]);\r\n      var righttmp = (\r\n        pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf] |\r\n        pc2bytes9[(right >>> 20) & 0xf] | pc2bytes10[(right >>> 16) & 0xf] |\r\n        pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf] |\r\n        pc2bytes13[(right >>> 4) & 0xf]);\r\n      tmp = ((righttmp >>> 16) ^ lefttmp) & 0x0000ffff;\r\n      keys[n++] = lefttmp ^ tmp;\r\n      keys[n++] = righttmp ^ (tmp << 16);\r\n    }\r\n  }\r\n\r\n  return keys;\r\n}\r\n\r\n/**\r\n * Updates a single block (1 byte) using DES. The update will either\r\n * encrypt or decrypt the block.\r\n *\r\n * @param keys the expanded keys.\r\n * @param input the input block (an array of 32-bit words).\r\n * @param output the updated output block.\r\n * @param decrypt true to decrypt the block, false to encrypt it.\r\n */\r\nfunction _updateBlock(keys, input, output, decrypt) {\r\n  // set up loops for single or triple DES\r\n  var iterations = keys.length === 32 ? 3 : 9;\r\n  var looping;\r\n  if(iterations === 3) {\r\n    looping = decrypt ? [30, -2, -2] : [0, 32, 2];\r\n  } else {\r\n    looping = (decrypt ?\r\n      [94, 62, -2, 32, 64, 2, 30, -2, -2] :\r\n      [0, 32, 2, 62, 30, -2, 64, 96, 2]);\r\n  }\r\n\r\n  var tmp;\r\n\r\n  var left = input[0];\r\n  var right = input[1];\r\n\r\n  // first each 64 bit chunk of the message must be permuted according to IP\r\n  tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\r\n  right ^= tmp;\r\n  left ^= (tmp << 4);\r\n\r\n  tmp = ((left >>> 16) ^ right) & 0x0000ffff;\r\n  right ^= tmp;\r\n  left ^= (tmp << 16);\r\n\r\n  tmp = ((right >>> 2) ^ left) & 0x33333333;\r\n  left ^= tmp;\r\n  right ^= (tmp << 2);\r\n\r\n  tmp = ((right >>> 8) ^ left) & 0x00ff00ff;\r\n  left ^= tmp;\r\n  right ^= (tmp << 8);\r\n\r\n  tmp = ((left >>> 1) ^ right) & 0x55555555;\r\n  right ^= tmp;\r\n  left ^= (tmp << 1);\r\n\r\n  // rotate left 1 bit\r\n  left = ((left << 1) | (left >>> 31));\r\n  right = ((right << 1) | (right >>> 31));\r\n\r\n  for(var j = 0; j < iterations; j += 3) {\r\n    var endloop = looping[j + 1];\r\n    var loopinc = looping[j + 2];\r\n\r\n    // now go through and perform the encryption or decryption\r\n    for(var i = looping[j]; i != endloop; i += loopinc) {\r\n      var right1 = right ^ keys[i];\r\n      var right2 = ((right >>> 4) | (right << 28)) ^ keys[i + 1];\r\n\r\n      // passing these bytes through the S selection functions\r\n      tmp = left;\r\n      left = right;\r\n      right = tmp ^ (\r\n        spfunction2[(right1 >>> 24) & 0x3f] |\r\n        spfunction4[(right1 >>> 16) & 0x3f] |\r\n        spfunction6[(right1 >>>  8) & 0x3f] |\r\n        spfunction8[right1 & 0x3f] |\r\n        spfunction1[(right2 >>> 24) & 0x3f] |\r\n        spfunction3[(right2 >>> 16) & 0x3f] |\r\n        spfunction5[(right2 >>>  8) & 0x3f] |\r\n        spfunction7[right2 & 0x3f]);\r\n    }\r\n    // unreverse left and right\r\n    tmp = left;\r\n    left = right;\r\n    right = tmp;\r\n  }\r\n\r\n  // rotate right 1 bit\r\n  left = ((left >>> 1) | (left << 31));\r\n  right = ((right >>> 1) | (right << 31));\r\n\r\n  // now perform IP-1, which is IP in the opposite direction\r\n  tmp = ((left >>> 1) ^ right) & 0x55555555;\r\n  right ^= tmp;\r\n  left ^= (tmp << 1);\r\n\r\n  tmp = ((right >>> 8) ^ left) & 0x00ff00ff;\r\n  left ^= tmp;\r\n  right ^= (tmp << 8);\r\n\r\n  tmp = ((right >>> 2) ^ left) & 0x33333333;\r\n  left ^= tmp;\r\n  right ^= (tmp << 2);\r\n\r\n  tmp = ((left >>> 16) ^ right) & 0x0000ffff;\r\n  right ^= tmp;\r\n  left ^= (tmp << 16);\r\n\r\n  tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\r\n  right ^= tmp;\r\n  left ^= (tmp << 4);\r\n\r\n  output[0] = left;\r\n  output[1] = right;\r\n}\r\n\r\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * forge.cipher.createCipher('DES-<mode>', key);\r\n * forge.cipher.createDecipher('DES-<mode>', key);\r\n *\r\n * Creates a deprecated DES cipher object. This object's mode will default to\r\n * CBC (cipher-block-chaining).\r\n *\r\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\r\n *\r\n * @param options the options to use.\r\n *          key the symmetric key to use (64 or 192 bits).\r\n *          output the buffer to write to.\r\n *          decrypt true for decryption, false for encryption.\r\n *          mode the cipher mode to use (default: 'CBC').\r\n *\r\n * @return the cipher.\r\n */\r\nfunction _createCipher(options) {\r\n  options = options || {};\r\n  var mode = (options.mode || 'CBC').toUpperCase();\r\n  var algorithm = 'DES-' + mode;\r\n\r\n  var cipher;\r\n  if(options.decrypt) {\r\n    cipher = forge.cipher.createDecipher(algorithm, options.key);\r\n  } else {\r\n    cipher = forge.cipher.createCipher(algorithm, options.key);\r\n  }\r\n\r\n  // backwards compatible start API\r\n  var start = cipher.start;\r\n  cipher.start = function(iv, options) {\r\n    // backwards compatibility: support second arg as output buffer\r\n    var output = null;\r\n    if(options instanceof forge.util.ByteBuffer) {\r\n      output = options;\r\n      options = {};\r\n    }\r\n    options = options || {};\r\n    options.output = output;\r\n    options.iv = iv;\r\n    start.call(cipher, options);\r\n  };\r\n\r\n  return cipher;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC9BA,OAAO,CAAC,UAAU,CAAC;AACnBA,OAAO,CAAC,eAAe,CAAC;AACxBA,OAAO,CAAC,QAAQ,CAAC;;AAEjB;AACAC,MAAM,CAACC,OAAO,GAAGH,KAAK,CAACI,GAAG,GAAGJ,KAAK,CAACI,GAAG,IAAI,CAAC,CAAC;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,KAAK,CAACI,GAAG,CAACC,eAAe,GAAG,UAASC,GAAG,EAAEC,EAAE,EAAEC,MAAM,EAAEC,IAAI,EAAE;EAC1D,IAAIC,MAAM,GAAGC,aAAa,CAAC;IACzBL,GAAG,EAAEA,GAAG;IACRE,MAAM,EAAEA,MAAM;IACdI,OAAO,EAAE,KAAK;IACdH,IAAI,EAAEA,IAAI,KAAKF,EAAE,KAAK,IAAI,GAAG,KAAK,GAAG,KAAK;EAC5C,CAAC,CAAC;EACFG,MAAM,CAACG,KAAK,CAACN,EAAE,CAAC;EAChB,OAAOG,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAV,KAAK,CAACI,GAAG,CAACU,sBAAsB,GAAG,UAASR,GAAG,EAAEG,IAAI,EAAE;EACrD,OAAOE,aAAa,CAAC;IACnBL,GAAG,EAAEA,GAAG;IACRE,MAAM,EAAE,IAAI;IACZI,OAAO,EAAE,KAAK;IACdH,IAAI,EAAEA;EACR,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,KAAK,CAACI,GAAG,CAACW,eAAe,G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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}