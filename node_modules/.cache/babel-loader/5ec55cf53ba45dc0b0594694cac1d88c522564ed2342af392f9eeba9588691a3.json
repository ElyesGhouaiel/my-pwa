{"ast":null,"code":"\"use strict\";\n\n/*!\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.timestampFromJson = timestampFromJson;\nexports.detectValueType = detectValueType;\nexports.detectGoogleProtobufValueType = detectGoogleProtobufValueType;\nexports.valueFromJson = valueFromJson;\nexports.fieldsFromJson = fieldsFromJson;\nconst validate_1 = require(\"./validate\");\nconst map_type_1 = require(\"./map-type\");\n/*!\r\n * @module firestore/convert\r\n * @private\r\n * @internal\r\n *\r\n * This module contains utility functions to convert\r\n * `firestore.v1.Documents` from Proto3 JSON to their equivalent\r\n * representation in Protobuf JS. Protobuf JS is the only encoding supported by\r\n * this client, and dependencies that use Proto3 JSON (such as the Google Cloud\r\n * Functions SDK) are supported through this conversion and its usage in\r\n * {@see Firestore#snapshot_}.\r\n */\n/**\r\n * Converts an ISO 8601 or google.protobuf.Timestamp proto into Protobuf JS.\r\n *\r\n * @private\r\n * @internal\r\n * @param timestampValue The value to convert.\r\n * @param argumentName The argument name to use in the error message if the\r\n * conversion fails. If omitted, 'timestampValue' is used.\r\n * @return The value as expected by Protobuf JS or undefined if no input was\r\n * provided.\r\n */\nfunction timestampFromJson(timestampValue, argumentName) {\n  let timestampProto = {};\n  if (typeof timestampValue === 'string') {\n    const date = new Date(timestampValue);\n    const seconds = Math.floor(date.getTime() / 1000);\n    let nanos = 0;\n    if (timestampValue.length > 20) {\n      const nanoString = timestampValue.substring(20, timestampValue.length - 1);\n      const trailingZeroes = 9 - nanoString.length;\n      nanos = Number(nanoString) * Math.pow(10, trailingZeroes);\n    }\n    if (isNaN(seconds) || isNaN(nanos)) {\n      argumentName = argumentName || 'timestampValue';\n      throw new Error(`Specify a valid ISO 8601 timestamp for \"${argumentName}\".`);\n    }\n    timestampProto = {\n      seconds: seconds || undefined,\n      nanos: nanos || undefined\n    };\n  } else if (timestampValue !== undefined) {\n    (0, validate_1.validateObject)('timestampValue', timestampValue);\n    timestampProto = {\n      seconds: timestampValue.seconds || undefined,\n      nanos: timestampValue.nanos || undefined\n    };\n  }\n  return timestampProto;\n}\n/**\r\n * Converts a Proto3 JSON 'bytesValue' field into Protobuf JS.\r\n *\r\n * @private\r\n * @internal\r\n * @param bytesValue The value to convert.\r\n * @return The value as expected by Protobuf JS.\r\n */\nfunction bytesFromJson(bytesValue) {\n  if (typeof bytesValue === 'string') {\n    return Buffer.from(bytesValue, 'base64');\n  } else {\n    return bytesValue;\n  }\n}\n/**\r\n * Detects 'valueType' from a Proto3 JSON `firestore.v1.Value` proto.\r\n *\r\n * @private\r\n * @internal\r\n * @param proto The `firestore.v1.Value` proto.\r\n * @return The string value for 'valueType'.\r\n */\nfunction detectValueType(proto) {\n  var _a;\n  let valueType;\n  if (proto.valueType) {\n    valueType = proto.valueType;\n  } else {\n    const detectedValues = [];\n    if (proto.stringValue !== undefined) {\n      detectedValues.push('stringValue');\n    }\n    if (proto.booleanValue !== undefined) {\n      detectedValues.push('booleanValue');\n    }\n    if (proto.integerValue !== undefined) {\n      detectedValues.push('integerValue');\n    }\n    if (proto.doubleValue !== undefined) {\n      detectedValues.push('doubleValue');\n    }\n    if (proto.timestampValue !== undefined) {\n      detectedValues.push('timestampValue');\n    }\n    if (proto.referenceValue !== undefined) {\n      detectedValues.push('referenceValue');\n    }\n    if (proto.arrayValue !== undefined) {\n      detectedValues.push('arrayValue');\n    }\n    if (proto.nullValue !== undefined) {\n      detectedValues.push('nullValue');\n    }\n    if (proto.mapValue !== undefined) {\n      detectedValues.push('mapValue');\n    }\n    if (proto.geoPointValue !== undefined) {\n      detectedValues.push('geoPointValue');\n    }\n    if (proto.bytesValue !== undefined) {\n      detectedValues.push('bytesValue');\n    }\n    if (detectedValues.length !== 1) {\n      throw new Error(`Unable to infer type value from '${JSON.stringify(proto)}'.`);\n    }\n    valueType = detectedValues[0];\n  }\n  // Special handling of mapValues used to represent other data types\n  if (valueType === 'mapValue') {\n    const fields = (_a = proto.mapValue) === null || _a === void 0 ? void 0 : _a.fields;\n    if (fields) {\n      const props = Object.keys(fields);\n      if (props.indexOf(map_type_1.RESERVED_MAP_KEY) !== -1 && detectValueType(fields[map_type_1.RESERVED_MAP_KEY]) === 'stringValue' && fields[map_type_1.RESERVED_MAP_KEY].stringValue === map_type_1.RESERVED_MAP_KEY_VECTOR_VALUE) {\n        valueType = 'vectorValue';\n      }\n    }\n  }\n  return valueType;\n}\n/**\r\n * Detects the value kind from a Proto3 JSON `google.protobuf.Value` proto.\r\n *\r\n * @private\r\n * @internal\r\n * @param proto The `firestore.v1.Value` proto.\r\n * @return The string value for 'valueType'.\r\n */\nfunction detectGoogleProtobufValueType(proto) {\n  const detectedValues = [];\n  if (proto.nullValue !== undefined) {\n    detectedValues.push('nullValue');\n  }\n  if (proto.numberValue !== undefined) {\n    detectedValues.push('numberValue');\n  }\n  if (proto.stringValue !== undefined) {\n    detectedValues.push('stringValue');\n  }\n  if (proto.boolValue !== undefined) {\n    detectedValues.push('boolValue');\n  }\n  if (proto.structValue !== undefined) {\n    detectedValues.push('structValue');\n  }\n  if (proto.listValue !== undefined) {\n    detectedValues.push('listValue');\n  }\n  if (detectedValues.length !== 1) {\n    throw new Error(`Unable to infer type value from '${JSON.stringify(proto)}'.`);\n  }\n  return detectedValues[0];\n}\n/**\r\n * Converts a `firestore.v1.Value` in Proto3 JSON encoding into the\r\n * Protobuf JS format expected by this client.\r\n *\r\n * @private\r\n * @internal\r\n * @param fieldValue The `firestore.v1.Value` in Proto3 JSON format.\r\n * @return The `firestore.v1.Value` in Protobuf JS format.\r\n */\nfunction valueFromJson(fieldValue) {\n  const valueType = detectValueType(fieldValue);\n  switch (valueType) {\n    case 'timestampValue':\n      return {\n        timestampValue: timestampFromJson(fieldValue.timestampValue)\n      };\n    case 'bytesValue':\n      return {\n        bytesValue: bytesFromJson(fieldValue.bytesValue)\n      };\n    case 'doubleValue':\n      return {\n        doubleValue: Number(fieldValue.doubleValue)\n      };\n    case 'arrayValue':\n      {\n        const arrayValue = [];\n        if (Array.isArray(fieldValue.arrayValue.values)) {\n          for (const value of fieldValue.arrayValue.values) {\n            arrayValue.push(valueFromJson(value));\n          }\n        }\n        return {\n          arrayValue: {\n            values: arrayValue\n          }\n        };\n      }\n    case 'mapValue':\n    case 'vectorValue':\n      {\n        const mapValue = {};\n        const fields = fieldValue.mapValue.fields;\n        if (fields) {\n          for (const prop of Object.keys(fields)) {\n            mapValue[prop] = valueFromJson(fieldValue.mapValue.fields[prop]);\n          }\n        }\n        return {\n          mapValue: {\n            fields: mapValue\n          }\n        };\n      }\n    default:\n      return fieldValue;\n  }\n}\n/**\r\n * Converts a map of IValues in Proto3 JSON encoding into the Protobuf JS format\r\n * expected by this client. This conversion creates a copy of the underlying\r\n * fields.\r\n *\r\n * @private\r\n * @internal\r\n * @param document An object with IValues in Proto3 JSON format.\r\n * @return The object in Protobuf JS format.\r\n */\nfunction fieldsFromJson(document) {\n  const result = {};\n  for (const prop of Object.keys(document)) {\n    result[prop] = valueFromJson(document[prop]);\n  }\n  return result;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","timestampFromJson","detectValueType","detectGoogleProtobufValueType","valueFromJson","fieldsFromJson","validate_1","require","map_type_1","timestampValue","argumentName","timestampProto","date","Date","seconds","Math","floor","getTime","nanos","length","nanoString","substring","trailingZeroes","Number","pow","isNaN","Error","undefined","validateObject","bytesFromJson","bytesValue","Buffer","from","proto","_a","valueType","detectedValues","stringValue","push","booleanValue","integerValue","doubleValue","referenceValue","arrayValue","nullValue","mapValue","geoPointValue","JSON","stringify","fields","props","keys","indexOf","RESERVED_MAP_KEY","RESERVED_MAP_KEY_VECTOR_VALUE","numberValue","boolValue","structValue","listValue","fieldValue","Array","isArray","values","prop","document","result"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/@google-cloud/firestore/build/src/convert.js"],"sourcesContent":["\"use strict\";\r\n/*!\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.timestampFromJson = timestampFromJson;\r\nexports.detectValueType = detectValueType;\r\nexports.detectGoogleProtobufValueType = detectGoogleProtobufValueType;\r\nexports.valueFromJson = valueFromJson;\r\nexports.fieldsFromJson = fieldsFromJson;\r\nconst validate_1 = require(\"./validate\");\r\nconst map_type_1 = require(\"./map-type\");\r\n/*!\r\n * @module firestore/convert\r\n * @private\r\n * @internal\r\n *\r\n * This module contains utility functions to convert\r\n * `firestore.v1.Documents` from Proto3 JSON to their equivalent\r\n * representation in Protobuf JS. Protobuf JS is the only encoding supported by\r\n * this client, and dependencies that use Proto3 JSON (such as the Google Cloud\r\n * Functions SDK) are supported through this conversion and its usage in\r\n * {@see Firestore#snapshot_}.\r\n */\r\n/**\r\n * Converts an ISO 8601 or google.protobuf.Timestamp proto into Protobuf JS.\r\n *\r\n * @private\r\n * @internal\r\n * @param timestampValue The value to convert.\r\n * @param argumentName The argument name to use in the error message if the\r\n * conversion fails. If omitted, 'timestampValue' is used.\r\n * @return The value as expected by Protobuf JS or undefined if no input was\r\n * provided.\r\n */\r\nfunction timestampFromJson(timestampValue, argumentName) {\r\n    let timestampProto = {};\r\n    if (typeof timestampValue === 'string') {\r\n        const date = new Date(timestampValue);\r\n        const seconds = Math.floor(date.getTime() / 1000);\r\n        let nanos = 0;\r\n        if (timestampValue.length > 20) {\r\n            const nanoString = timestampValue.substring(20, timestampValue.length - 1);\r\n            const trailingZeroes = 9 - nanoString.length;\r\n            nanos = Number(nanoString) * Math.pow(10, trailingZeroes);\r\n        }\r\n        if (isNaN(seconds) || isNaN(nanos)) {\r\n            argumentName = argumentName || 'timestampValue';\r\n            throw new Error(`Specify a valid ISO 8601 timestamp for \"${argumentName}\".`);\r\n        }\r\n        timestampProto = {\r\n            seconds: seconds || undefined,\r\n            nanos: nanos || undefined,\r\n        };\r\n    }\r\n    else if (timestampValue !== undefined) {\r\n        (0, validate_1.validateObject)('timestampValue', timestampValue);\r\n        timestampProto = {\r\n            seconds: timestampValue.seconds || undefined,\r\n            nanos: timestampValue.nanos || undefined,\r\n        };\r\n    }\r\n    return timestampProto;\r\n}\r\n/**\r\n * Converts a Proto3 JSON 'bytesValue' field into Protobuf JS.\r\n *\r\n * @private\r\n * @internal\r\n * @param bytesValue The value to convert.\r\n * @return The value as expected by Protobuf JS.\r\n */\r\nfunction bytesFromJson(bytesValue) {\r\n    if (typeof bytesValue === 'string') {\r\n        return Buffer.from(bytesValue, 'base64');\r\n    }\r\n    else {\r\n        return bytesValue;\r\n    }\r\n}\r\n/**\r\n * Detects 'valueType' from a Proto3 JSON `firestore.v1.Value` proto.\r\n *\r\n * @private\r\n * @internal\r\n * @param proto The `firestore.v1.Value` proto.\r\n * @return The string value for 'valueType'.\r\n */\r\nfunction detectValueType(proto) {\r\n    var _a;\r\n    let valueType;\r\n    if (proto.valueType) {\r\n        valueType = proto.valueType;\r\n    }\r\n    else {\r\n        const detectedValues = [];\r\n        if (proto.stringValue !== undefined) {\r\n            detectedValues.push('stringValue');\r\n        }\r\n        if (proto.booleanValue !== undefined) {\r\n            detectedValues.push('booleanValue');\r\n        }\r\n        if (proto.integerValue !== undefined) {\r\n            detectedValues.push('integerValue');\r\n        }\r\n        if (proto.doubleValue !== undefined) {\r\n            detectedValues.push('doubleValue');\r\n        }\r\n        if (proto.timestampValue !== undefined) {\r\n            detectedValues.push('timestampValue');\r\n        }\r\n        if (proto.referenceValue !== undefined) {\r\n            detectedValues.push('referenceValue');\r\n        }\r\n        if (proto.arrayValue !== undefined) {\r\n            detectedValues.push('arrayValue');\r\n        }\r\n        if (proto.nullValue !== undefined) {\r\n            detectedValues.push('nullValue');\r\n        }\r\n        if (proto.mapValue !== undefined) {\r\n            detectedValues.push('mapValue');\r\n        }\r\n        if (proto.geoPointValue !== undefined) {\r\n            detectedValues.push('geoPointValue');\r\n        }\r\n        if (proto.bytesValue !== undefined) {\r\n            detectedValues.push('bytesValue');\r\n        }\r\n        if (detectedValues.length !== 1) {\r\n            throw new Error(`Unable to infer type value from '${JSON.stringify(proto)}'.`);\r\n        }\r\n        valueType = detectedValues[0];\r\n    }\r\n    // Special handling of mapValues used to represent other data types\r\n    if (valueType === 'mapValue') {\r\n        const fields = (_a = proto.mapValue) === null || _a === void 0 ? void 0 : _a.fields;\r\n        if (fields) {\r\n            const props = Object.keys(fields);\r\n            if (props.indexOf(map_type_1.RESERVED_MAP_KEY) !== -1 &&\r\n                detectValueType(fields[map_type_1.RESERVED_MAP_KEY]) === 'stringValue' &&\r\n                fields[map_type_1.RESERVED_MAP_KEY].stringValue === map_type_1.RESERVED_MAP_KEY_VECTOR_VALUE) {\r\n                valueType = 'vectorValue';\r\n            }\r\n        }\r\n    }\r\n    return valueType;\r\n}\r\n/**\r\n * Detects the value kind from a Proto3 JSON `google.protobuf.Value` proto.\r\n *\r\n * @private\r\n * @internal\r\n * @param proto The `firestore.v1.Value` proto.\r\n * @return The string value for 'valueType'.\r\n */\r\nfunction detectGoogleProtobufValueType(proto) {\r\n    const detectedValues = [];\r\n    if (proto.nullValue !== undefined) {\r\n        detectedValues.push('nullValue');\r\n    }\r\n    if (proto.numberValue !== undefined) {\r\n        detectedValues.push('numberValue');\r\n    }\r\n    if (proto.stringValue !== undefined) {\r\n        detectedValues.push('stringValue');\r\n    }\r\n    if (proto.boolValue !== undefined) {\r\n        detectedValues.push('boolValue');\r\n    }\r\n    if (proto.structValue !== undefined) {\r\n        detectedValues.push('structValue');\r\n    }\r\n    if (proto.listValue !== undefined) {\r\n        detectedValues.push('listValue');\r\n    }\r\n    if (detectedValues.length !== 1) {\r\n        throw new Error(`Unable to infer type value from '${JSON.stringify(proto)}'.`);\r\n    }\r\n    return detectedValues[0];\r\n}\r\n/**\r\n * Converts a `firestore.v1.Value` in Proto3 JSON encoding into the\r\n * Protobuf JS format expected by this client.\r\n *\r\n * @private\r\n * @internal\r\n * @param fieldValue The `firestore.v1.Value` in Proto3 JSON format.\r\n * @return The `firestore.v1.Value` in Protobuf JS format.\r\n */\r\nfunction valueFromJson(fieldValue) {\r\n    const valueType = detectValueType(fieldValue);\r\n    switch (valueType) {\r\n        case 'timestampValue':\r\n            return {\r\n                timestampValue: timestampFromJson(fieldValue.timestampValue),\r\n            };\r\n        case 'bytesValue':\r\n            return {\r\n                bytesValue: bytesFromJson(fieldValue.bytesValue),\r\n            };\r\n        case 'doubleValue':\r\n            return {\r\n                doubleValue: Number(fieldValue.doubleValue),\r\n            };\r\n        case 'arrayValue': {\r\n            const arrayValue = [];\r\n            if (Array.isArray(fieldValue.arrayValue.values)) {\r\n                for (const value of fieldValue.arrayValue.values) {\r\n                    arrayValue.push(valueFromJson(value));\r\n                }\r\n            }\r\n            return {\r\n                arrayValue: {\r\n                    values: arrayValue,\r\n                },\r\n            };\r\n        }\r\n        case 'mapValue':\r\n        case 'vectorValue': {\r\n            const mapValue = {};\r\n            const fields = fieldValue.mapValue.fields;\r\n            if (fields) {\r\n                for (const prop of Object.keys(fields)) {\r\n                    mapValue[prop] = valueFromJson(fieldValue.mapValue.fields[prop]);\r\n                }\r\n            }\r\n            return {\r\n                mapValue: {\r\n                    fields: mapValue,\r\n                },\r\n            };\r\n        }\r\n        default:\r\n            return fieldValue;\r\n    }\r\n}\r\n/**\r\n * Converts a map of IValues in Proto3 JSON encoding into the Protobuf JS format\r\n * expected by this client. This conversion creates a copy of the underlying\r\n * fields.\r\n *\r\n * @private\r\n * @internal\r\n * @param document An object with IValues in Proto3 JSON format.\r\n * @return The object in Protobuf JS format.\r\n */\r\nfunction fieldsFromJson(document) {\r\n    const result = {};\r\n    for (const prop of Object.keys(document)) {\r\n        result[prop] = valueFromJson(document[prop]);\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=convert.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}