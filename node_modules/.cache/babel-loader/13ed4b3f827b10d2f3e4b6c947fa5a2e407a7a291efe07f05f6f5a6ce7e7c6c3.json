{"ast":null,"code":"\"use strict\";\n\n/**\r\n * Copyright 2024 Google LLC. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VectorQuerySnapshot = void 0;\nconst validate_1 = require(\"../validate\");\nconst util_1 = require(\"../util\");\n/**\r\n * A `VectorQuerySnapshot` contains zero or more `QueryDocumentSnapshot` objects\r\n * representing the results of a query. The documents can be accessed as an\r\n * array via the `docs` property or enumerated using the `forEach` method. The\r\n * number of documents can be determined via the `empty` and `size`\r\n * properties.\r\n */\nclass VectorQuerySnapshot {\n  /**\r\n   * @private\r\n   * @internal\r\n   *\r\n   * @param _query - The originating query.\r\n   * @param _readTime - The time when this query snapshot was obtained.\r\n   * @param _size - The number of documents in the result set.\r\n   * @param docs - A callback returning a sorted array of documents matching\r\n   * this query\r\n   * @param changes - A callback returning a sorted array of document change\r\n   * events for this snapshot.\r\n   */\n  constructor(_query, _readTime, _size, docs, changes) {\n    this._query = _query;\n    this._readTime = _readTime;\n    this._size = _size;\n    this._materializedDocs = null;\n    this._materializedChanges = null;\n    this._docs = null;\n    this._changes = null;\n    this._docs = docs;\n    this._changes = changes;\n  }\n  /**\r\n   * The `VectorQuery` on which you called get() in order to get this\r\n   * `VectorQuerySnapshot`.\r\n   *\r\n   * @readonly\r\n   *\r\n   * @example\r\n   * ```\r\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\r\n   *\r\n   * query.findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"})\r\n   *   .get().then(querySnapshot => {\r\n   *     console.log(`Returned first batch of results`);\r\n   *     let query = querySnapshot.query;\r\n   *     return query.offset(10).get();\r\n   *   }).then(() => {\r\n   *   console.log(`Returned second batch of results`);\r\n   *   });\r\n   * ```\r\n   */\n  get query() {\n    return this._query;\n  }\n  /**\r\n   * An array of all the documents in this `VectorQuerySnapshot`.\r\n   *\r\n   * @readonly\r\n   *\r\n   * @example\r\n   * ```\r\n   * let query = firestore.collection('col')\r\n   *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\r\n   *\r\n   * query.get().then(querySnapshot => {\r\n   *   let docs = querySnapshot.docs;\r\n   *   for (let doc of docs) {\r\n   *     console.log(`Document found at path: ${doc.ref.path}`);\r\n   *   }\r\n   * });\r\n   * ```\r\n   */\n  get docs() {\n    if (this._materializedDocs) {\n      return this._materializedDocs;\n    }\n    this._materializedDocs = this._docs();\n    this._docs = null;\n    return this._materializedDocs;\n  }\n  /**\r\n   * `true` if there are no documents in the `VectorQuerySnapshot`.\r\n   *\r\n   * @readonly\r\n   *\r\n   * @example\r\n   * ```\r\n   * let query = firestore.collection('col')\r\n   *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\r\n   *\r\n   * query.get().then(querySnapshot => {\r\n   *   if (querySnapshot.empty) {\r\n   *     console.log('No documents found.');\r\n   *   }\r\n   * });\r\n   * ```\r\n   */\n  get empty() {\n    return this._size === 0;\n  }\n  /**\r\n   * The number of documents in the `VectorQuerySnapshot`.\r\n   *\r\n   * @readonly\r\n   *\r\n   * @example\r\n   * ```\r\n   * let query = firestore.collection('col')\r\n   *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\r\n   *\r\n   * query.get().then(querySnapshot => {\r\n   *   console.log(`Found ${querySnapshot.size} documents.`);\r\n   * });\r\n   * ```\r\n   */\n  get size() {\n    return this._size;\n  }\n  /**\r\n   * The time this `VectorQuerySnapshot` was obtained.\r\n   *\r\n   * @example\r\n   * ```\r\n   * let query = firestore.collection('col')\r\n   *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\r\n   *\r\n   * query.get().then((querySnapshot) => {\r\n   *   let readTime = querySnapshot.readTime;\r\n   *   console.log(`Query results returned at '${readTime.toDate()}'`);\r\n   * });\r\n   * ```\r\n   */\n  get readTime() {\n    return this._readTime;\n  }\n  /**\r\n   * Returns an array of the documents changes since the last snapshot. If\r\n   * this is the first snapshot, all documents will be in the list as added\r\n   * changes.\r\n   *\r\n   * @returns An array of the documents changes since the last snapshot.\r\n   *\r\n   * @example\r\n   * ```\r\n   * let query = firestore.collection('col')\r\n   *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\r\n   *\r\n   * query.get().then(querySnapshot => {\r\n   *   let changes = querySnapshot.docChanges();\r\n   *   for (let change of changes) {\r\n   *     console.log(`A document was ${change.type}.`);\r\n   *   }\r\n   * });\r\n   * ```\r\n   */\n  docChanges() {\n    if (this._materializedChanges) {\n      return this._materializedChanges;\n    }\n    this._materializedChanges = this._changes();\n    this._changes = null;\n    return this._materializedChanges;\n  }\n  /**\r\n   * Enumerates all of the documents in the `VectorQuerySnapshot`. This is a convenience\r\n   * method for running the same callback on each {@link QueryDocumentSnapshot}\r\n   * that is returned.\r\n   *\r\n   * @param callback - A callback to be called with a\r\n   * {@link QueryDocumentSnapshot} for each document in\r\n   * the snapshot.\r\n   * @param thisArg - The `this` binding for the callback..\r\n   *\r\n   * @example\r\n   * ```\r\n   * let query = firestore.collection('col')\r\n   *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\r\n   *\r\n   * query.get().then(querySnapshot => {\r\n   *   querySnapshot.forEach(documentSnapshot => {\r\n   *     console.log(`Document found at path: ${documentSnapshot.ref.path}`);\r\n   *   });\r\n   * });\r\n   * ```\r\n   */\n  forEach(callback, thisArg) {\n    (0, validate_1.validateFunction)('callback', callback);\n    for (const doc of this.docs) {\n      callback.call(thisArg, doc);\n    }\n  }\n  /**\r\n   * Returns true if the document data in this `VectorQuerySnapshot` is equal to the\r\n   * provided value.\r\n   *\r\n   * @param other - The value to compare against.\r\n   * @returns true if this `VectorQuerySnapshot` is equal to the provided\r\n   * value.\r\n   */\n  isEqual(other) {\n    // Since the read time is different on every query read, we explicitly\n    // ignore all metadata in this comparison.\n    if (this === other) {\n      return true;\n    }\n    if (!(other instanceof VectorQuerySnapshot)) {\n      return false;\n    }\n    if (this._size !== other._size) {\n      return false;\n    }\n    if (!this._query.isEqual(other._query)) {\n      return false;\n    }\n    if (this._materializedDocs && !this._materializedChanges) {\n      // If we have only materialized the documents, we compare them first.\n      return (0, util_1.isArrayEqual)(this.docs, other.docs) && (0, util_1.isArrayEqual)(this.docChanges(), other.docChanges());\n    }\n    // Otherwise, we compare the changes first as we expect there to be fewer.\n    return (0, util_1.isArrayEqual)(this.docChanges(), other.docChanges()) && (0, util_1.isArrayEqual)(this.docs, other.docs);\n  }\n}\nexports.VectorQuerySnapshot = VectorQuerySnapshot;","map":{"version":3,"names":["Object","defineProperty","exports","value","VectorQuerySnapshot","validate_1","require","util_1","constructor","_query","_readTime","_size","docs","changes","_materializedDocs","_materializedChanges","_docs","_changes","query","empty","size","readTime","docChanges","forEach","callback","thisArg","validateFunction","doc","call","isEqual","other","isArrayEqual"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/@google-cloud/firestore/build/src/reference/vector-query-snapshot.js"],"sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright 2024 Google LLC. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.VectorQuerySnapshot = void 0;\r\nconst validate_1 = require(\"../validate\");\r\nconst util_1 = require(\"../util\");\r\n/**\r\n * A `VectorQuerySnapshot` contains zero or more `QueryDocumentSnapshot` objects\r\n * representing the results of a query. The documents can be accessed as an\r\n * array via the `docs` property or enumerated using the `forEach` method. The\r\n * number of documents can be determined via the `empty` and `size`\r\n * properties.\r\n */\r\nclass VectorQuerySnapshot {\r\n    /**\r\n     * @private\r\n     * @internal\r\n     *\r\n     * @param _query - The originating query.\r\n     * @param _readTime - The time when this query snapshot was obtained.\r\n     * @param _size - The number of documents in the result set.\r\n     * @param docs - A callback returning a sorted array of documents matching\r\n     * this query\r\n     * @param changes - A callback returning a sorted array of document change\r\n     * events for this snapshot.\r\n     */\r\n    constructor(_query, _readTime, _size, docs, changes) {\r\n        this._query = _query;\r\n        this._readTime = _readTime;\r\n        this._size = _size;\r\n        this._materializedDocs = null;\r\n        this._materializedChanges = null;\r\n        this._docs = null;\r\n        this._changes = null;\r\n        this._docs = docs;\r\n        this._changes = changes;\r\n    }\r\n    /**\r\n     * The `VectorQuery` on which you called get() in order to get this\r\n     * `VectorQuerySnapshot`.\r\n     *\r\n     * @readonly\r\n     *\r\n     * @example\r\n     * ```\r\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\r\n     *\r\n     * query.findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"})\r\n     *   .get().then(querySnapshot => {\r\n     *     console.log(`Returned first batch of results`);\r\n     *     let query = querySnapshot.query;\r\n     *     return query.offset(10).get();\r\n     *   }).then(() => {\r\n     *   console.log(`Returned second batch of results`);\r\n     *   });\r\n     * ```\r\n     */\r\n    get query() {\r\n        return this._query;\r\n    }\r\n    /**\r\n     * An array of all the documents in this `VectorQuerySnapshot`.\r\n     *\r\n     * @readonly\r\n     *\r\n     * @example\r\n     * ```\r\n     * let query = firestore.collection('col')\r\n     *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\r\n     *\r\n     * query.get().then(querySnapshot => {\r\n     *   let docs = querySnapshot.docs;\r\n     *   for (let doc of docs) {\r\n     *     console.log(`Document found at path: ${doc.ref.path}`);\r\n     *   }\r\n     * });\r\n     * ```\r\n     */\r\n    get docs() {\r\n        if (this._materializedDocs) {\r\n            return this._materializedDocs;\r\n        }\r\n        this._materializedDocs = this._docs();\r\n        this._docs = null;\r\n        return this._materializedDocs;\r\n    }\r\n    /**\r\n     * `true` if there are no documents in the `VectorQuerySnapshot`.\r\n     *\r\n     * @readonly\r\n     *\r\n     * @example\r\n     * ```\r\n     * let query = firestore.collection('col')\r\n     *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\r\n     *\r\n     * query.get().then(querySnapshot => {\r\n     *   if (querySnapshot.empty) {\r\n     *     console.log('No documents found.');\r\n     *   }\r\n     * });\r\n     * ```\r\n     */\r\n    get empty() {\r\n        return this._size === 0;\r\n    }\r\n    /**\r\n     * The number of documents in the `VectorQuerySnapshot`.\r\n     *\r\n     * @readonly\r\n     *\r\n     * @example\r\n     * ```\r\n     * let query = firestore.collection('col')\r\n     *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\r\n     *\r\n     * query.get().then(querySnapshot => {\r\n     *   console.log(`Found ${querySnapshot.size} documents.`);\r\n     * });\r\n     * ```\r\n     */\r\n    get size() {\r\n        return this._size;\r\n    }\r\n    /**\r\n     * The time this `VectorQuerySnapshot` was obtained.\r\n     *\r\n     * @example\r\n     * ```\r\n     * let query = firestore.collection('col')\r\n     *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\r\n     *\r\n     * query.get().then((querySnapshot) => {\r\n     *   let readTime = querySnapshot.readTime;\r\n     *   console.log(`Query results returned at '${readTime.toDate()}'`);\r\n     * });\r\n     * ```\r\n     */\r\n    get readTime() {\r\n        return this._readTime;\r\n    }\r\n    /**\r\n     * Returns an array of the documents changes since the last snapshot. If\r\n     * this is the first snapshot, all documents will be in the list as added\r\n     * changes.\r\n     *\r\n     * @returns An array of the documents changes since the last snapshot.\r\n     *\r\n     * @example\r\n     * ```\r\n     * let query = firestore.collection('col')\r\n     *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\r\n     *\r\n     * query.get().then(querySnapshot => {\r\n     *   let changes = querySnapshot.docChanges();\r\n     *   for (let change of changes) {\r\n     *     console.log(`A document was ${change.type}.`);\r\n     *   }\r\n     * });\r\n     * ```\r\n     */\r\n    docChanges() {\r\n        if (this._materializedChanges) {\r\n            return this._materializedChanges;\r\n        }\r\n        this._materializedChanges = this._changes();\r\n        this._changes = null;\r\n        return this._materializedChanges;\r\n    }\r\n    /**\r\n     * Enumerates all of the documents in the `VectorQuerySnapshot`. This is a convenience\r\n     * method for running the same callback on each {@link QueryDocumentSnapshot}\r\n     * that is returned.\r\n     *\r\n     * @param callback - A callback to be called with a\r\n     * {@link QueryDocumentSnapshot} for each document in\r\n     * the snapshot.\r\n     * @param thisArg - The `this` binding for the callback..\r\n     *\r\n     * @example\r\n     * ```\r\n     * let query = firestore.collection('col')\r\n     *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\r\n     *\r\n     * query.get().then(querySnapshot => {\r\n     *   querySnapshot.forEach(documentSnapshot => {\r\n     *     console.log(`Document found at path: ${documentSnapshot.ref.path}`);\r\n     *   });\r\n     * });\r\n     * ```\r\n     */\r\n    forEach(callback, thisArg) {\r\n        (0, validate_1.validateFunction)('callback', callback);\r\n        for (const doc of this.docs) {\r\n            callback.call(thisArg, doc);\r\n        }\r\n    }\r\n    /**\r\n     * Returns true if the document data in this `VectorQuerySnapshot` is equal to the\r\n     * provided value.\r\n     *\r\n     * @param other - The value to compare against.\r\n     * @returns true if this `VectorQuerySnapshot` is equal to the provided\r\n     * value.\r\n     */\r\n    isEqual(other) {\r\n        // Since the read time is different on every query read, we explicitly\r\n        // ignore all metadata in this comparison.\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        if (!(other instanceof VectorQuerySnapshot)) {\r\n            return false;\r\n        }\r\n        if (this._size !== other._size) {\r\n            return false;\r\n        }\r\n        if (!this._query.isEqual(other._query)) {\r\n            return false;\r\n        }\r\n        if (this._materializedDocs && !this._materializedChanges) {\r\n            // If we have only materialized the documents, we compare them first.\r\n            return ((0, util_1.isArrayEqual)(this.docs, other.docs) &&\r\n                (0, util_1.isArrayEqual)(this.docChanges(), other.docChanges()));\r\n        }\r\n        // Otherwise, we compare the changes first as we expect there to be fewer.\r\n        return ((0, util_1.isArrayEqual)(this.docChanges(), other.docChanges()) &&\r\n            (0, util_1.isArrayEqual)(this.docs, other.docs));\r\n    }\r\n}\r\nexports.VectorQuerySnapshot = VectorQuerySnapshot;\r\n//# sourceMappingURL=vector-query-snapshot.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,mBAAmB,GAAG,KAAK,CAAC;AACpC,MAAMC,UAAU,GAAGC,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMC,MAAM,GAAGD,OAAO,CAAC,SAAS,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,mBAAmB,CAAC;EACtB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACII,WAAWA,CAACC,MAAM,EAAEC,SAAS,EAAEC,KAAK,EAAEC,IAAI,EAAEC,OAAO,EAAE;IACjD,IAAI,CAACJ,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACG,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,oBAAoB,GAAG,IAAI;IAChC,IAAI,CAACC,KAAK,GAAG,IAAI;IACjB,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACD,KAAK,GAAGJ,IAAI;IACjB,IAAI,CAACK,QAAQ,GAAGJ,OAAO;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIK,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAACT,MAAM;EACtB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIG,IAAIA,CAAA,EAAG;IACP,IAAI,IAAI,CAACE,iBAAiB,EAAE;MACxB,OAAO,IAAI,CAACA,iBAAiB;IACjC;IACA,IAAI,CAACA,iBAAiB,GAAG,IAAI,CAACE,KAAK,CAAC,CAAC;IACrC,IAAI,CAACA,KAAK,GAAG,IAAI;IACjB,OAAO,IAAI,CAACF,iBAAiB;EACjC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIK,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAACR,KAAK,KAAK,CAAC;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIS,IAAIA,CAAA,EAAG;IACP,OAAO,IAAI,CAACT,KAAK;EACrB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIU,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACX,SAAS;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIY,UAAUA,CAAA,EAAG;IACT,IAAI,IAAI,CAACP,oBAAoB,EAAE;MAC3B,OAAO,IAAI,CAACA,oBAAoB;IACpC;IACA,IAAI,CAACA,oBAAoB,GAAG,IAAI,CAACE,QAAQ,CAAC,CAAC;IAC3C,IAAI,CAACA,QAAQ,GAAG,IAAI;IACpB,OAAO,IAAI,CAACF,oBAAoB;EACpC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIQ,OAAOA,CAACC,QAAQ,EAAEC,OAAO,EAAE;IACvB,CAAC,CAAC,EAAEpB,UAAU,CAACqB,gBAAgB,EAAE,UAAU,EAAEF,QAAQ,CAAC;IACtD,KAAK,MAAMG,GAAG,IAAI,IAAI,CAACf,IAAI,EAAE;MACzBY,QAAQ,CAACI,IAAI,CAACH,OAAO,EAAEE,GAAG,CAAC;IAC/B;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,OAAOA,CAACC,KAAK,EAAE;IACX;IACA;IACA,IAAI,IAAI,KAAKA,KAAK,EAAE;MAChB,OAAO,IAAI;IACf;IACA,IAAI,EAAEA,KAAK,YAAY1B,mBAAmB,CAAC,EAAE;MACzC,OAAO,KAAK;IAChB;IACA,IAAI,IAAI,CAACO,KAAK,KAAKmB,KAAK,CAACnB,KAAK,EAAE;MAC5B,OAAO,KAAK;IAChB;IACA,IAAI,CAAC,IAAI,CAACF,MAAM,CAACoB,OAAO,CAACC,KAAK,CAACrB,MAAM,CAAC,EAAE;MACpC,OAAO,KAAK;IAChB;IACA,IAAI,IAAI,CAACK,iBAAiB,IAAI,CAAC,IAAI,CAACC,oBAAoB,EAAE;MACtD;MACA,OAAQ,CAAC,CAAC,EAAER,MAAM,CAACwB,YAAY,EAAE,IAAI,CAACnB,IAAI,EAAEkB,KAAK,CAAClB,IAAI,CAAC,IACnD,CAAC,CAAC,EAAEL,MAAM,CAACwB,YAAY,EAAE,IAAI,CAACT,UAAU,CAAC,CAAC,EAAEQ,KAAK,CAACR,UAAU,CAAC,CAAC,CAAC;IACvE;IACA;IACA,OAAQ,CAAC,CAAC,EAAEf,MAAM,CAACwB,YAAY,EAAE,IAAI,CAACT,UAAU,CAAC,CAAC,EAAEQ,KAAK,CAACR,UAAU,CAAC,CAAC,CAAC,IACnE,CAAC,CAAC,EAAEf,MAAM,CAACwB,YAAY,EAAE,IAAI,CAACnB,IAAI,EAAEkB,KAAK,CAAClB,IAAI,CAAC;EACvD;AACJ;AACAV,OAAO,CAACE,mBAAmB,GAAGA,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}