{"ast":null,"code":"\"use strict\";\n\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OperationsClientBuilder = exports.OperationsClient = exports.ALL_SCOPES = exports.SERVICE_ADDRESS = void 0;\nconst createApiCall_1 = require(\"./createApiCall\");\nconst descriptor_1 = require(\"./descriptor\");\nconst gax = require(\"./gax\");\nconst configData = require(\"./operations_client_config.json\");\nconst operationProtoJson = require(\"../protos/operations.json\");\nconst transcoding_1 = require(\"./transcoding\");\nexports.SERVICE_ADDRESS = 'longrunning.googleapis.com';\nconst version = require('../../package.json').version;\nconst DEFAULT_SERVICE_PORT = 443;\nconst CODE_GEN_NAME_VERSION = 'gapic/0.7.1';\n/**\r\n * The scopes needed to make gRPC calls to all of the methods defined in\r\n * this service.\r\n */\nexports.ALL_SCOPES = [];\n/**\r\n * Manages long-running operations with an API service.\r\n *\r\n * When an API method normally takes long time to complete, it can be designed\r\n * to return {@link Operation} to the client, and the client can use this\r\n * interface to receive the real response asynchronously by polling the\r\n * operation resource, or pass the operation resource to another API (such as\r\n * Google Cloud Pub/Sub API) to receive the response.  Any API service that\r\n * returns long-running operations should implement the `Operations` interface\r\n * so developers can have a consistent client experience.\r\n *\r\n * This will be created through a builder function which can be obtained by the\r\n * module. See the following example of how to initialize the module and how to\r\n * access to the builder.\r\n * @see {@link operationsClient}\r\n *\r\n * @class\r\n */\nclass OperationsClient {\n  constructor(gaxGrpc,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  operationsProtos, options) {\n    const opts = Object.assign({\n      servicePath: exports.SERVICE_ADDRESS,\n      port: DEFAULT_SERVICE_PORT,\n      clientConfig: {}\n    }, options);\n    const googleApiClient = ['gl-node/' + process.versions.node];\n    if (opts.libName && opts.libVersion) {\n      googleApiClient.push(opts.libName + '/' + opts.libVersion);\n    }\n    googleApiClient.push(CODE_GEN_NAME_VERSION, 'gax/' + version);\n    if (opts.fallback) {\n      googleApiClient.push('gl-web/' + version);\n    } else {\n      googleApiClient.push('grpc/' + gaxGrpc.grpcVersion);\n    }\n    const defaults = gaxGrpc.constructSettings('google.longrunning.Operations', configData, opts.clientConfig || {}, {\n      'x-goog-api-client': googleApiClient.join(' ')\n    });\n    this.auth = gaxGrpc.auth;\n    // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n    this.innerApiCalls = {};\n    this.descriptor = {\n      listOperations: new descriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'operations')\n    };\n    // Put together the \"service stub\" for\n    // google.longrunning.Operations.\n    this.operationsStub = gaxGrpc.createStub(opts.fallback ? operationsProtos.lookupService('google.longrunning.Operations') : operationsProtos.google.longrunning.Operations, opts);\n    const operationsStubMethods = ['getOperation', 'listOperations', 'cancelOperation', 'deleteOperation'];\n    for (const methodName of operationsStubMethods) {\n      const innerCallPromise = this.operationsStub.then(stub => (...args) => {\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, defaults[methodName], this.descriptor[methodName]);\n    }\n  }\n  /** Closes this operations client. */\n  close() {\n    this.operationsStub.then(stub => stub.close());\n  }\n  getProjectId(callback) {\n    if (this.auth && 'getProjectId' in this.auth) {\n      return this.auth.getProjectId(callback);\n    }\n    if (callback) {\n      callback(new Error('Cannot determine project ID.'));\n    } else {\n      return Promise.reject('Cannot determine project ID.');\n    }\n  }\n  // Service calls\n  getOperationInternal(request, options, callback) {\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.getOperation(request, options, callback);\n  }\n  /**\r\n   * Gets the latest state of a long-running operation.  Clients can use this\r\n   * method to poll the operation result at intervals as recommended by the API\r\n   * service.\r\n   *\r\n   * @param {Object} request - The request object that will be sent.\r\n   * @param {string} request.name - The name of the operation resource.\r\n   * @param {Object=} options\r\n   *   Optional parameters. You can override the default settings for this call,\r\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\r\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\r\n   *   details.\r\n   * @param {function(?Error, ?Object)=} callback\r\n   *   The function which will be called with the result of the API call.\r\n   *\r\n   *   The second parameter to the callback is an object representing\r\n   * [google.longrunning.Operation]{@link\r\n   * external:\"google.longrunning.Operation\"}.\r\n   * @return {Promise} - The promise which resolves to an array.\r\n   *   The first element of the array is an object representing\r\n   * [google.longrunning.Operation]{@link\r\n   * external:\"google.longrunning.Operation\"}. The promise has a method named\r\n   * \"cancel\" which cancels the ongoing API call.\r\n   *\r\n   * @example\r\n   *\r\n   * const client = longrunning.operationsClient();\r\n   * const name = '';\r\n   * const [response] = await client.getOperation({name});\r\n   * // doThingsWith(response)\r\n   */\n  getOperation(request, optionsOrCallback, callback) {\n    let options;\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.getOperation(request, options, callback);\n  }\n  /**\r\n   * Lists operations that match the specified filter in the request. If the\r\n   * server doesn't support this method, it returns `UNIMPLEMENTED`.\r\n   *\r\n   * NOTE: the `name` binding below allows API services to override the binding\r\n   * to use different resource name schemes.\r\n   *\r\n   * @param {Object} request - The request object that will be sent.\r\n   * @param {string} request.name - The name of the operation collection.\r\n   * @param {string} request.filter - The standard list filter.\r\n   * @param {number=} request.pageSize\r\n   *   The maximum number of resources contained in the underlying API\r\n   *   response. If page streaming is performed per-resource, this\r\n   *   parameter does not affect the return value. If page streaming is\r\n   *   performed per-page, this determines the maximum number of\r\n   *   resources in a page.\r\n   * @param {Object=} options\r\n   *   Optional parameters. You can override the default settings for this call,\r\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\r\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\r\n   * details.\r\n   * @param {function(?Error, ?Array, ?Object, ?Object)=} callback\r\n   *   The function which will be called with the result of the API call.\r\n   *\r\n   *   The second parameter to the callback is Array of\r\n   * [google.longrunning.Operation]{@link\r\n   * external:\"google.longrunning.Operation\"}.\r\n   *\r\n   *   When autoPaginate: false is specified through options, it contains the\r\n   * result in a single response. If the response indicates the next page\r\n   * exists, the third parameter is set to be used for the next request object.\r\n   * The fourth parameter keeps the raw response object of an object\r\n   * representing [google.longrunning.ListOperationsResponse]{@link\r\n   * external:\"google.longrunning.ListOperationsResponse\"}.\r\n   * @return {Promise} - The promise which resolves to an array.\r\n   *   The first element of the array is Array of\r\n   * [google.longrunning.Operation]{@link\r\n   * external:\"google.longrunning.Operation\"}.\r\n   *\r\n   *   When autoPaginate: false is specified through options, the array has\r\n   * three elements. The first element is Array of\r\n   * [google.longrunning.Operation]{@link\r\n   * external:\"google.longrunning.Operation\"} in a single response. The second\r\n   * element is the next request object if the response indicates the next page\r\n   * exists, or null. The third element is an object representing\r\n   * [google.longrunning.ListOperationsResponse]{@link\r\n   * external:\"google.longrunning.ListOperationsResponse\"}.\r\n   *\r\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\r\n   * call.\r\n   *\r\n   * @example\r\n   *\r\n   * const client = longrunning.operationsClient();\r\n   * const request = {\r\n   *     name: '',\r\n   *     filter: ''\r\n   * };\r\n   * // Iterate over all elements.\r\n   * const [resources] = await client.listOperations(request);\r\n   * for (const resource of resources) {\r\n   *   console.log(resources);\r\n   * }\r\n   *\r\n   * // Or obtain the paged response.\r\n   * const options = {autoPaginate: false};\r\n   * let nextRequest = request;\r\n   * while(nextRequest) {\r\n   *   const response = await client.listOperations(nextRequest, options);\r\n   *   const resources = response[0];\r\n   *   nextRequest = response[1];\r\n   *   const rawResponse = response[2];\r\n   *   for (const resource of resources) {\r\n   *     // doThingsWith(resource);\r\n   *   }\r\n   * };\r\n   */\n  listOperations(request, optionsOrCallback, callback) {\n    let options;\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.listOperations(request, options, callback);\n  }\n  /**\r\n   * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.\r\n   *\r\n   * This fetches the paged responses for {@link listOperations} continuously\r\n   * and invokes the callback registered for 'data' event for each element in\r\n   * the responses.\r\n   *\r\n   * The returned object has 'end' method when no more elements are required.\r\n   *\r\n   * autoPaginate option will be ignored.\r\n   *\r\n   * @see {@link https://nodejs.org/api/stream.html}\r\n   *\r\n   * @param {Object} request - The request object that will be sent.\r\n   * @param {string} request.name - The name of the operation collection.\r\n   * @param {string} request.filter - The standard list filter.\r\n   * @param {number=} request.pageSize -\r\n   *   The maximum number of resources contained in the underlying API\r\n   *   response. If page streaming is performed per-resource, this\r\n   *   parameter does not affect the return value. If page streaming is\r\n   *   performed per-page, this determines the maximum number of\r\n   *   resources in a page.\r\n   * @param {Object=} options\r\n   *   Optional parameters. You can override the default settings for this call,\r\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\r\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\r\n   *   details.\r\n   * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:\"google.longrunning.Operation\"} on 'data' event.\r\n   *\r\n   * @example\r\n   *\r\n   * const client = longrunning.operationsClient();\r\n   * const request = {\r\n   *   name: '',\r\n   *   filter: ''\r\n   * };\r\n   * client.listOperationsStream(request)\r\n   *   .on('data', element => {\r\n   *     // doThingsWith(element)\r\n   *   })\r\n   *   .on('error', err => {\r\n   *     console.error(err);\r\n   *   });\r\n   */\n  listOperationsStream(request, options) {\n    const callSettings = new gax.CallSettings(options);\n    return this.descriptor.listOperations.createStream(this.innerApiCalls.listOperations, request, callSettings);\n  }\n  /**\r\n   * Equivalent to {@link listOperations}, but returns an iterable object.\r\n   *\r\n   * for-await-of syntax is used with the iterable to recursively get response element on-demand.\r\n   *\r\n   * @param {Object} request - The request object that will be sent.\r\n   * @param {string} request.name - The name of the operation collection.\r\n   * @param {string} request.filter - The standard list filter.\r\n   * @param {number=} request.pageSize -\r\n   *   The maximum number of resources contained in the underlying API\r\n   *   response. If page streaming is performed per-resource, this\r\n   *   parameter does not affect the return value. If page streaming is\r\n   *   performed per-page, this determines the maximum number of\r\n   *   resources in a page.\r\n   * @param {Object=} options\r\n   *   Optional parameters. You can override the default settings for this call,\r\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\r\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\r\n   *   details.\r\n   * @returns {Object}\r\n   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\r\n   */\n  listOperationsAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    return this.descriptor.listOperations.asyncIterate(this.innerApiCalls.listOperations, request, callSettings);\n  }\n  /**\r\n   * Starts asynchronous cancellation on a long-running operation.  The server\r\n   * makes a best effort to cancel the operation, but success is not\r\n   * guaranteed.  If the server doesn't support this method, it returns\r\n   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\r\n   * {@link Operations.GetOperation} or\r\n   * other methods to check whether the cancellation succeeded or whether the\r\n   * operation completed despite cancellation. On successful cancellation,\r\n   * the operation is not deleted; instead, it becomes an operation with\r\n   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\r\n   * 1, corresponding to `Code.CANCELLED`.\r\n   *\r\n   * @param {Object} request - The request object that will be sent.\r\n   * @param {string} request.name - The name of the operation resource to be cancelled.\r\n   * @param {Object=} options\r\n   *   Optional parameters. You can override the default settings for this call,\r\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\r\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\r\n   * details.\r\n   * @param {function(?Error)=} callback\r\n   *   The function which will be called with the result of the API call.\r\n   * @return {Promise} - The promise which resolves when API call finishes.\r\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\r\n   * call.\r\n   *\r\n   * @example\r\n   *\r\n   * const client = longrunning.operationsClient();\r\n   * await client.cancelOperation({name: ''});\r\n   */\n  cancelOperation(request, optionsOrCallback, callback) {\n    let options;\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.cancelOperation(request, options, callback);\n  }\n  /**\r\n   * Deletes a long-running operation. This method indicates that the client is\r\n   * no longer interested in the operation result. It does not cancel the\r\n   * operation. If the server doesn't support this method, it returns\r\n   * `google.rpc.Code.UNIMPLEMENTED`.\r\n   *\r\n   * @param {Object} request - The request object that will be sent.\r\n   * @param {string} request.name - The name of the operation resource to be deleted.\r\n   * @param {Object=} options\r\n   *   Optional parameters. You can override the default settings for this call,\r\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\r\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\r\n   * details.\r\n   * @param {function(?Error)=} callback\r\n   *   The function which will be called with the result of the API call.\r\n   * @return {Promise} - The promise which resolves when API call finishes.\r\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\r\n   * call.\r\n   *\r\n   * @example\r\n   *\r\n   * const client = longrunning.operationsClient();\r\n   * await client.deleteOperation({name: ''});\r\n   */\n  deleteOperation(request, optionsOrCallback, callback) {\n    let options;\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.deleteOperation(request, options, callback);\n  }\n}\nexports.OperationsClient = OperationsClient;\nclass OperationsClientBuilder {\n  /**\r\n   * Builds a new Operations Client\r\n   * @param gaxGrpc {GrpcClient}\r\n   */\n  constructor(gaxGrpc, protoJson) {\n    if (protoJson && gaxGrpc.httpRules) {\n      // overwrite the http rules if provide in service yaml.\n      (0, transcoding_1.overrideHttpRules)(gaxGrpc.httpRules, protoJson);\n    }\n    const operationsProtos = protoJson !== null && protoJson !== void 0 ? protoJson : gaxGrpc.loadProtoJSON(operationProtoJson);\n    /**\r\n     * Build a new instance of {@link OperationsClient}.\r\n     *\r\n     * @param {Object=} opts - The optional parameters.\r\n     * @param {String=} opts.servicePath - Domain name of the API remote host.\r\n     * @param {number=} opts.port - The port on which to connect to the remote host.\r\n     * @param {grpc.ClientCredentials=} opts.sslCreds - A ClientCredentials for use with an SSL-enabled channel.\r\n     * @param {Object=} opts.clientConfig - The customized config to build the call settings. See {@link gax.constructSettings} for the format.\r\n     */\n    this.operationsClient = opts => {\n      if (gaxGrpc.fallback) {\n        opts.fallback = gaxGrpc.fallback;\n      }\n      return new OperationsClient(gaxGrpc, operationsProtos, opts);\n    };\n    Object.assign(this.operationsClient, OperationsClient);\n  }\n}\nexports.OperationsClientBuilder = OperationsClientBuilder;","map":{"version":3,"names":["Object","defineProperty","exports","value","OperationsClientBuilder","OperationsClient","ALL_SCOPES","SERVICE_ADDRESS","createApiCall_1","require","descriptor_1","gax","configData","operationProtoJson","transcoding_1","version","DEFAULT_SERVICE_PORT","CODE_GEN_NAME_VERSION","constructor","gaxGrpc","operationsProtos","options","opts","assign","servicePath","port","clientConfig","googleApiClient","process","versions","node","libName","libVersion","push","fallback","grpcVersion","defaults","constructSettings","join","auth","innerApiCalls","descriptor","listOperations","PageDescriptor","operationsStub","createStub","lookupService","google","longrunning","Operations","operationsStubMethods","methodName","innerCallPromise","then","stub","args","func","apply","err","createApiCall","close","getProjectId","callback","Error","Promise","reject","getOperationInternal","request","getOperation","optionsOrCallback","Function","undefined","listOperationsStream","callSettings","CallSettings","createStream","listOperationsAsync","asyncIterate","cancelOperation","deleteOperation","protoJson","httpRules","overrideHttpRules","loadProtoJSON","operationsClient"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/google-gax/build/src/operationsClient.js"],"sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.OperationsClientBuilder = exports.OperationsClient = exports.ALL_SCOPES = exports.SERVICE_ADDRESS = void 0;\r\nconst createApiCall_1 = require(\"./createApiCall\");\r\nconst descriptor_1 = require(\"./descriptor\");\r\nconst gax = require(\"./gax\");\r\nconst configData = require(\"./operations_client_config.json\");\r\nconst operationProtoJson = require(\"../protos/operations.json\");\r\nconst transcoding_1 = require(\"./transcoding\");\r\nexports.SERVICE_ADDRESS = 'longrunning.googleapis.com';\r\nconst version = require('../../package.json').version;\r\nconst DEFAULT_SERVICE_PORT = 443;\r\nconst CODE_GEN_NAME_VERSION = 'gapic/0.7.1';\r\n/**\r\n * The scopes needed to make gRPC calls to all of the methods defined in\r\n * this service.\r\n */\r\nexports.ALL_SCOPES = [];\r\n/**\r\n * Manages long-running operations with an API service.\r\n *\r\n * When an API method normally takes long time to complete, it can be designed\r\n * to return {@link Operation} to the client, and the client can use this\r\n * interface to receive the real response asynchronously by polling the\r\n * operation resource, or pass the operation resource to another API (such as\r\n * Google Cloud Pub/Sub API) to receive the response.  Any API service that\r\n * returns long-running operations should implement the `Operations` interface\r\n * so developers can have a consistent client experience.\r\n *\r\n * This will be created through a builder function which can be obtained by the\r\n * module. See the following example of how to initialize the module and how to\r\n * access to the builder.\r\n * @see {@link operationsClient}\r\n *\r\n * @class\r\n */\r\nclass OperationsClient {\r\n    constructor(gaxGrpc, \r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    operationsProtos, options) {\r\n        const opts = Object.assign({\r\n            servicePath: exports.SERVICE_ADDRESS,\r\n            port: DEFAULT_SERVICE_PORT,\r\n            clientConfig: {},\r\n        }, options);\r\n        const googleApiClient = ['gl-node/' + process.versions.node];\r\n        if (opts.libName && opts.libVersion) {\r\n            googleApiClient.push(opts.libName + '/' + opts.libVersion);\r\n        }\r\n        googleApiClient.push(CODE_GEN_NAME_VERSION, 'gax/' + version);\r\n        if (opts.fallback) {\r\n            googleApiClient.push('gl-web/' + version);\r\n        }\r\n        else {\r\n            googleApiClient.push('grpc/' + gaxGrpc.grpcVersion);\r\n        }\r\n        const defaults = gaxGrpc.constructSettings('google.longrunning.Operations', configData, opts.clientConfig || {}, { 'x-goog-api-client': googleApiClient.join(' ') });\r\n        this.auth = gaxGrpc.auth;\r\n        // Set up a dictionary of \"inner API calls\"; the core implementation\r\n        // of calling the API is handled in `google-gax`, with this code\r\n        // merely providing the destination and request information.\r\n        this.innerApiCalls = {};\r\n        this.descriptor = {\r\n            listOperations: new descriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'operations'),\r\n        };\r\n        // Put together the \"service stub\" for\r\n        // google.longrunning.Operations.\r\n        this.operationsStub = gaxGrpc.createStub(opts.fallback\r\n            ? operationsProtos.lookupService('google.longrunning.Operations')\r\n            : operationsProtos.google.longrunning.Operations, opts);\r\n        const operationsStubMethods = [\r\n            'getOperation',\r\n            'listOperations',\r\n            'cancelOperation',\r\n            'deleteOperation',\r\n        ];\r\n        for (const methodName of operationsStubMethods) {\r\n            const innerCallPromise = this.operationsStub.then(stub => (...args) => {\r\n                const func = stub[methodName];\r\n                return func.apply(stub, args);\r\n            }, err => () => {\r\n                throw err;\r\n            });\r\n            this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, defaults[methodName], this.descriptor[methodName]);\r\n        }\r\n    }\r\n    /** Closes this operations client. */\r\n    close() {\r\n        this.operationsStub.then(stub => stub.close());\r\n    }\r\n    getProjectId(callback) {\r\n        if (this.auth && 'getProjectId' in this.auth) {\r\n            return this.auth.getProjectId(callback);\r\n        }\r\n        if (callback) {\r\n            callback(new Error('Cannot determine project ID.'));\r\n        }\r\n        else {\r\n            return Promise.reject('Cannot determine project ID.');\r\n        }\r\n    }\r\n    // Service calls\r\n    getOperationInternal(request, options, callback) {\r\n        request = request || {};\r\n        options = options || {};\r\n        return this.innerApiCalls.getOperation(request, options, callback);\r\n    }\r\n    /**\r\n     * Gets the latest state of a long-running operation.  Clients can use this\r\n     * method to poll the operation result at intervals as recommended by the API\r\n     * service.\r\n     *\r\n     * @param {Object} request - The request object that will be sent.\r\n     * @param {string} request.name - The name of the operation resource.\r\n     * @param {Object=} options\r\n     *   Optional parameters. You can override the default settings for this call,\r\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\r\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\r\n     *   details.\r\n     * @param {function(?Error, ?Object)=} callback\r\n     *   The function which will be called with the result of the API call.\r\n     *\r\n     *   The second parameter to the callback is an object representing\r\n     * [google.longrunning.Operation]{@link\r\n     * external:\"google.longrunning.Operation\"}.\r\n     * @return {Promise} - The promise which resolves to an array.\r\n     *   The first element of the array is an object representing\r\n     * [google.longrunning.Operation]{@link\r\n     * external:\"google.longrunning.Operation\"}. The promise has a method named\r\n     * \"cancel\" which cancels the ongoing API call.\r\n     *\r\n     * @example\r\n     *\r\n     * const client = longrunning.operationsClient();\r\n     * const name = '';\r\n     * const [response] = await client.getOperation({name});\r\n     * // doThingsWith(response)\r\n     */\r\n    getOperation(request, optionsOrCallback, callback) {\r\n        let options;\r\n        if (optionsOrCallback instanceof Function && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        request = request || {};\r\n        options = options || {};\r\n        return this.innerApiCalls.getOperation(request, options, callback);\r\n    }\r\n    /**\r\n     * Lists operations that match the specified filter in the request. If the\r\n     * server doesn't support this method, it returns `UNIMPLEMENTED`.\r\n     *\r\n     * NOTE: the `name` binding below allows API services to override the binding\r\n     * to use different resource name schemes.\r\n     *\r\n     * @param {Object} request - The request object that will be sent.\r\n     * @param {string} request.name - The name of the operation collection.\r\n     * @param {string} request.filter - The standard list filter.\r\n     * @param {number=} request.pageSize\r\n     *   The maximum number of resources contained in the underlying API\r\n     *   response. If page streaming is performed per-resource, this\r\n     *   parameter does not affect the return value. If page streaming is\r\n     *   performed per-page, this determines the maximum number of\r\n     *   resources in a page.\r\n     * @param {Object=} options\r\n     *   Optional parameters. You can override the default settings for this call,\r\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\r\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\r\n     * details.\r\n     * @param {function(?Error, ?Array, ?Object, ?Object)=} callback\r\n     *   The function which will be called with the result of the API call.\r\n     *\r\n     *   The second parameter to the callback is Array of\r\n     * [google.longrunning.Operation]{@link\r\n     * external:\"google.longrunning.Operation\"}.\r\n     *\r\n     *   When autoPaginate: false is specified through options, it contains the\r\n     * result in a single response. If the response indicates the next page\r\n     * exists, the third parameter is set to be used for the next request object.\r\n     * The fourth parameter keeps the raw response object of an object\r\n     * representing [google.longrunning.ListOperationsResponse]{@link\r\n     * external:\"google.longrunning.ListOperationsResponse\"}.\r\n     * @return {Promise} - The promise which resolves to an array.\r\n     *   The first element of the array is Array of\r\n     * [google.longrunning.Operation]{@link\r\n     * external:\"google.longrunning.Operation\"}.\r\n     *\r\n     *   When autoPaginate: false is specified through options, the array has\r\n     * three elements. The first element is Array of\r\n     * [google.longrunning.Operation]{@link\r\n     * external:\"google.longrunning.Operation\"} in a single response. The second\r\n     * element is the next request object if the response indicates the next page\r\n     * exists, or null. The third element is an object representing\r\n     * [google.longrunning.ListOperationsResponse]{@link\r\n     * external:\"google.longrunning.ListOperationsResponse\"}.\r\n     *\r\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\r\n     * call.\r\n     *\r\n     * @example\r\n     *\r\n     * const client = longrunning.operationsClient();\r\n     * const request = {\r\n     *     name: '',\r\n     *     filter: ''\r\n     * };\r\n     * // Iterate over all elements.\r\n     * const [resources] = await client.listOperations(request);\r\n     * for (const resource of resources) {\r\n     *   console.log(resources);\r\n     * }\r\n     *\r\n     * // Or obtain the paged response.\r\n     * const options = {autoPaginate: false};\r\n     * let nextRequest = request;\r\n     * while(nextRequest) {\r\n     *   const response = await client.listOperations(nextRequest, options);\r\n     *   const resources = response[0];\r\n     *   nextRequest = response[1];\r\n     *   const rawResponse = response[2];\r\n     *   for (const resource of resources) {\r\n     *     // doThingsWith(resource);\r\n     *   }\r\n     * };\r\n     */\r\n    listOperations(request, optionsOrCallback, callback) {\r\n        let options;\r\n        if (optionsOrCallback instanceof Function && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        request = request || {};\r\n        options = options || {};\r\n        return this.innerApiCalls.listOperations(request, options, callback);\r\n    }\r\n    /**\r\n     * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.\r\n     *\r\n     * This fetches the paged responses for {@link listOperations} continuously\r\n     * and invokes the callback registered for 'data' event for each element in\r\n     * the responses.\r\n     *\r\n     * The returned object has 'end' method when no more elements are required.\r\n     *\r\n     * autoPaginate option will be ignored.\r\n     *\r\n     * @see {@link https://nodejs.org/api/stream.html}\r\n     *\r\n     * @param {Object} request - The request object that will be sent.\r\n     * @param {string} request.name - The name of the operation collection.\r\n     * @param {string} request.filter - The standard list filter.\r\n     * @param {number=} request.pageSize -\r\n     *   The maximum number of resources contained in the underlying API\r\n     *   response. If page streaming is performed per-resource, this\r\n     *   parameter does not affect the return value. If page streaming is\r\n     *   performed per-page, this determines the maximum number of\r\n     *   resources in a page.\r\n     * @param {Object=} options\r\n     *   Optional parameters. You can override the default settings for this call,\r\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\r\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\r\n     *   details.\r\n     * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:\"google.longrunning.Operation\"} on 'data' event.\r\n     *\r\n     * @example\r\n     *\r\n     * const client = longrunning.operationsClient();\r\n     * const request = {\r\n     *   name: '',\r\n     *   filter: ''\r\n     * };\r\n     * client.listOperationsStream(request)\r\n     *   .on('data', element => {\r\n     *     // doThingsWith(element)\r\n     *   })\r\n     *   .on('error', err => {\r\n     *     console.error(err);\r\n     *   });\r\n     */\r\n    listOperationsStream(request, options) {\r\n        const callSettings = new gax.CallSettings(options);\r\n        return this.descriptor.listOperations.createStream(this.innerApiCalls.listOperations, request, callSettings);\r\n    }\r\n    /**\r\n     * Equivalent to {@link listOperations}, but returns an iterable object.\r\n     *\r\n     * for-await-of syntax is used with the iterable to recursively get response element on-demand.\r\n     *\r\n     * @param {Object} request - The request object that will be sent.\r\n     * @param {string} request.name - The name of the operation collection.\r\n     * @param {string} request.filter - The standard list filter.\r\n     * @param {number=} request.pageSize -\r\n     *   The maximum number of resources contained in the underlying API\r\n     *   response. If page streaming is performed per-resource, this\r\n     *   parameter does not affect the return value. If page streaming is\r\n     *   performed per-page, this determines the maximum number of\r\n     *   resources in a page.\r\n     * @param {Object=} options\r\n     *   Optional parameters. You can override the default settings for this call,\r\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\r\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\r\n     *   details.\r\n     * @returns {Object}\r\n     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\r\n     */\r\n    listOperationsAsync(request, options) {\r\n        request = request || {};\r\n        options = options || {};\r\n        const callSettings = new gax.CallSettings(options);\r\n        return this.descriptor.listOperations.asyncIterate(this.innerApiCalls.listOperations, request, callSettings);\r\n    }\r\n    /**\r\n     * Starts asynchronous cancellation on a long-running operation.  The server\r\n     * makes a best effort to cancel the operation, but success is not\r\n     * guaranteed.  If the server doesn't support this method, it returns\r\n     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\r\n     * {@link Operations.GetOperation} or\r\n     * other methods to check whether the cancellation succeeded or whether the\r\n     * operation completed despite cancellation. On successful cancellation,\r\n     * the operation is not deleted; instead, it becomes an operation with\r\n     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\r\n     * 1, corresponding to `Code.CANCELLED`.\r\n     *\r\n     * @param {Object} request - The request object that will be sent.\r\n     * @param {string} request.name - The name of the operation resource to be cancelled.\r\n     * @param {Object=} options\r\n     *   Optional parameters. You can override the default settings for this call,\r\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\r\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\r\n     * details.\r\n     * @param {function(?Error)=} callback\r\n     *   The function which will be called with the result of the API call.\r\n     * @return {Promise} - The promise which resolves when API call finishes.\r\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\r\n     * call.\r\n     *\r\n     * @example\r\n     *\r\n     * const client = longrunning.operationsClient();\r\n     * await client.cancelOperation({name: ''});\r\n     */\r\n    cancelOperation(request, optionsOrCallback, callback) {\r\n        let options;\r\n        if (optionsOrCallback instanceof Function && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        request = request || {};\r\n        options = options || {};\r\n        return this.innerApiCalls.cancelOperation(request, options, callback);\r\n    }\r\n    /**\r\n     * Deletes a long-running operation. This method indicates that the client is\r\n     * no longer interested in the operation result. It does not cancel the\r\n     * operation. If the server doesn't support this method, it returns\r\n     * `google.rpc.Code.UNIMPLEMENTED`.\r\n     *\r\n     * @param {Object} request - The request object that will be sent.\r\n     * @param {string} request.name - The name of the operation resource to be deleted.\r\n     * @param {Object=} options\r\n     *   Optional parameters. You can override the default settings for this call,\r\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\r\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\r\n     * details.\r\n     * @param {function(?Error)=} callback\r\n     *   The function which will be called with the result of the API call.\r\n     * @return {Promise} - The promise which resolves when API call finishes.\r\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\r\n     * call.\r\n     *\r\n     * @example\r\n     *\r\n     * const client = longrunning.operationsClient();\r\n     * await client.deleteOperation({name: ''});\r\n     */\r\n    deleteOperation(request, optionsOrCallback, callback) {\r\n        let options;\r\n        if (optionsOrCallback instanceof Function && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        request = request || {};\r\n        options = options || {};\r\n        return this.innerApiCalls.deleteOperation(request, options, callback);\r\n    }\r\n}\r\nexports.OperationsClient = OperationsClient;\r\nclass OperationsClientBuilder {\r\n    /**\r\n     * Builds a new Operations Client\r\n     * @param gaxGrpc {GrpcClient}\r\n     */\r\n    constructor(gaxGrpc, protoJson) {\r\n        if (protoJson && gaxGrpc.httpRules) {\r\n            // overwrite the http rules if provide in service yaml.\r\n            (0, transcoding_1.overrideHttpRules)(gaxGrpc.httpRules, protoJson);\r\n        }\r\n        const operationsProtos = protoJson !== null && protoJson !== void 0 ? protoJson : gaxGrpc.loadProtoJSON(operationProtoJson);\r\n        /**\r\n         * Build a new instance of {@link OperationsClient}.\r\n         *\r\n         * @param {Object=} opts - The optional parameters.\r\n         * @param {String=} opts.servicePath - Domain name of the API remote host.\r\n         * @param {number=} opts.port - The port on which to connect to the remote host.\r\n         * @param {grpc.ClientCredentials=} opts.sslCreds - A ClientCredentials for use with an SSL-enabled channel.\r\n         * @param {Object=} opts.clientConfig - The customized config to build the call settings. See {@link gax.constructSettings} for the format.\r\n         */\r\n        this.operationsClient = opts => {\r\n            if (gaxGrpc.fallback) {\r\n                opts.fallback = gaxGrpc.fallback;\r\n            }\r\n            return new OperationsClient(gaxGrpc, operationsProtos, opts);\r\n        };\r\n        Object.assign(this.operationsClient, OperationsClient);\r\n    }\r\n}\r\nexports.OperationsClientBuilder = OperationsClientBuilder;\r\n//# sourceMappingURL=operationsClient.js.map"],"mappings":"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GAAGgD,iBAAiB;IAC/B;IACAF,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB9C,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,OAAO,IAAI,CAACmB,aAAa,CAAC4B,YAAY,CAACD,OAAO,EAAE9C,OAAO,EAAEyC,QAAQ,CAAC;EACtE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIpB,cAAcA,CAACyB,OAAO,EAAEE,iBAAiB,EAAEP,QAAQ,EAAE;IACjD,IAAIzC,OAAO;IACX,IAAIgD,iBAAiB,YAAYC,QAAQ,IAAIR,QAAQ,KAAKS,SAAS,EAAE;MACjET,QAAQ,GAAGO,iBAAiB;MAC5BhD,OAAO,GAAG,CAAC,CAAC;IAChB,CAAC,MACI;MACDA,OAAO,GAAGgD,iBAAiB;IAC/B;IACAF,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB9C,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,OAAO,IAAI,CAACmB,aAAa,CAACE,cAAc,CAACyB,OAAO,EAAE9C,OAAO,EAAEyC,QAAQ,CAAC;EACxE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIU,oBAAoBA,CAACL,OA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}