{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\nconst isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nconst publicUrl=new URL('http://localhost:3000',window.location.href);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener('load',()=>{const swUrl=`${process.env.PUBLIC_URL}/firebase-messaging-sw.js`;navigator.serviceWorker.register(swUrl).then(registration=>{console.log('Service Worker registered with scope:',registration.scope);}).catch(error=>{console.error('Service Worker registration failed:',error);});if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(()=>{console.log('This web app is being served cache-first by a service '+'worker. To learn more, visit https://cra.link/PWA');});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(registration=>{registration.onupdatefound=()=>{const installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=()=>{if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.log('New content is available and will be used when all '+'tabs for this page are closed. See https://cra.link/PWA.');// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(error=>{console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl,{headers:{'Service-Worker':'script'}}).then(response=>{// Ensure service worker exists, and that we really are getting a JS file.\nconst contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(registration=>{registration.unregister().then(()=>{window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(()=>{console.log('No internet connection found. App is running in offline mode.');});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(registration=>{registration.unregister();}).catch(error=>{console.error(error.message);});}}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","href","origin","addEventListener","swUrl","PUBLIC_URL","serviceWorker","then","registration","console","log","scope","catch","error","checkValidServiceWorker","ready","registerValidSW","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/my-pwa/src/serviceWorkerRegistration.js"],"sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL('http://localhost:3000', window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/firebase-messaging-sw.js`;\r\n        navigator.serviceWorker.register(swUrl)\r\n          .then((registration) => {\r\n            console.log('Service Worker registered with scope:', registration.scope);\r\n          })\r\n          .catch((error) => {\r\n            console.error('Service Worker registration failed:', error);\r\n          });        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://cra.link/PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then((registration) => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then((response) => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}