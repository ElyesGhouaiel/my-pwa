{"ast":null,"code":"\"use strict\";\n\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addTimeoutArg = addTimeoutArg;\n/**\r\n * Updates func so that it gets called with the timeout as its final arg.\r\n *\r\n * This converts a function, func, into another function with updated deadline.\r\n *\r\n * @private\r\n *\r\n * @param {GRPCCall} func - a function to be updated.\r\n * @param {number} timeout - to be added to the original function as it final\r\n *   positional arg.\r\n * @param {Object} otherArgs - the additional arguments to be passed to func.\r\n * @param {Object=} abTests - the A/B testing key/value pairs.\r\n * @return {function(Object, APICallback)}\r\n *  the function with other arguments and the timeout.\r\n */\nfunction addTimeoutArg(func, timeout, otherArgs, abTests) {\n  // TODO: this assumes the other arguments consist of metadata and options,\n  // which is specific to gRPC calls. Remove the hidden dependency on gRPC.\n  return (argument, callback) => {\n    const now = new Date();\n    const options = otherArgs.options || {};\n    options.deadline = new Date(now.getTime() + timeout);\n    const metadata = otherArgs.metadataBuilder ? otherArgs.metadataBuilder(abTests, otherArgs.headers || {}) : null;\n    return func(argument, metadata, options, callback);\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","addTimeoutArg","func","timeout","otherArgs","abTests","argument","callback","now","Date","options","deadline","getTime","metadata","metadataBuilder","headers"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/google-gax/build/src/normalCalls/timeout.js"],"sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.addTimeoutArg = addTimeoutArg;\r\n/**\r\n * Updates func so that it gets called with the timeout as its final arg.\r\n *\r\n * This converts a function, func, into another function with updated deadline.\r\n *\r\n * @private\r\n *\r\n * @param {GRPCCall} func - a function to be updated.\r\n * @param {number} timeout - to be added to the original function as it final\r\n *   positional arg.\r\n * @param {Object} otherArgs - the additional arguments to be passed to func.\r\n * @param {Object=} abTests - the A/B testing key/value pairs.\r\n * @return {function(Object, APICallback)}\r\n *  the function with other arguments and the timeout.\r\n */\r\nfunction addTimeoutArg(func, timeout, otherArgs, abTests) {\r\n    // TODO: this assumes the other arguments consist of metadata and options,\r\n    // which is specific to gRPC calls. Remove the hidden dependency on gRPC.\r\n    return (argument, callback) => {\r\n        const now = new Date();\r\n        const options = otherArgs.options || {};\r\n        options.deadline = new Date(now.getTime() + timeout);\r\n        const metadata = otherArgs.metadataBuilder\r\n            ? otherArgs.metadataBuilder(abTests, otherArgs.headers || {})\r\n            : null;\r\n        return func(argument, metadata, options, callback);\r\n    };\r\n}\r\n//# sourceMappingURL=timeout.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAGA,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAaA,CAACC,IAAI,EAAEC,OAAO,EAAEC,SAAS,EAAEC,OAAO,EAAE;EACtD;EACA;EACA,OAAO,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC3B,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;IACtB,MAAMC,OAAO,GAAGN,SAAS,CAACM,OAAO,IAAI,CAAC,CAAC;IACvCA,OAAO,CAACC,QAAQ,GAAG,IAAIF,IAAI,CAACD,GAAG,CAACI,OAAO,CAAC,CAAC,GAAGT,OAAO,CAAC;IACpD,MAAMU,QAAQ,GAAGT,SAAS,CAACU,eAAe,GACpCV,SAAS,CAACU,eAAe,CAACT,OAAO,EAAED,SAAS,CAACW,OAAO,IAAI,CAAC,CAAC,CAAC,GAC3D,IAAI;IACV,OAAOb,IAAI,CAACI,QAAQ,EAAEO,QAAQ,EAAEH,OAAO,EAAEH,QAAQ,CAAC;EACtD,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}