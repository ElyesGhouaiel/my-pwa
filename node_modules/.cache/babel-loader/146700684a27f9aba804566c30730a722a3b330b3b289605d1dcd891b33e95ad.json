{"ast":null,"code":"\"use strict\";\n\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Iam = exports.IAMExceptionMessages = void 0;\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst util_js_1 = require(\"./util.js\");\nvar IAMExceptionMessages;\n(function (IAMExceptionMessages) {\n  IAMExceptionMessages[\"POLICY_OBJECT_REQUIRED\"] = \"A policy object is required.\";\n  IAMExceptionMessages[\"PERMISSIONS_REQUIRED\"] = \"Permissions are required.\";\n})(IAMExceptionMessages || (exports.IAMExceptionMessages = IAMExceptionMessages = {}));\n/**\r\n * Get and set IAM policies for your Cloud Storage bucket.\r\n *\r\n * See {@link https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management| Cloud Storage IAM Management}\r\n * See {@link https://cloud.google.com/iam/docs/granting-changing-revoking-access| Granting, Changing, and Revoking Access}\r\n * See {@link https://cloud.google.com/iam/docs/understanding-roles| IAM Roles}\r\n *\r\n * @constructor Iam\r\n *\r\n * @param {Bucket} bucket The parent instance.\r\n * @example\r\n * ```\r\n * const {Storage} = require('@google-cloud/storage');\r\n * const storage = new Storage();\r\n * const bucket = storage.bucket('my-bucket');\r\n * // bucket.iam\r\n * ```\r\n */\nclass Iam {\n  constructor(bucket) {\n    this.request_ = bucket.request.bind(bucket);\n    this.resourceId_ = 'buckets/' + bucket.getId();\n  }\n  /**\r\n   * @typedef {object} GetPolicyOptions Requested options for IAM#getPolicy().\r\n   * @property {number} [requestedPolicyVersion] The version of IAM policies to\r\n   *     request. If a policy with a condition is requested without setting\r\n   *     this, the server will return an error. This must be set to a value\r\n   *     of 3 to retrieve IAM policies containing conditions. This is to\r\n   *     prevent client code that isn't aware of IAM conditions from\r\n   *     interpreting and modifying policies incorrectly. The service might\r\n   *     return a policy with version lower than the one that was requested,\r\n   *     based on the feature syntax in the policy fetched.\r\n   *     See {@link https://cloud.google.com/iam/docs/policies#versions| IAM Policy versions}\r\n   * @property {string} [userProject] The ID of the project which will be\r\n   *     billed for the request.\r\n   */\n  /**\r\n   * @typedef {array} GetPolicyResponse\r\n   * @property {Policy} 0 The policy.\r\n   * @property {object} 1 The full API response.\r\n   */\n  /**\r\n   * @typedef {object} Policy\r\n   * @property {PolicyBinding[]} policy.bindings Bindings associate members with roles.\r\n   * @property {string} [policy.etag] Etags are used to perform a read-modify-write.\r\n   * @property {number} [policy.version] The syntax schema version of the Policy.\r\n   *      To set an IAM policy with conditional binding, this field must be set to\r\n   *      3 or greater.\r\n   *     See {@link https://cloud.google.com/iam/docs/policies#versions| IAM Policy versions}\r\n   */\n  /**\r\n   * @typedef {object} PolicyBinding\r\n   * @property {string} role Role that is assigned to members.\r\n   * @property {string[]} members Specifies the identities requesting access for the bucket.\r\n   * @property {Expr} [condition] The condition that is associated with this binding.\r\n   */\n  /**\r\n   * @typedef {object} Expr\r\n   * @property {string} [title] An optional title for the expression, i.e. a\r\n   *     short string describing its purpose. This can be used e.g. in UIs\r\n   *     which allow to enter the expression.\r\n   * @property {string} [description] An optional description of the\r\n   *     expression. This is a longer text which describes the expression,\r\n   *     e.g. when hovered over it in a UI.\r\n   * @property {string} expression Textual representation of an expression in\r\n   *     Common Expression Language syntax. The application context of the\r\n   *     containing message determines which well-known feature set of CEL\r\n   *     is supported.The condition that is associated with this binding.\r\n   *\r\n   * @see [Condition] https://cloud.google.com/storage/docs/access-control/iam#conditions\r\n   */\n  /**\r\n   * Get the IAM policy.\r\n   *\r\n   * @param {GetPolicyOptions} [options] Request options.\r\n   * @param {GetPolicyCallback} [callback] Callback function.\r\n   * @returns {Promise<GetPolicyResponse>}\r\n   *\r\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/getIamPolicy| Buckets: setIamPolicy API Documentation}\r\n   *\r\n   * @example\r\n   * ```\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('my-bucket');\r\n   *\r\n   * bucket.iam.getPolicy(\r\n   *     {requestedPolicyVersion: 3},\r\n   *     function(err, policy, apiResponse) {\r\n   *\r\n   *     },\r\n   * );\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.iam.getPolicy({requestedPolicyVersion: 3})\r\n   *   .then(function(data) {\r\n   *     const policy = data[0];\r\n   *     const apiResponse = data[1];\r\n   *   });\r\n   *\r\n   * ```\r\n   * @example <caption>include:samples/iam.js</caption>\r\n   * region_tag:storage_view_bucket_iam_members\r\n   * Example of retrieving a bucket's IAM policy:\r\n   */\n  getPolicy(optionsOrCallback, callback) {\n    const {\n      options,\n      callback: cb\n    } = (0, util_js_1.normalize)(optionsOrCallback, callback);\n    const qs = {};\n    if (options.userProject) {\n      qs.userProject = options.userProject;\n    }\n    if (options.requestedPolicyVersion !== null && options.requestedPolicyVersion !== undefined) {\n      qs.optionsRequestedPolicyVersion = options.requestedPolicyVersion;\n    }\n    this.request_({\n      uri: '/iam',\n      qs\n    }, cb);\n  }\n  /**\r\n   * Set the IAM policy.\r\n   *\r\n   * @throws {Error} If no policy is provided.\r\n   *\r\n   * @param {Policy} policy The policy.\r\n   * @param {SetPolicyOptions} [options] Configuration options.\r\n   * @param {SetPolicyCallback} callback Callback function.\r\n   * @returns {Promise<SetPolicyResponse>}\r\n   *\r\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/setIamPolicy| Buckets: setIamPolicy API Documentation}\r\n   * See {@link https://cloud.google.com/iam/docs/understanding-roles| IAM Roles}\r\n   *\r\n   * @example\r\n   * ```\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('my-bucket');\r\n   *\r\n   * const myPolicy = {\r\n   *   bindings: [\r\n   *     {\r\n   *       role: 'roles/storage.admin',\r\n   *       members:\r\n   * ['serviceAccount:myotherproject@appspot.gserviceaccount.com']\r\n   *     }\r\n   *   ]\r\n   * };\r\n   *\r\n   * bucket.iam.setPolicy(myPolicy, function(err, policy, apiResponse) {});\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.iam.setPolicy(myPolicy).then(function(data) {\r\n   *   const policy = data[0];\r\n   *   const apiResponse = data[1];\r\n   * });\r\n   *\r\n   * ```\r\n   * @example <caption>include:samples/iam.js</caption>\r\n   * region_tag:storage_add_bucket_iam_member\r\n   * Example of adding to a bucket's IAM policy:\r\n   *\r\n   * @example <caption>include:samples/iam.js</caption>\r\n   * region_tag:storage_remove_bucket_iam_member\r\n   * Example of removing from a bucket's IAM policy:\r\n   */\n  setPolicy(policy, optionsOrCallback, callback) {\n    if (policy === null || typeof policy !== 'object') {\n      throw new Error(IAMExceptionMessages.POLICY_OBJECT_REQUIRED);\n    }\n    const {\n      options,\n      callback: cb\n    } = (0, util_js_1.normalize)(optionsOrCallback, callback);\n    let maxRetries;\n    if (policy.etag === undefined) {\n      maxRetries = 0;\n    }\n    this.request_({\n      method: 'PUT',\n      uri: '/iam',\n      maxRetries,\n      json: Object.assign({\n        resourceId: this.resourceId_\n      }, policy),\n      qs: options\n    }, cb);\n  }\n  /**\r\n   * Test a set of permissions for a resource.\r\n   *\r\n   * @throws {Error} If permissions are not provided.\r\n   *\r\n   * @param {string|string[]} permissions The permission(s) to test for.\r\n   * @param {TestIamPermissionsOptions} [options] Configuration object.\r\n   * @param {TestIamPermissionsCallback} [callback] Callback function.\r\n   * @returns {Promise<TestIamPermissionsResponse>}\r\n   *\r\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/testIamPermissions| Buckets: testIamPermissions API Documentation}\r\n   *\r\n   * @example\r\n   * ```\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const bucket = storage.bucket('my-bucket');\r\n   *\r\n   * //-\r\n   * // Test a single permission.\r\n   * //-\r\n   * const test = 'storage.buckets.delete';\r\n   *\r\n   * bucket.iam.testPermissions(test, function(err, permissions, apiResponse) {\r\n   *   console.log(permissions);\r\n   *   // {\r\n   *   //   \"storage.buckets.delete\": true\r\n   *   // }\r\n   * });\r\n   *\r\n   * //-\r\n   * // Test several permissions at once.\r\n   * //-\r\n   * const tests = [\r\n   *   'storage.buckets.delete',\r\n   *   'storage.buckets.get'\r\n   * ];\r\n   *\r\n   * bucket.iam.testPermissions(tests, function(err, permissions) {\r\n   *   console.log(permissions);\r\n   *   // {\r\n   *   //   \"storage.buckets.delete\": false,\r\n   *   //   \"storage.buckets.get\": true\r\n   *   // }\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * bucket.iam.testPermissions(test).then(function(data) {\r\n   *   const permissions = data[0];\r\n   *   const apiResponse = data[1];\r\n   * });\r\n   * ```\r\n   */\n  testPermissions(permissions, optionsOrCallback, callback) {\n    if (!Array.isArray(permissions) && typeof permissions !== 'string') {\n      throw new Error(IAMExceptionMessages.PERMISSIONS_REQUIRED);\n    }\n    const {\n      options,\n      callback: cb\n    } = (0, util_js_1.normalize)(optionsOrCallback, callback);\n    const permissionsArray = Array.isArray(permissions) ? permissions : [permissions];\n    const req = Object.assign({\n      permissions: permissionsArray\n    }, options);\n    this.request_({\n      uri: '/iam/testPermissions',\n      qs: req,\n      useQuerystring: true\n    }, (err, resp) => {\n      if (err) {\n        cb(err, null, resp);\n        return;\n      }\n      const availablePermissions = Array.isArray(resp.permissions) ? resp.permissions : [];\n      const permissionsHash = permissionsArray.reduce((acc, permission) => {\n        acc[permission] = availablePermissions.indexOf(permission) > -1;\n        return acc;\n      }, {});\n      cb(null, permissionsHash, resp);\n    });\n  }\n}\nexports.Iam = Iam;\n/*! Developer Documentation\r\n *\r\n * All async methods (except for streams) will return a Promise in the event\r\n * that a callback is omitted.\r\n */\n(0, promisify_1.promisifyAll)(Iam);","map":{"version":3,"names":["Object","defineProperty","exports","value","Iam","IAMExceptionMessages","promisify_1","require","util_js_1","constructor","bucket","request_","request","bind","resourceId_","getId","getPolicy","optionsOrCallback","callback","options","cb","normalize","qs","userProject","requestedPolicyVersion","undefined","optionsRequestedPolicyVersion","uri","setPolicy","policy","Error","POLICY_OBJECT_REQUIRED","maxRetries","etag","method","json","assign","resourceId","testPermissions","permissions","Array","isArray","PERMISSIONS_REQUIRED","permissionsArray","req","useQuerystring","err","resp","availablePermissions","permissionsHash","reduce","acc","permission","indexOf","promisifyAll"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/@google-cloud/storage/build/cjs/src/iam.js"],"sourcesContent":["\"use strict\";\r\n// Copyright 2019 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Iam = exports.IAMExceptionMessages = void 0;\r\nconst promisify_1 = require(\"@google-cloud/promisify\");\r\nconst util_js_1 = require(\"./util.js\");\r\nvar IAMExceptionMessages;\r\n(function (IAMExceptionMessages) {\r\n    IAMExceptionMessages[\"POLICY_OBJECT_REQUIRED\"] = \"A policy object is required.\";\r\n    IAMExceptionMessages[\"PERMISSIONS_REQUIRED\"] = \"Permissions are required.\";\r\n})(IAMExceptionMessages || (exports.IAMExceptionMessages = IAMExceptionMessages = {}));\r\n/**\r\n * Get and set IAM policies for your Cloud Storage bucket.\r\n *\r\n * See {@link https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management| Cloud Storage IAM Management}\r\n * See {@link https://cloud.google.com/iam/docs/granting-changing-revoking-access| Granting, Changing, and Revoking Access}\r\n * See {@link https://cloud.google.com/iam/docs/understanding-roles| IAM Roles}\r\n *\r\n * @constructor Iam\r\n *\r\n * @param {Bucket} bucket The parent instance.\r\n * @example\r\n * ```\r\n * const {Storage} = require('@google-cloud/storage');\r\n * const storage = new Storage();\r\n * const bucket = storage.bucket('my-bucket');\r\n * // bucket.iam\r\n * ```\r\n */\r\nclass Iam {\r\n    constructor(bucket) {\r\n        this.request_ = bucket.request.bind(bucket);\r\n        this.resourceId_ = 'buckets/' + bucket.getId();\r\n    }\r\n    /**\r\n     * @typedef {object} GetPolicyOptions Requested options for IAM#getPolicy().\r\n     * @property {number} [requestedPolicyVersion] The version of IAM policies to\r\n     *     request. If a policy with a condition is requested without setting\r\n     *     this, the server will return an error. This must be set to a value\r\n     *     of 3 to retrieve IAM policies containing conditions. This is to\r\n     *     prevent client code that isn't aware of IAM conditions from\r\n     *     interpreting and modifying policies incorrectly. The service might\r\n     *     return a policy with version lower than the one that was requested,\r\n     *     based on the feature syntax in the policy fetched.\r\n     *     See {@link https://cloud.google.com/iam/docs/policies#versions| IAM Policy versions}\r\n     * @property {string} [userProject] The ID of the project which will be\r\n     *     billed for the request.\r\n     */\r\n    /**\r\n     * @typedef {array} GetPolicyResponse\r\n     * @property {Policy} 0 The policy.\r\n     * @property {object} 1 The full API response.\r\n     */\r\n    /**\r\n     * @typedef {object} Policy\r\n     * @property {PolicyBinding[]} policy.bindings Bindings associate members with roles.\r\n     * @property {string} [policy.etag] Etags are used to perform a read-modify-write.\r\n     * @property {number} [policy.version] The syntax schema version of the Policy.\r\n     *      To set an IAM policy with conditional binding, this field must be set to\r\n     *      3 or greater.\r\n     *     See {@link https://cloud.google.com/iam/docs/policies#versions| IAM Policy versions}\r\n     */\r\n    /**\r\n     * @typedef {object} PolicyBinding\r\n     * @property {string} role Role that is assigned to members.\r\n     * @property {string[]} members Specifies the identities requesting access for the bucket.\r\n     * @property {Expr} [condition] The condition that is associated with this binding.\r\n     */\r\n    /**\r\n     * @typedef {object} Expr\r\n     * @property {string} [title] An optional title for the expression, i.e. a\r\n     *     short string describing its purpose. This can be used e.g. in UIs\r\n     *     which allow to enter the expression.\r\n     * @property {string} [description] An optional description of the\r\n     *     expression. This is a longer text which describes the expression,\r\n     *     e.g. when hovered over it in a UI.\r\n     * @property {string} expression Textual representation of an expression in\r\n     *     Common Expression Language syntax. The application context of the\r\n     *     containing message determines which well-known feature set of CEL\r\n     *     is supported.The condition that is associated with this binding.\r\n     *\r\n     * @see [Condition] https://cloud.google.com/storage/docs/access-control/iam#conditions\r\n     */\r\n    /**\r\n     * Get the IAM policy.\r\n     *\r\n     * @param {GetPolicyOptions} [options] Request options.\r\n     * @param {GetPolicyCallback} [callback] Callback function.\r\n     * @returns {Promise<GetPolicyResponse>}\r\n     *\r\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/getIamPolicy| Buckets: setIamPolicy API Documentation}\r\n     *\r\n     * @example\r\n     * ```\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('my-bucket');\r\n     *\r\n     * bucket.iam.getPolicy(\r\n     *     {requestedPolicyVersion: 3},\r\n     *     function(err, policy, apiResponse) {\r\n     *\r\n     *     },\r\n     * );\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.iam.getPolicy({requestedPolicyVersion: 3})\r\n     *   .then(function(data) {\r\n     *     const policy = data[0];\r\n     *     const apiResponse = data[1];\r\n     *   });\r\n     *\r\n     * ```\r\n     * @example <caption>include:samples/iam.js</caption>\r\n     * region_tag:storage_view_bucket_iam_members\r\n     * Example of retrieving a bucket's IAM policy:\r\n     */\r\n    getPolicy(optionsOrCallback, callback) {\r\n        const { options, callback: cb } = (0, util_js_1.normalize)(optionsOrCallback, callback);\r\n        const qs = {};\r\n        if (options.userProject) {\r\n            qs.userProject = options.userProject;\r\n        }\r\n        if (options.requestedPolicyVersion !== null &&\r\n            options.requestedPolicyVersion !== undefined) {\r\n            qs.optionsRequestedPolicyVersion = options.requestedPolicyVersion;\r\n        }\r\n        this.request_({\r\n            uri: '/iam',\r\n            qs,\r\n        }, cb);\r\n    }\r\n    /**\r\n     * Set the IAM policy.\r\n     *\r\n     * @throws {Error} If no policy is provided.\r\n     *\r\n     * @param {Policy} policy The policy.\r\n     * @param {SetPolicyOptions} [options] Configuration options.\r\n     * @param {SetPolicyCallback} callback Callback function.\r\n     * @returns {Promise<SetPolicyResponse>}\r\n     *\r\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/setIamPolicy| Buckets: setIamPolicy API Documentation}\r\n     * See {@link https://cloud.google.com/iam/docs/understanding-roles| IAM Roles}\r\n     *\r\n     * @example\r\n     * ```\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('my-bucket');\r\n     *\r\n     * const myPolicy = {\r\n     *   bindings: [\r\n     *     {\r\n     *       role: 'roles/storage.admin',\r\n     *       members:\r\n     * ['serviceAccount:myotherproject@appspot.gserviceaccount.com']\r\n     *     }\r\n     *   ]\r\n     * };\r\n     *\r\n     * bucket.iam.setPolicy(myPolicy, function(err, policy, apiResponse) {});\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.iam.setPolicy(myPolicy).then(function(data) {\r\n     *   const policy = data[0];\r\n     *   const apiResponse = data[1];\r\n     * });\r\n     *\r\n     * ```\r\n     * @example <caption>include:samples/iam.js</caption>\r\n     * region_tag:storage_add_bucket_iam_member\r\n     * Example of adding to a bucket's IAM policy:\r\n     *\r\n     * @example <caption>include:samples/iam.js</caption>\r\n     * region_tag:storage_remove_bucket_iam_member\r\n     * Example of removing from a bucket's IAM policy:\r\n     */\r\n    setPolicy(policy, optionsOrCallback, callback) {\r\n        if (policy === null || typeof policy !== 'object') {\r\n            throw new Error(IAMExceptionMessages.POLICY_OBJECT_REQUIRED);\r\n        }\r\n        const { options, callback: cb } = (0, util_js_1.normalize)(optionsOrCallback, callback);\r\n        let maxRetries;\r\n        if (policy.etag === undefined) {\r\n            maxRetries = 0;\r\n        }\r\n        this.request_({\r\n            method: 'PUT',\r\n            uri: '/iam',\r\n            maxRetries,\r\n            json: Object.assign({\r\n                resourceId: this.resourceId_,\r\n            }, policy),\r\n            qs: options,\r\n        }, cb);\r\n    }\r\n    /**\r\n     * Test a set of permissions for a resource.\r\n     *\r\n     * @throws {Error} If permissions are not provided.\r\n     *\r\n     * @param {string|string[]} permissions The permission(s) to test for.\r\n     * @param {TestIamPermissionsOptions} [options] Configuration object.\r\n     * @param {TestIamPermissionsCallback} [callback] Callback function.\r\n     * @returns {Promise<TestIamPermissionsResponse>}\r\n     *\r\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/testIamPermissions| Buckets: testIamPermissions API Documentation}\r\n     *\r\n     * @example\r\n     * ```\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const bucket = storage.bucket('my-bucket');\r\n     *\r\n     * //-\r\n     * // Test a single permission.\r\n     * //-\r\n     * const test = 'storage.buckets.delete';\r\n     *\r\n     * bucket.iam.testPermissions(test, function(err, permissions, apiResponse) {\r\n     *   console.log(permissions);\r\n     *   // {\r\n     *   //   \"storage.buckets.delete\": true\r\n     *   // }\r\n     * });\r\n     *\r\n     * //-\r\n     * // Test several permissions at once.\r\n     * //-\r\n     * const tests = [\r\n     *   'storage.buckets.delete',\r\n     *   'storage.buckets.get'\r\n     * ];\r\n     *\r\n     * bucket.iam.testPermissions(tests, function(err, permissions) {\r\n     *   console.log(permissions);\r\n     *   // {\r\n     *   //   \"storage.buckets.delete\": false,\r\n     *   //   \"storage.buckets.get\": true\r\n     *   // }\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * bucket.iam.testPermissions(test).then(function(data) {\r\n     *   const permissions = data[0];\r\n     *   const apiResponse = data[1];\r\n     * });\r\n     * ```\r\n     */\r\n    testPermissions(permissions, optionsOrCallback, callback) {\r\n        if (!Array.isArray(permissions) && typeof permissions !== 'string') {\r\n            throw new Error(IAMExceptionMessages.PERMISSIONS_REQUIRED);\r\n        }\r\n        const { options, callback: cb } = (0, util_js_1.normalize)(optionsOrCallback, callback);\r\n        const permissionsArray = Array.isArray(permissions)\r\n            ? permissions\r\n            : [permissions];\r\n        const req = Object.assign({\r\n            permissions: permissionsArray,\r\n        }, options);\r\n        this.request_({\r\n            uri: '/iam/testPermissions',\r\n            qs: req,\r\n            useQuerystring: true,\r\n        }, (err, resp) => {\r\n            if (err) {\r\n                cb(err, null, resp);\r\n                return;\r\n            }\r\n            const availablePermissions = Array.isArray(resp.permissions)\r\n                ? resp.permissions\r\n                : [];\r\n            const permissionsHash = permissionsArray.reduce((acc, permission) => {\r\n                acc[permission] = availablePermissions.indexOf(permission) > -1;\r\n                return acc;\r\n            }, {});\r\n            cb(null, permissionsHash, resp);\r\n        });\r\n    }\r\n}\r\nexports.Iam = Iam;\r\n/*! Developer Documentation\r\n *\r\n * All async methods (except for streams) will return a Promise in the event\r\n * that a callback is omitted.\r\n */\r\n(0, promisify_1.promisifyAll)(Iam);\r\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,GAAG,GAAGF,OAAO,CAACG,oBAAoB,GAAG,KAAK,CAAC;AACnD,MAAMC,WAAW,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AACtD,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAW,CAAC;AACtC,IAAIF,oBAAoB;AACxB,CAAC,UAAUA,oBAAoB,EAAE;EAC7BA,oBAAoB,CAAC,wBAAwB,CAAC,GAAG,8BAA8B;EAC/EA,oBAAoB,CAAC,sBAAsB,CAAC,GAAG,2BAA2B;AAC9E,CAAC,EAAEA,oBAAoB,KAAKH,OAAO,CAACG,oBAAoB,GAAGA,oBAAoB,GAAG,CAAC,CAAC,CAAC,CAAC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMD,GAAG,CAAC;EACNK,WAAWA,CAACC,MAAM,EAAE;IAChB,IAAI,CAACC,QAAQ,GAAGD,MAAM,CAACE,OAAO,CAACC,IAAI,CAACH,MAAM,CAAC;IAC3C,IAAI,CAACI,WAAW,GAAG,UAAU,GAAGJ,MAAM,CAACK,KAAK,CAAC,CAAC;EAClD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}