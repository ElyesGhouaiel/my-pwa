{"ast":null,"code":"\"use strict\";\n\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HmacKey = void 0;\nconst index_js_1 = require(\"./nodejs-common/index.js\");\nconst storage_js_1 = require(\"./storage.js\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\n/**\r\n * The API-formatted resource description of the HMAC key.\r\n *\r\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\r\n * latest record, call the `getMetadata()` method.\r\n *\r\n * @name HmacKey#metadata\r\n * @type {object}\r\n */\n/**\r\n * An HmacKey object contains metadata of an HMAC key created from a\r\n * service account through the {@link Storage} client using\r\n * {@link Storage#createHmacKey}.\r\n *\r\n * See {@link https://cloud.google.com/storage/docs/authentication/hmackeys| HMAC keys documentation}\r\n *\r\n * @class\r\n */\nclass HmacKey extends index_js_1.ServiceObject {\n  /**\r\n   * @typedef {object} HmacKeyOptions\r\n   * @property {string} [projectId] The project ID of the project that owns\r\n   *     the service account of the requested HMAC key. If not provided,\r\n   *     the project ID used to instantiate the Storage client will be used.\r\n   */\n  /**\r\n   * Constructs an HmacKey object.\r\n   *\r\n   * Note: this only create a local reference to an HMAC key, to create\r\n   * an HMAC key, use {@link Storage#createHmacKey}.\r\n   *\r\n   * @param {Storage} storage The Storage instance this HMAC key is\r\n   *     attached to.\r\n   * @param {string} accessId The unique accessId for this HMAC key.\r\n   * @param {HmacKeyOptions} options Constructor configurations.\r\n   * @example\r\n   * ```\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const hmacKey = storage.hmacKey('access-id');\r\n   * ```\r\n   */\n  constructor(storage, accessId, options) {\n    const methods = {\n      /**\r\n       * @typedef {object} DeleteHmacKeyOptions\r\n       * @property {string} [userProject] This parameter is currently ignored.\r\n       */\n      /**\r\n       * @typedef {array} DeleteHmacKeyResponse\r\n       * @property {object} 0 The full API response.\r\n       */\n      /**\r\n       * @callback DeleteHmacKeyCallback\r\n       * @param {?Error} err Request error, if any.\r\n       * @param {object} apiResponse The full API response.\r\n       */\n      /**\r\n       * Deletes an HMAC key.\r\n       * Key state must be set to `INACTIVE` prior to deletion.\r\n       * Caution: HMAC keys cannot be recovered once you delete them.\r\n       *\r\n       * The authenticated user must have `storage.hmacKeys.delete` permission for the project in which the key exists.\r\n       *\r\n       * @method HmacKey#delete\r\n       * @param {DeleteHmacKeyOptions} [options] Configuration options.\r\n       * @param {DeleteHmacKeyCallback} [callback] Callback function.\r\n       * @returns {Promise<DeleteHmacKeyResponse>}\r\n       *\r\n       * @example\r\n       * ```\r\n       * const {Storage} = require('@google-cloud/storage');\r\n       * const storage = new Storage();\r\n       *\r\n       * //-\r\n       * // Delete HMAC key after making the key inactive.\r\n       * //-\r\n       * const hmacKey = storage.hmacKey('ACCESS_ID');\r\n       * hmacKey.setMetadata({state: 'INACTIVE'}, (err, hmacKeyMetadata) => {\r\n       *     if (err) {\r\n       *       // The request was an error.\r\n       *       console.error(err);\r\n       *       return;\r\n       *     }\r\n       *     hmacKey.delete((err) => {\r\n       *       if (err) {\r\n       *         console.error(err);\r\n       *         return;\r\n       *       }\r\n       *       // The HMAC key is deleted.\r\n       *     });\r\n       *   });\r\n       *\r\n       * //-\r\n       * // If the callback is omitted, a promise is returned.\r\n       * //-\r\n       * const hmacKey = storage.hmacKey('ACCESS_ID');\r\n       * hmacKey\r\n       *   .setMetadata({state: 'INACTIVE'})\r\n       *   .then(() => {\r\n       *     return hmacKey.delete();\r\n       *   });\r\n       * ```\r\n       */\n      delete: true,\n      /**\r\n       * @callback GetHmacKeyCallback\r\n       * @param {?Error} err Request error, if any.\r\n       * @param {HmacKey} hmacKey this {@link HmacKey} instance.\r\n       * @param {object} apiResponse The full API response.\r\n       */\n      /**\r\n       * @typedef {array} GetHmacKeyResponse\r\n       * @property {HmacKey} 0 This {@link HmacKey} instance.\r\n       * @property {object} 1 The full API response.\r\n       */\n      /**\r\n       * @typedef {object} GetHmacKeyOptions\r\n       * @property {string} [userProject] This parameter is currently ignored.\r\n       */\n      /**\r\n       * Retrieves and populate an HMAC key's metadata, and return\r\n       * this {@link HmacKey} instance.\r\n       *\r\n       * HmacKey.get() does not give the HMAC key secret, as\r\n       * it is only returned on creation.\r\n       *\r\n       * The authenticated user must have `storage.hmacKeys.get` permission\r\n       * for the project in which the key exists.\r\n       *\r\n       * @method HmacKey#get\r\n       * @param {GetHmacKeyOptions} [options] Configuration options.\r\n       * @param {GetHmacKeyCallback} [callback] Callback function.\r\n       * @returns {Promise<GetHmacKeyResponse>}\r\n       *\r\n       * @example\r\n       * ```\r\n       * const {Storage} = require('@google-cloud/storage');\r\n       * const storage = new Storage();\r\n       *\r\n       * //-\r\n       * // Get the HmacKey's Metadata.\r\n       * //-\r\n       * storage.hmacKey('ACCESS_ID')\r\n       *   .get((err, hmacKey) => {\r\n       *     if (err) {\r\n       *       // The request was an error.\r\n       *       console.error(err);\r\n       *       return;\r\n       *     }\r\n       *     // do something with the returned HmacKey object.\r\n       *   });\r\n       *\r\n       * //-\r\n       * // If the callback is omitted, a promise is returned.\r\n       * //-\r\n       * storage.hmacKey('ACCESS_ID')\r\n       *   .get()\r\n       *   .then((data) => {\r\n       *     const hmacKey = data[0];\r\n       *   });\r\n       * ```\r\n       */\n      get: true,\n      /**\r\n       * @typedef {object} GetHmacKeyMetadataOptions\r\n       * @property {string} [userProject] This parameter is currently ignored.\r\n       */\n      /**\r\n       * Retrieves and populate an HMAC key's metadata, and return\r\n       * the HMAC key's metadata as an object.\r\n       *\r\n       * HmacKey.getMetadata() does not give the HMAC key secret, as\r\n       * it is only returned on creation.\r\n       *\r\n       * The authenticated user must have `storage.hmacKeys.get` permission\r\n       * for the project in which the key exists.\r\n       *\r\n       * @method HmacKey#getMetadata\r\n       * @param {GetHmacKeyMetadataOptions} [options] Configuration options.\r\n       * @param {HmacKeyMetadataCallback} [callback] Callback function.\r\n       * @returns {Promise<HmacKeyMetadataResponse>}\r\n       *\r\n       * @example\r\n       * ```\r\n       * const {Storage} = require('@google-cloud/storage');\r\n       * const storage = new Storage();\r\n       *\r\n       * //-\r\n       * // Get the HmacKey's metadata and populate to the metadata property.\r\n       * //-\r\n       * storage.hmacKey('ACCESS_ID')\r\n       *   .getMetadata((err, hmacKeyMetadata) => {\r\n       *     if (err) {\r\n       *       // The request was an error.\r\n       *       console.error(err);\r\n       *       return;\r\n       *     }\r\n       *     console.log(hmacKeyMetadata);\r\n       *   });\r\n       *\r\n       * //-\r\n       * // If the callback is omitted, a promise is returned.\r\n       * //-\r\n       * storage.hmacKey('ACCESS_ID')\r\n       *   .getMetadata()\r\n       *   .then((data) => {\r\n       *     const hmacKeyMetadata = data[0];\r\n       *     console.log(hmacKeyMetadata);\r\n       *   });\r\n       * ```\r\n       */\n      getMetadata: true,\n      /**\r\n       * @typedef {object} SetHmacKeyMetadata Subset of {@link HmacKeyMetadata} to update.\r\n       * @property {string} state New state of the HmacKey. Either 'ACTIVE' or 'INACTIVE'.\r\n       * @property {string} [etag] Include an etag from a previous get HMAC key request\r\n       *    to perform safe read-modify-write.\r\n       */\n      /**\r\n       * @typedef {object} SetHmacKeyMetadataOptions\r\n       * @property {string} [userProject] This parameter is currently ignored.\r\n       */\n      /**\r\n       * @callback HmacKeyMetadataCallback\r\n       * @param {?Error} err Request error, if any.\r\n       * @param {HmacKeyMetadata} metadata The updated {@link HmacKeyMetadata} object.\r\n       * @param {object} apiResponse The full API response.\r\n       */\n      /**\r\n       * @typedef {array} HmacKeyMetadataResponse\r\n       * @property {HmacKeyMetadata} 0 The updated {@link HmacKeyMetadata} object.\r\n       * @property {object} 1 The full API response.\r\n       */\n      /**\r\n       * Updates the state of an HMAC key. See {@link SetHmacKeyMetadata} for\r\n       * valid states.\r\n       *\r\n       * @method HmacKey#setMetadata\r\n       * @param {SetHmacKeyMetadata} metadata The new metadata.\r\n       * @param {SetHmacKeyMetadataOptions} [options] Configuration options.\r\n       * @param {HmacKeyMetadataCallback} [callback] Callback function.\r\n       * @returns {Promise<HmacKeyMetadataResponse>}\r\n       *\r\n       * @example\r\n       * ```\r\n       * const {Storage} = require('@google-cloud/storage');\r\n       * const storage = new Storage();\r\n       *\r\n       * const metadata = {\r\n       *   state: 'INACTIVE',\r\n       * };\r\n       *\r\n       * storage.hmacKey('ACCESS_ID')\r\n       *   .setMetadata(metadata, (err, hmacKeyMetadata) => {\r\n       *     if (err) {\r\n       *       // The request was an error.\r\n       *       console.error(err);\r\n       *       return;\r\n       *     }\r\n       *     console.log(hmacKeyMetadata);\r\n       *   });\r\n       *\r\n       * //-\r\n       * // If the callback is omitted, a promise is returned.\r\n       * //-\r\n       * storage.hmacKey('ACCESS_ID')\r\n       *   .setMetadata(metadata)\r\n       *   .then((data) => {\r\n       *     const hmacKeyMetadata = data[0];\r\n       *     console.log(hmacKeyMetadata);\r\n       *   });\r\n       * ```\r\n       */\n      setMetadata: {\n        reqOpts: {\n          method: 'PUT'\n        }\n      }\n    };\n    const projectId = options && options.projectId || storage.projectId;\n    super({\n      parent: storage,\n      id: accessId,\n      baseUrl: `/projects/${projectId}/hmacKeys`,\n      methods\n    });\n    this.storage = storage;\n    this.instanceRetryValue = storage.retryOptions.autoRetry;\n  }\n  setMetadata(metadata, optionsOrCallback, cb) {\n    // ETag preconditions are not currently supported. Retries should be disabled if the idempotency strategy is not set to RetryAlways\n    if (this.storage.retryOptions.idempotencyStrategy !== storage_js_1.IdempotencyStrategy.RetryAlways) {\n      this.storage.retryOptions.autoRetry = false;\n    }\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    cb = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n    super.setMetadata(metadata, options).then(resp => cb(null, ...resp)).catch(cb).finally(() => {\n      this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n    });\n  }\n}\nexports.HmacKey = HmacKey;\n/*! Developer Documentation\r\n *\r\n * All async methods (except for streams) will return a Promise in the event\r\n * that a callback is omitted.\r\n */\n(0, promisify_1.promisifyAll)(HmacKey);","map":{"version":3,"names":["Object","defineProperty","exports","value","HmacKey","index_js_1","require","storage_js_1","promisify_1","ServiceObject","constructor","storage","accessId","options","methods","delete","get","getMetadata","setMetadata","reqOpts","method","projectId","parent","id","baseUrl","instanceRetryValue","retryOptions","autoRetry","metadata","optionsOrCallback","cb","idempotencyStrategy","IdempotencyStrategy","RetryAlways","then","resp","catch","finally","promisifyAll"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/@google-cloud/storage/build/cjs/src/hmacKey.js"],"sourcesContent":["\"use strict\";\r\n// Copyright 2019 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.HmacKey = void 0;\r\nconst index_js_1 = require(\"./nodejs-common/index.js\");\r\nconst storage_js_1 = require(\"./storage.js\");\r\nconst promisify_1 = require(\"@google-cloud/promisify\");\r\n/**\r\n * The API-formatted resource description of the HMAC key.\r\n *\r\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\r\n * latest record, call the `getMetadata()` method.\r\n *\r\n * @name HmacKey#metadata\r\n * @type {object}\r\n */\r\n/**\r\n * An HmacKey object contains metadata of an HMAC key created from a\r\n * service account through the {@link Storage} client using\r\n * {@link Storage#createHmacKey}.\r\n *\r\n * See {@link https://cloud.google.com/storage/docs/authentication/hmackeys| HMAC keys documentation}\r\n *\r\n * @class\r\n */\r\nclass HmacKey extends index_js_1.ServiceObject {\r\n    /**\r\n     * @typedef {object} HmacKeyOptions\r\n     * @property {string} [projectId] The project ID of the project that owns\r\n     *     the service account of the requested HMAC key. If not provided,\r\n     *     the project ID used to instantiate the Storage client will be used.\r\n     */\r\n    /**\r\n     * Constructs an HmacKey object.\r\n     *\r\n     * Note: this only create a local reference to an HMAC key, to create\r\n     * an HMAC key, use {@link Storage#createHmacKey}.\r\n     *\r\n     * @param {Storage} storage The Storage instance this HMAC key is\r\n     *     attached to.\r\n     * @param {string} accessId The unique accessId for this HMAC key.\r\n     * @param {HmacKeyOptions} options Constructor configurations.\r\n     * @example\r\n     * ```\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const hmacKey = storage.hmacKey('access-id');\r\n     * ```\r\n     */\r\n    constructor(storage, accessId, options) {\r\n        const methods = {\r\n            /**\r\n             * @typedef {object} DeleteHmacKeyOptions\r\n             * @property {string} [userProject] This parameter is currently ignored.\r\n             */\r\n            /**\r\n             * @typedef {array} DeleteHmacKeyResponse\r\n             * @property {object} 0 The full API response.\r\n             */\r\n            /**\r\n             * @callback DeleteHmacKeyCallback\r\n             * @param {?Error} err Request error, if any.\r\n             * @param {object} apiResponse The full API response.\r\n             */\r\n            /**\r\n             * Deletes an HMAC key.\r\n             * Key state must be set to `INACTIVE` prior to deletion.\r\n             * Caution: HMAC keys cannot be recovered once you delete them.\r\n             *\r\n             * The authenticated user must have `storage.hmacKeys.delete` permission for the project in which the key exists.\r\n             *\r\n             * @method HmacKey#delete\r\n             * @param {DeleteHmacKeyOptions} [options] Configuration options.\r\n             * @param {DeleteHmacKeyCallback} [callback] Callback function.\r\n             * @returns {Promise<DeleteHmacKeyResponse>}\r\n             *\r\n             * @example\r\n             * ```\r\n             * const {Storage} = require('@google-cloud/storage');\r\n             * const storage = new Storage();\r\n             *\r\n             * //-\r\n             * // Delete HMAC key after making the key inactive.\r\n             * //-\r\n             * const hmacKey = storage.hmacKey('ACCESS_ID');\r\n             * hmacKey.setMetadata({state: 'INACTIVE'}, (err, hmacKeyMetadata) => {\r\n             *     if (err) {\r\n             *       // The request was an error.\r\n             *       console.error(err);\r\n             *       return;\r\n             *     }\r\n             *     hmacKey.delete((err) => {\r\n             *       if (err) {\r\n             *         console.error(err);\r\n             *         return;\r\n             *       }\r\n             *       // The HMAC key is deleted.\r\n             *     });\r\n             *   });\r\n             *\r\n             * //-\r\n             * // If the callback is omitted, a promise is returned.\r\n             * //-\r\n             * const hmacKey = storage.hmacKey('ACCESS_ID');\r\n             * hmacKey\r\n             *   .setMetadata({state: 'INACTIVE'})\r\n             *   .then(() => {\r\n             *     return hmacKey.delete();\r\n             *   });\r\n             * ```\r\n             */\r\n            delete: true,\r\n            /**\r\n             * @callback GetHmacKeyCallback\r\n             * @param {?Error} err Request error, if any.\r\n             * @param {HmacKey} hmacKey this {@link HmacKey} instance.\r\n             * @param {object} apiResponse The full API response.\r\n             */\r\n            /**\r\n             * @typedef {array} GetHmacKeyResponse\r\n             * @property {HmacKey} 0 This {@link HmacKey} instance.\r\n             * @property {object} 1 The full API response.\r\n             */\r\n            /**\r\n             * @typedef {object} GetHmacKeyOptions\r\n             * @property {string} [userProject] This parameter is currently ignored.\r\n             */\r\n            /**\r\n             * Retrieves and populate an HMAC key's metadata, and return\r\n             * this {@link HmacKey} instance.\r\n             *\r\n             * HmacKey.get() does not give the HMAC key secret, as\r\n             * it is only returned on creation.\r\n             *\r\n             * The authenticated user must have `storage.hmacKeys.get` permission\r\n             * for the project in which the key exists.\r\n             *\r\n             * @method HmacKey#get\r\n             * @param {GetHmacKeyOptions} [options] Configuration options.\r\n             * @param {GetHmacKeyCallback} [callback] Callback function.\r\n             * @returns {Promise<GetHmacKeyResponse>}\r\n             *\r\n             * @example\r\n             * ```\r\n             * const {Storage} = require('@google-cloud/storage');\r\n             * const storage = new Storage();\r\n             *\r\n             * //-\r\n             * // Get the HmacKey's Metadata.\r\n             * //-\r\n             * storage.hmacKey('ACCESS_ID')\r\n             *   .get((err, hmacKey) => {\r\n             *     if (err) {\r\n             *       // The request was an error.\r\n             *       console.error(err);\r\n             *       return;\r\n             *     }\r\n             *     // do something with the returned HmacKey object.\r\n             *   });\r\n             *\r\n             * //-\r\n             * // If the callback is omitted, a promise is returned.\r\n             * //-\r\n             * storage.hmacKey('ACCESS_ID')\r\n             *   .get()\r\n             *   .then((data) => {\r\n             *     const hmacKey = data[0];\r\n             *   });\r\n             * ```\r\n             */\r\n            get: true,\r\n            /**\r\n             * @typedef {object} GetHmacKeyMetadataOptions\r\n             * @property {string} [userProject] This parameter is currently ignored.\r\n             */\r\n            /**\r\n             * Retrieves and populate an HMAC key's metadata, and return\r\n             * the HMAC key's metadata as an object.\r\n             *\r\n             * HmacKey.getMetadata() does not give the HMAC key secret, as\r\n             * it is only returned on creation.\r\n             *\r\n             * The authenticated user must have `storage.hmacKeys.get` permission\r\n             * for the project in which the key exists.\r\n             *\r\n             * @method HmacKey#getMetadata\r\n             * @param {GetHmacKeyMetadataOptions} [options] Configuration options.\r\n             * @param {HmacKeyMetadataCallback} [callback] Callback function.\r\n             * @returns {Promise<HmacKeyMetadataResponse>}\r\n             *\r\n             * @example\r\n             * ```\r\n             * const {Storage} = require('@google-cloud/storage');\r\n             * const storage = new Storage();\r\n             *\r\n             * //-\r\n             * // Get the HmacKey's metadata and populate to the metadata property.\r\n             * //-\r\n             * storage.hmacKey('ACCESS_ID')\r\n             *   .getMetadata((err, hmacKeyMetadata) => {\r\n             *     if (err) {\r\n             *       // The request was an error.\r\n             *       console.error(err);\r\n             *       return;\r\n             *     }\r\n             *     console.log(hmacKeyMetadata);\r\n             *   });\r\n             *\r\n             * //-\r\n             * // If the callback is omitted, a promise is returned.\r\n             * //-\r\n             * storage.hmacKey('ACCESS_ID')\r\n             *   .getMetadata()\r\n             *   .then((data) => {\r\n             *     const hmacKeyMetadata = data[0];\r\n             *     console.log(hmacKeyMetadata);\r\n             *   });\r\n             * ```\r\n             */\r\n            getMetadata: true,\r\n            /**\r\n             * @typedef {object} SetHmacKeyMetadata Subset of {@link HmacKeyMetadata} to update.\r\n             * @property {string} state New state of the HmacKey. Either 'ACTIVE' or 'INACTIVE'.\r\n             * @property {string} [etag] Include an etag from a previous get HMAC key request\r\n             *    to perform safe read-modify-write.\r\n             */\r\n            /**\r\n             * @typedef {object} SetHmacKeyMetadataOptions\r\n             * @property {string} [userProject] This parameter is currently ignored.\r\n             */\r\n            /**\r\n             * @callback HmacKeyMetadataCallback\r\n             * @param {?Error} err Request error, if any.\r\n             * @param {HmacKeyMetadata} metadata The updated {@link HmacKeyMetadata} object.\r\n             * @param {object} apiResponse The full API response.\r\n             */\r\n            /**\r\n             * @typedef {array} HmacKeyMetadataResponse\r\n             * @property {HmacKeyMetadata} 0 The updated {@link HmacKeyMetadata} object.\r\n             * @property {object} 1 The full API response.\r\n             */\r\n            /**\r\n             * Updates the state of an HMAC key. See {@link SetHmacKeyMetadata} for\r\n             * valid states.\r\n             *\r\n             * @method HmacKey#setMetadata\r\n             * @param {SetHmacKeyMetadata} metadata The new metadata.\r\n             * @param {SetHmacKeyMetadataOptions} [options] Configuration options.\r\n             * @param {HmacKeyMetadataCallback} [callback] Callback function.\r\n             * @returns {Promise<HmacKeyMetadataResponse>}\r\n             *\r\n             * @example\r\n             * ```\r\n             * const {Storage} = require('@google-cloud/storage');\r\n             * const storage = new Storage();\r\n             *\r\n             * const metadata = {\r\n             *   state: 'INACTIVE',\r\n             * };\r\n             *\r\n             * storage.hmacKey('ACCESS_ID')\r\n             *   .setMetadata(metadata, (err, hmacKeyMetadata) => {\r\n             *     if (err) {\r\n             *       // The request was an error.\r\n             *       console.error(err);\r\n             *       return;\r\n             *     }\r\n             *     console.log(hmacKeyMetadata);\r\n             *   });\r\n             *\r\n             * //-\r\n             * // If the callback is omitted, a promise is returned.\r\n             * //-\r\n             * storage.hmacKey('ACCESS_ID')\r\n             *   .setMetadata(metadata)\r\n             *   .then((data) => {\r\n             *     const hmacKeyMetadata = data[0];\r\n             *     console.log(hmacKeyMetadata);\r\n             *   });\r\n             * ```\r\n             */\r\n            setMetadata: {\r\n                reqOpts: {\r\n                    method: 'PUT',\r\n                },\r\n            },\r\n        };\r\n        const projectId = (options && options.projectId) || storage.projectId;\r\n        super({\r\n            parent: storage,\r\n            id: accessId,\r\n            baseUrl: `/projects/${projectId}/hmacKeys`,\r\n            methods,\r\n        });\r\n        this.storage = storage;\r\n        this.instanceRetryValue = storage.retryOptions.autoRetry;\r\n    }\r\n    setMetadata(metadata, optionsOrCallback, cb) {\r\n        // ETag preconditions are not currently supported. Retries should be disabled if the idempotency strategy is not set to RetryAlways\r\n        if (this.storage.retryOptions.idempotencyStrategy !==\r\n            storage_js_1.IdempotencyStrategy.RetryAlways) {\r\n            this.storage.retryOptions.autoRetry = false;\r\n        }\r\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\r\n        cb =\r\n            typeof optionsOrCallback === 'function'\r\n                ? optionsOrCallback\r\n                : cb;\r\n        super\r\n            .setMetadata(metadata, options)\r\n            .then(resp => cb(null, ...resp))\r\n            .catch(cb)\r\n            .finally(() => {\r\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\r\n        });\r\n    }\r\n}\r\nexports.HmacKey = HmacKey;\r\n/*! Developer Documentation\r\n *\r\n * All async methods (except for streams) will return a Promise in the event\r\n * that a callback is omitted.\r\n */\r\n(0, promisify_1.promisifyAll)(HmacKey);\r\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxB,MAAMC,UAAU,GAAGC,OAAO,CAAC,0BAA0B,CAAC;AACtD,MAAMC,YAAY,GAAGD,OAAO,CAAC,cAAc,CAAC;AAC5C,MAAME,WAAW,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,OAAO,SAASC,UAAU,CAACI,aAAa,CAAC;EAC3C;AACJ;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACC,OAAO,EAAEC,QAAQ,EAAEC,OAAO,EAAE;IACpC,MAAMC,OAAO,GAAG;MACZ;AACZ;AACA;AACA;MACY;AACZ;AACA;AACA;MACY;AACZ;AACA;AACA;AACA;MACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,MAAM,EAAE,IAAI;MACZ;AACZ;AACA;AACA;AACA;AACA;MACY;AACZ;AACA;AACA;AACA;MACY;AACZ;AACA;AACA;MACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,GAAG,EAAE,IAAI;MACT;AACZ;AACA;AACA;MACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,WAAW,EAAE,IAAI;MACjB;AACZ;AACA;AACA;AACA;AACA;MACY;AACZ;AACA;AACA;MACY;AACZ;AACA;AACA;AACA;AACA;MACY;AACZ;AACA;AACA;AACA;MACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,WAAW,EAAE;QACTC,OAAO,EAAE;UACLC,MAAM,EAAE;QACZ;MACJ;IACJ,CAAC;IACD,MAAMC,SAAS,GAAIR,OAAO,IAAIA,OAAO,CAACQ,SAAS,IAAKV,OAAO,CAACU,SAAS;IACrE,KAAK,CAAC;MACFC,MAAM,EAAEX,OAAO;MACfY,EAAE,EAAEX,QAAQ;MACZY,OAAO,EAAE,aAAaH,SAAS,WAAW;MAC1CP;IACJ,CAAC,CAAC;IACF,IAAI,CAACH,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACc,kBAAkB,GAAGd,OAAO,CAACe,YAAY,CAACC,SAAS;EAC5D;EACAT,WAAWA,CAACU,QAAQ,EAAEC,iBAAiB,EAAEC,EAAE,EAAE;IACzC;IACA,IAAI,IAAI,CAACnB,OAAO,CAACe,YAAY,CAACK,mBAAmB,KAC7CxB,YAAY,CAACyB,mBAAmB,CAACC,WAAW,EAAE;MAC9C,IAAI,CAACtB,OAAO,CAACe,YAAY,CAACC,SAAS,GAAG,KAAK;IAC/C;IACA,MAAMd,OAAO,GAAG,OAAOgB,iBAAiB,KAAK,QAAQ,GAAGA,iBAAiB,GAAG,CAAC,CAAC;IAC9EC,EAAE,GACE,OAAOD,iBAAiB,KAAK,UAAU,GACjCA,iBAAiB,GACjBC,EAAE;IACZ,KAAK,CACAZ,WAAW,CAACU,QAAQ,EAAEf,OAAO,CAAC,CAC9BqB,IAAI,CAACC,IAAI,IAAIL,EAAE,CAAC,IAAI,EAAE,GAAGK,IAAI,CAAC,CAAC,CAC/BC,KAAK,CAACN,EAAE,CAAC,CACTO,OAAO,CAAC,MAAM;MACf,IAAI,CAAC1B,OAAO,CAACe,YAAY,CAACC,SAAS,GAAG,IAAI,CAACF,kBAAkB;IACjE,CAAC,CAAC;EACN;AACJ;AACAvB,OAAO,CAACE,OAAO,GAAGA,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,EAAEI,WAAW,CAAC8B,YAAY,EAAElC,OAAO,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}