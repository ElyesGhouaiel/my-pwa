{"ast":null,"code":"\"use strict\";\n\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JWT = void 0;\nconst gtoken_1 = require(\"gtoken\");\nconst jwtaccess_1 = require(\"./jwtaccess\");\nconst oauth2client_1 = require(\"./oauth2client\");\nconst authclient_1 = require(\"./authclient\");\nclass JWT extends oauth2client_1.OAuth2Client {\n  constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n    const opts = optionsOrEmail && typeof optionsOrEmail === 'object' ? optionsOrEmail : {\n      email: optionsOrEmail,\n      keyFile,\n      key,\n      keyId,\n      scopes,\n      subject\n    };\n    super(opts);\n    this.email = opts.email;\n    this.keyFile = opts.keyFile;\n    this.key = opts.key;\n    this.keyId = opts.keyId;\n    this.scopes = opts.scopes;\n    this.subject = opts.subject;\n    this.additionalClaims = opts.additionalClaims;\n    // Start with an expired refresh token, which will automatically be\n    // refreshed before the first API call is made.\n    this.credentials = {\n      refresh_token: 'jwt-placeholder',\n      expiry_date: 1\n    };\n  }\n  /**\r\n   * Creates a copy of the credential with the specified scopes.\r\n   * @param scopes List of requested scopes or a single scope.\r\n   * @return The cloned instance.\r\n   */\n  createScoped(scopes) {\n    const jwt = new JWT(this);\n    jwt.scopes = scopes;\n    return jwt;\n  }\n  /**\r\n   * Obtains the metadata to be sent with the request.\r\n   *\r\n   * @param url the URI being authorized.\r\n   */\n  async getRequestMetadataAsync(url) {\n    url = this.defaultServicePath ? `https://${this.defaultServicePath}/` : url;\n    const useSelfSignedJWT = !this.hasUserScopes() && url || this.useJWTAccessWithScope && this.hasAnyScopes() || this.universeDomain !== authclient_1.DEFAULT_UNIVERSE;\n    if (this.subject && this.universeDomain !== authclient_1.DEFAULT_UNIVERSE) {\n      throw new RangeError(`Service Account user is configured for the credential. Domain-wide delegation is not supported in universes other than ${authclient_1.DEFAULT_UNIVERSE}`);\n    }\n    if (!this.apiKey && useSelfSignedJWT) {\n      if (this.additionalClaims && this.additionalClaims.target_audience) {\n        const {\n          tokens\n        } = await this.refreshToken();\n        return {\n          headers: this.addSharedMetadataHeaders({\n            Authorization: `Bearer ${tokens.id_token}`\n          })\n        };\n      } else {\n        // no scopes have been set, but a uri has been provided. Use JWTAccess\n        // credentials.\n        if (!this.access) {\n          this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);\n        }\n        let scopes;\n        if (this.hasUserScopes()) {\n          scopes = this.scopes;\n        } else if (!url) {\n          scopes = this.defaultScopes;\n        }\n        const useScopes = this.useJWTAccessWithScope || this.universeDomain !== authclient_1.DEFAULT_UNIVERSE;\n        const headers = await this.access.getRequestHeaders(url !== null && url !== void 0 ? url : undefined, this.additionalClaims,\n        // Scopes take precedent over audience for signing,\n        // so we only provide them if `useJWTAccessWithScope` is on or\n        // if we are in a non-default universe\n        useScopes ? scopes : undefined);\n        return {\n          headers: this.addSharedMetadataHeaders(headers)\n        };\n      }\n    } else if (this.hasAnyScopes() || this.apiKey) {\n      return super.getRequestMetadataAsync(url);\n    } else {\n      // If no audience, apiKey, or scopes are provided, we should not attempt\n      // to populate any headers:\n      return {\n        headers: {}\n      };\n    }\n  }\n  /**\r\n   * Fetches an ID token.\r\n   * @param targetAudience the audience for the fetched ID token.\r\n   */\n  async fetchIdToken(targetAudience) {\n    // Create a new gToken for fetching an ID token\n    const gtoken = new gtoken_1.GoogleToken({\n      iss: this.email,\n      sub: this.subject,\n      scope: this.scopes || this.defaultScopes,\n      keyFile: this.keyFile,\n      key: this.key,\n      additionalClaims: {\n        target_audience: targetAudience\n      },\n      transporter: this.transporter\n    });\n    await gtoken.getToken({\n      forceRefresh: true\n    });\n    if (!gtoken.idToken) {\n      throw new Error('Unknown error: Failed to fetch ID token');\n    }\n    return gtoken.idToken;\n  }\n  /**\r\n   * Determine if there are currently scopes available.\r\n   */\n  hasUserScopes() {\n    if (!this.scopes) {\n      return false;\n    }\n    return this.scopes.length > 0;\n  }\n  /**\r\n   * Are there any default or user scopes defined.\r\n   */\n  hasAnyScopes() {\n    if (this.scopes && this.scopes.length > 0) return true;\n    if (this.defaultScopes && this.defaultScopes.length > 0) return true;\n    return false;\n  }\n  authorize(callback) {\n    if (callback) {\n      this.authorizeAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.authorizeAsync();\n    }\n  }\n  async authorizeAsync() {\n    const result = await this.refreshToken();\n    if (!result) {\n      throw new Error('No result returned');\n    }\n    this.credentials = result.tokens;\n    this.credentials.refresh_token = 'jwt-placeholder';\n    this.key = this.gtoken.key;\n    this.email = this.gtoken.iss;\n    return result.tokens;\n  }\n  /**\r\n   * Refreshes the access token.\r\n   * @param refreshToken ignored\r\n   * @private\r\n   */\n  async refreshTokenNoCache(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  refreshToken) {\n    const gtoken = this.createGToken();\n    const token = await gtoken.getToken({\n      forceRefresh: this.isTokenExpiring()\n    });\n    const tokens = {\n      access_token: token.access_token,\n      token_type: 'Bearer',\n      expiry_date: gtoken.expiresAt,\n      id_token: gtoken.idToken\n    };\n    this.emit('tokens', tokens);\n    return {\n      res: null,\n      tokens\n    };\n  }\n  /**\r\n   * Create a gToken if it doesn't already exist.\r\n   */\n  createGToken() {\n    if (!this.gtoken) {\n      this.gtoken = new gtoken_1.GoogleToken({\n        iss: this.email,\n        sub: this.subject,\n        scope: this.scopes || this.defaultScopes,\n        keyFile: this.keyFile,\n        key: this.key,\n        additionalClaims: this.additionalClaims,\n        transporter: this.transporter\n      });\n    }\n    return this.gtoken;\n  }\n  /**\r\n   * Create a JWT credentials instance using the given input options.\r\n   * @param json The input object.\r\n   */\n  fromJSON(json) {\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the service account auth settings.');\n    }\n    if (!json.client_email) {\n      throw new Error('The incoming JSON object does not contain a client_email field');\n    }\n    if (!json.private_key) {\n      throw new Error('The incoming JSON object does not contain a private_key field');\n    }\n    // Extract the relevant information from the json key file.\n    this.email = json.client_email;\n    this.key = json.private_key;\n    this.keyId = json.private_key_id;\n    this.projectId = json.project_id;\n    this.quotaProjectId = json.quota_project_id;\n    this.universeDomain = json.universe_domain || this.universeDomain;\n  }\n  fromStream(inputStream, callback) {\n    if (callback) {\n      this.fromStreamAsync(inputStream).then(() => callback(), callback);\n    } else {\n      return this.fromStreamAsync(inputStream);\n    }\n  }\n  fromStreamAsync(inputStream) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        throw new Error('Must pass in a stream containing the service account auth settings.');\n      }\n      let s = '';\n      inputStream.setEncoding('utf8').on('error', reject).on('data', chunk => s += chunk).on('end', () => {\n        try {\n          const data = JSON.parse(s);\n          this.fromJSON(data);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n  /**\r\n   * Creates a JWT credentials instance using an API Key for authentication.\r\n   * @param apiKey The API Key in string form.\r\n   */\n  fromAPIKey(apiKey) {\n    if (typeof apiKey !== 'string') {\n      throw new Error('Must provide an API Key string.');\n    }\n    this.apiKey = apiKey;\n  }\n  /**\r\n   * Using the key or keyFile on the JWT client, obtain an object that contains\r\n   * the key and the client email.\r\n   */\n  async getCredentials() {\n    if (this.key) {\n      return {\n        private_key: this.key,\n        client_email: this.email\n      };\n    } else if (this.keyFile) {\n      const gtoken = this.createGToken();\n      const creds = await gtoken.getCredentials(this.keyFile);\n      return {\n        private_key: creds.privateKey,\n        client_email: creds.clientEmail\n      };\n    }\n    throw new Error('A key or a keyFile must be provided to getCredentials.');\n  }\n}\nexports.JWT = JWT;","map":{"version":3,"names":["Object","defineProperty","exports","value","JWT","gtoken_1","require","jwtaccess_1","oauth2client_1","authclient_1","OAuth2Client","constructor","optionsOrEmail","keyFile","key","scopes","subject","keyId","opts","email","additionalClaims","credentials","refresh_token","expiry_date","createScoped","jwt","getRequestMetadataAsync","url","defaultServicePath","useSelfSignedJWT","hasUserScopes","useJWTAccessWithScope","hasAnyScopes","universeDomain","DEFAULT_UNIVERSE","RangeError","apiKey","target_audience","tokens","refreshToken","headers","addSharedMetadataHeaders","Authorization","id_token","access","JWTAccess","eagerRefreshThresholdMillis","defaultScopes","useScopes","getRequestHeaders","undefined","fetchIdToken","targetAudience","gtoken","GoogleToken","iss","sub","scope","transporter","getToken","forceRefresh","idToken","Error","length","authorize","callback","authorizeAsync","then","r","result","refreshTokenNoCache","createGToken","token","isTokenExpiring","access_token","token_type","expiresAt","emit","res","fromJSON","json","client_email","private_key","private_key_id","projectId","project_id","quotaProjectId","quota_project_id","universe_domain","fromStream","inputStream","fromStreamAsync","Promise","resolve","reject","s","setEncoding","on","chunk","data","JSON","parse","e","fromAPIKey","getCredentials","creds","privateKey","clientEmail"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/google-auth-library/build/src/auth/jwtclient.js"],"sourcesContent":["\"use strict\";\r\n// Copyright 2013 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.JWT = void 0;\r\nconst gtoken_1 = require(\"gtoken\");\r\nconst jwtaccess_1 = require(\"./jwtaccess\");\r\nconst oauth2client_1 = require(\"./oauth2client\");\r\nconst authclient_1 = require(\"./authclient\");\r\nclass JWT extends oauth2client_1.OAuth2Client {\r\n    constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\r\n        const opts = optionsOrEmail && typeof optionsOrEmail === 'object'\r\n            ? optionsOrEmail\r\n            : { email: optionsOrEmail, keyFile, key, keyId, scopes, subject };\r\n        super(opts);\r\n        this.email = opts.email;\r\n        this.keyFile = opts.keyFile;\r\n        this.key = opts.key;\r\n        this.keyId = opts.keyId;\r\n        this.scopes = opts.scopes;\r\n        this.subject = opts.subject;\r\n        this.additionalClaims = opts.additionalClaims;\r\n        // Start with an expired refresh token, which will automatically be\r\n        // refreshed before the first API call is made.\r\n        this.credentials = { refresh_token: 'jwt-placeholder', expiry_date: 1 };\r\n    }\r\n    /**\r\n     * Creates a copy of the credential with the specified scopes.\r\n     * @param scopes List of requested scopes or a single scope.\r\n     * @return The cloned instance.\r\n     */\r\n    createScoped(scopes) {\r\n        const jwt = new JWT(this);\r\n        jwt.scopes = scopes;\r\n        return jwt;\r\n    }\r\n    /**\r\n     * Obtains the metadata to be sent with the request.\r\n     *\r\n     * @param url the URI being authorized.\r\n     */\r\n    async getRequestMetadataAsync(url) {\r\n        url = this.defaultServicePath ? `https://${this.defaultServicePath}/` : url;\r\n        const useSelfSignedJWT = (!this.hasUserScopes() && url) ||\r\n            (this.useJWTAccessWithScope && this.hasAnyScopes()) ||\r\n            this.universeDomain !== authclient_1.DEFAULT_UNIVERSE;\r\n        if (this.subject && this.universeDomain !== authclient_1.DEFAULT_UNIVERSE) {\r\n            throw new RangeError(`Service Account user is configured for the credential. Domain-wide delegation is not supported in universes other than ${authclient_1.DEFAULT_UNIVERSE}`);\r\n        }\r\n        if (!this.apiKey && useSelfSignedJWT) {\r\n            if (this.additionalClaims &&\r\n                this.additionalClaims.target_audience) {\r\n                const { tokens } = await this.refreshToken();\r\n                return {\r\n                    headers: this.addSharedMetadataHeaders({\r\n                        Authorization: `Bearer ${tokens.id_token}`,\r\n                    }),\r\n                };\r\n            }\r\n            else {\r\n                // no scopes have been set, but a uri has been provided. Use JWTAccess\r\n                // credentials.\r\n                if (!this.access) {\r\n                    this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);\r\n                }\r\n                let scopes;\r\n                if (this.hasUserScopes()) {\r\n                    scopes = this.scopes;\r\n                }\r\n                else if (!url) {\r\n                    scopes = this.defaultScopes;\r\n                }\r\n                const useScopes = this.useJWTAccessWithScope ||\r\n                    this.universeDomain !== authclient_1.DEFAULT_UNIVERSE;\r\n                const headers = await this.access.getRequestHeaders(url !== null && url !== void 0 ? url : undefined, this.additionalClaims, \r\n                // Scopes take precedent over audience for signing,\r\n                // so we only provide them if `useJWTAccessWithScope` is on or\r\n                // if we are in a non-default universe\r\n                useScopes ? scopes : undefined);\r\n                return { headers: this.addSharedMetadataHeaders(headers) };\r\n            }\r\n        }\r\n        else if (this.hasAnyScopes() || this.apiKey) {\r\n            return super.getRequestMetadataAsync(url);\r\n        }\r\n        else {\r\n            // If no audience, apiKey, or scopes are provided, we should not attempt\r\n            // to populate any headers:\r\n            return { headers: {} };\r\n        }\r\n    }\r\n    /**\r\n     * Fetches an ID token.\r\n     * @param targetAudience the audience for the fetched ID token.\r\n     */\r\n    async fetchIdToken(targetAudience) {\r\n        // Create a new gToken for fetching an ID token\r\n        const gtoken = new gtoken_1.GoogleToken({\r\n            iss: this.email,\r\n            sub: this.subject,\r\n            scope: this.scopes || this.defaultScopes,\r\n            keyFile: this.keyFile,\r\n            key: this.key,\r\n            additionalClaims: { target_audience: targetAudience },\r\n            transporter: this.transporter,\r\n        });\r\n        await gtoken.getToken({\r\n            forceRefresh: true,\r\n        });\r\n        if (!gtoken.idToken) {\r\n            throw new Error('Unknown error: Failed to fetch ID token');\r\n        }\r\n        return gtoken.idToken;\r\n    }\r\n    /**\r\n     * Determine if there are currently scopes available.\r\n     */\r\n    hasUserScopes() {\r\n        if (!this.scopes) {\r\n            return false;\r\n        }\r\n        return this.scopes.length > 0;\r\n    }\r\n    /**\r\n     * Are there any default or user scopes defined.\r\n     */\r\n    hasAnyScopes() {\r\n        if (this.scopes && this.scopes.length > 0)\r\n            return true;\r\n        if (this.defaultScopes && this.defaultScopes.length > 0)\r\n            return true;\r\n        return false;\r\n    }\r\n    authorize(callback) {\r\n        if (callback) {\r\n            this.authorizeAsync().then(r => callback(null, r), callback);\r\n        }\r\n        else {\r\n            return this.authorizeAsync();\r\n        }\r\n    }\r\n    async authorizeAsync() {\r\n        const result = await this.refreshToken();\r\n        if (!result) {\r\n            throw new Error('No result returned');\r\n        }\r\n        this.credentials = result.tokens;\r\n        this.credentials.refresh_token = 'jwt-placeholder';\r\n        this.key = this.gtoken.key;\r\n        this.email = this.gtoken.iss;\r\n        return result.tokens;\r\n    }\r\n    /**\r\n     * Refreshes the access token.\r\n     * @param refreshToken ignored\r\n     * @private\r\n     */\r\n    async refreshTokenNoCache(\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    refreshToken) {\r\n        const gtoken = this.createGToken();\r\n        const token = await gtoken.getToken({\r\n            forceRefresh: this.isTokenExpiring(),\r\n        });\r\n        const tokens = {\r\n            access_token: token.access_token,\r\n            token_type: 'Bearer',\r\n            expiry_date: gtoken.expiresAt,\r\n            id_token: gtoken.idToken,\r\n        };\r\n        this.emit('tokens', tokens);\r\n        return { res: null, tokens };\r\n    }\r\n    /**\r\n     * Create a gToken if it doesn't already exist.\r\n     */\r\n    createGToken() {\r\n        if (!this.gtoken) {\r\n            this.gtoken = new gtoken_1.GoogleToken({\r\n                iss: this.email,\r\n                sub: this.subject,\r\n                scope: this.scopes || this.defaultScopes,\r\n                keyFile: this.keyFile,\r\n                key: this.key,\r\n                additionalClaims: this.additionalClaims,\r\n                transporter: this.transporter,\r\n            });\r\n        }\r\n        return this.gtoken;\r\n    }\r\n    /**\r\n     * Create a JWT credentials instance using the given input options.\r\n     * @param json The input object.\r\n     */\r\n    fromJSON(json) {\r\n        if (!json) {\r\n            throw new Error('Must pass in a JSON object containing the service account auth settings.');\r\n        }\r\n        if (!json.client_email) {\r\n            throw new Error('The incoming JSON object does not contain a client_email field');\r\n        }\r\n        if (!json.private_key) {\r\n            throw new Error('The incoming JSON object does not contain a private_key field');\r\n        }\r\n        // Extract the relevant information from the json key file.\r\n        this.email = json.client_email;\r\n        this.key = json.private_key;\r\n        this.keyId = json.private_key_id;\r\n        this.projectId = json.project_id;\r\n        this.quotaProjectId = json.quota_project_id;\r\n        this.universeDomain = json.universe_domain || this.universeDomain;\r\n    }\r\n    fromStream(inputStream, callback) {\r\n        if (callback) {\r\n            this.fromStreamAsync(inputStream).then(() => callback(), callback);\r\n        }\r\n        else {\r\n            return this.fromStreamAsync(inputStream);\r\n        }\r\n    }\r\n    fromStreamAsync(inputStream) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!inputStream) {\r\n                throw new Error('Must pass in a stream containing the service account auth settings.');\r\n            }\r\n            let s = '';\r\n            inputStream\r\n                .setEncoding('utf8')\r\n                .on('error', reject)\r\n                .on('data', chunk => (s += chunk))\r\n                .on('end', () => {\r\n                try {\r\n                    const data = JSON.parse(s);\r\n                    this.fromJSON(data);\r\n                    resolve();\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Creates a JWT credentials instance using an API Key for authentication.\r\n     * @param apiKey The API Key in string form.\r\n     */\r\n    fromAPIKey(apiKey) {\r\n        if (typeof apiKey !== 'string') {\r\n            throw new Error('Must provide an API Key string.');\r\n        }\r\n        this.apiKey = apiKey;\r\n    }\r\n    /**\r\n     * Using the key or keyFile on the JWT client, obtain an object that contains\r\n     * the key and the client email.\r\n     */\r\n    async getCredentials() {\r\n        if (this.key) {\r\n            return { private_key: this.key, client_email: this.email };\r\n        }\r\n        else if (this.keyFile) {\r\n            const gtoken = this.createGToken();\r\n            const creds = await gtoken.getCredentials(this.keyFile);\r\n            return { private_key: creds.privateKey, client_email: creds.clientEmail };\r\n        }\r\n        throw new Error('A key or a keyFile must be provided to getCredentials.');\r\n    }\r\n}\r\nexports.JWT = JWT;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}