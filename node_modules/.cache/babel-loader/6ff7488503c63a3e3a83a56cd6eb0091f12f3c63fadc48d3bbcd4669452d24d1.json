{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StsCredentials = void 0;\nconst gaxios_1 = require(\"gaxios\");\nconst querystring = require(\"querystring\");\nconst transporters_1 = require(\"../transporters\");\nconst oauth2common_1 = require(\"./oauth2common\");\n/**\r\n * Implements the OAuth 2.0 token exchange based on\r\n * https://tools.ietf.org/html/rfc8693\r\n */\nclass StsCredentials extends oauth2common_1.OAuthClientAuthHandler {\n  /**\r\n   * Initializes an STS credentials instance.\r\n   * @param tokenExchangeEndpoint The token exchange endpoint.\r\n   * @param clientAuthentication The client authentication credentials if\r\n   *   available.\r\n   */\n  constructor(tokenExchangeEndpoint, clientAuthentication) {\n    super(clientAuthentication);\n    this.tokenExchangeEndpoint = tokenExchangeEndpoint;\n    this.transporter = new transporters_1.DefaultTransporter();\n  }\n  /**\r\n   * Exchanges the provided token for another type of token based on the\r\n   * rfc8693 spec.\r\n   * @param stsCredentialsOptions The token exchange options used to populate\r\n   *   the token exchange request.\r\n   * @param additionalHeaders Optional additional headers to pass along the\r\n   *   request.\r\n   * @param options Optional additional GCP-specific non-spec defined options\r\n   *   to send with the request.\r\n   *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\r\n   * @return A promise that resolves with the token exchange response containing\r\n   *   the requested token and its expiration time.\r\n   */\n  async exchangeToken(stsCredentialsOptions, additionalHeaders,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  options) {\n    var _a, _b, _c;\n    const values = {\n      grant_type: stsCredentialsOptions.grantType,\n      resource: stsCredentialsOptions.resource,\n      audience: stsCredentialsOptions.audience,\n      scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(' '),\n      requested_token_type: stsCredentialsOptions.requestedTokenType,\n      subject_token: stsCredentialsOptions.subjectToken,\n      subject_token_type: stsCredentialsOptions.subjectTokenType,\n      actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,\n      actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,\n      // Non-standard GCP-specific options.\n      options: options && JSON.stringify(options)\n    };\n    // Remove undefined fields.\n    Object.keys(values).forEach(key => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (typeof values[key] === 'undefined') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        delete values[key];\n      }\n    });\n    const headers = {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    };\n    // Inject additional STS headers if available.\n    Object.assign(headers, additionalHeaders || {});\n    const opts = {\n      ...StsCredentials.RETRY_CONFIG,\n      url: this.tokenExchangeEndpoint.toString(),\n      method: 'POST',\n      headers,\n      data: querystring.stringify(values),\n      responseType: 'json'\n    };\n    // Apply OAuth client authentication.\n    this.applyClientAuthenticationOptions(opts);\n    try {\n      const response = await this.transporter.request(opts);\n      // Successful response.\n      const stsSuccessfulResponse = response.data;\n      stsSuccessfulResponse.res = response;\n      return stsSuccessfulResponse;\n    } catch (error) {\n      // Translate error to OAuthError.\n      if (error instanceof gaxios_1.GaxiosError && error.response) {\n        throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data,\n        // Preserve other fields from the original error.\n        error);\n      }\n      // Request could fail before the server responds.\n      throw error;\n    }\n  }\n}\nexports.StsCredentials = StsCredentials;","map":{"version":3,"names":["Object","defineProperty","exports","value","StsCredentials","gaxios_1","require","querystring","transporters_1","oauth2common_1","OAuthClientAuthHandler","constructor","tokenExchangeEndpoint","clientAuthentication","transporter","DefaultTransporter","exchangeToken","stsCredentialsOptions","additionalHeaders","options","_a","_b","_c","values","grant_type","grantType","resource","audience","scope","join","requested_token_type","requestedTokenType","subject_token","subjectToken","subject_token_type","subjectTokenType","actor_token","actingParty","actorToken","actor_token_type","actorTokenType","JSON","stringify","keys","forEach","key","headers","assign","opts","RETRY_CONFIG","url","toString","method","data","responseType","applyClientAuthenticationOptions","response","request","stsSuccessfulResponse","res","error","GaxiosError","getErrorFromOAuthErrorResponse"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/google-auth-library/build/src/auth/stscredentials.js"],"sourcesContent":["\"use strict\";\r\n// Copyright 2021 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StsCredentials = void 0;\r\nconst gaxios_1 = require(\"gaxios\");\r\nconst querystring = require(\"querystring\");\r\nconst transporters_1 = require(\"../transporters\");\r\nconst oauth2common_1 = require(\"./oauth2common\");\r\n/**\r\n * Implements the OAuth 2.0 token exchange based on\r\n * https://tools.ietf.org/html/rfc8693\r\n */\r\nclass StsCredentials extends oauth2common_1.OAuthClientAuthHandler {\r\n    /**\r\n     * Initializes an STS credentials instance.\r\n     * @param tokenExchangeEndpoint The token exchange endpoint.\r\n     * @param clientAuthentication The client authentication credentials if\r\n     *   available.\r\n     */\r\n    constructor(tokenExchangeEndpoint, clientAuthentication) {\r\n        super(clientAuthentication);\r\n        this.tokenExchangeEndpoint = tokenExchangeEndpoint;\r\n        this.transporter = new transporters_1.DefaultTransporter();\r\n    }\r\n    /**\r\n     * Exchanges the provided token for another type of token based on the\r\n     * rfc8693 spec.\r\n     * @param stsCredentialsOptions The token exchange options used to populate\r\n     *   the token exchange request.\r\n     * @param additionalHeaders Optional additional headers to pass along the\r\n     *   request.\r\n     * @param options Optional additional GCP-specific non-spec defined options\r\n     *   to send with the request.\r\n     *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\r\n     * @return A promise that resolves with the token exchange response containing\r\n     *   the requested token and its expiration time.\r\n     */\r\n    async exchangeToken(stsCredentialsOptions, additionalHeaders, \r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    options) {\r\n        var _a, _b, _c;\r\n        const values = {\r\n            grant_type: stsCredentialsOptions.grantType,\r\n            resource: stsCredentialsOptions.resource,\r\n            audience: stsCredentialsOptions.audience,\r\n            scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(' '),\r\n            requested_token_type: stsCredentialsOptions.requestedTokenType,\r\n            subject_token: stsCredentialsOptions.subjectToken,\r\n            subject_token_type: stsCredentialsOptions.subjectTokenType,\r\n            actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,\r\n            actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,\r\n            // Non-standard GCP-specific options.\r\n            options: options && JSON.stringify(options),\r\n        };\r\n        // Remove undefined fields.\r\n        Object.keys(values).forEach(key => {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            if (typeof values[key] === 'undefined') {\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                delete values[key];\r\n            }\r\n        });\r\n        const headers = {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n        };\r\n        // Inject additional STS headers if available.\r\n        Object.assign(headers, additionalHeaders || {});\r\n        const opts = {\r\n            ...StsCredentials.RETRY_CONFIG,\r\n            url: this.tokenExchangeEndpoint.toString(),\r\n            method: 'POST',\r\n            headers,\r\n            data: querystring.stringify(values),\r\n            responseType: 'json',\r\n        };\r\n        // Apply OAuth client authentication.\r\n        this.applyClientAuthenticationOptions(opts);\r\n        try {\r\n            const response = await this.transporter.request(opts);\r\n            // Successful response.\r\n            const stsSuccessfulResponse = response.data;\r\n            stsSuccessfulResponse.res = response;\r\n            return stsSuccessfulResponse;\r\n        }\r\n        catch (error) {\r\n            // Translate error to OAuthError.\r\n            if (error instanceof gaxios_1.GaxiosError && error.response) {\r\n                throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data, \r\n                // Preserve other fields from the original error.\r\n                error);\r\n            }\r\n            // Request could fail before the server responds.\r\n            throw error;\r\n        }\r\n    }\r\n}\r\nexports.StsCredentials = StsCredentials;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}