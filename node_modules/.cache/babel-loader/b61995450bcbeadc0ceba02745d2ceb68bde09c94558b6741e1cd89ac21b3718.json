{"ast":null,"code":"/*! firebase-admin v13.0.1 */\n\"use strict\";\n\n/*!\r\n * Copyright 2021 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Installations = void 0;\nconst error_1 = require(\"../utils/error\");\nconst installations_request_handler_1 = require(\"./installations-request-handler\");\nconst validator = require(\"../utils/validator\");\n/**\r\n * The `Installations` service for the current app.\r\n */\nclass Installations {\n  /**\r\n   * @param app - The app for this Installations service.\r\n   * @constructor\r\n   * @internal\r\n   */\n  constructor(app) {\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseInstallationsError(error_1.InstallationsClientErrorCode.INVALID_ARGUMENT, 'First argument passed to admin.installations() must be a valid Firebase app instance.');\n    }\n    this.app_ = app;\n    this.requestHandler = new installations_request_handler_1.FirebaseInstallationsRequestHandler(app);\n  }\n  /**\r\n   * Deletes the specified installation ID and the associated data from Firebase.\r\n   *\r\n   * @param fid - The Firebase installation ID to be deleted.\r\n   *\r\n   * @returns A promise fulfilled when the installation ID is deleted.\r\n   */\n  deleteInstallation(fid) {\n    return this.requestHandler.deleteInstallation(fid);\n  }\n  /**\r\n   * Returns the app associated with this Installations instance.\r\n   *\r\n   * @returns The app associated with this Installations instance.\r\n   */\n  get app() {\n    return this.app_;\n  }\n}\nexports.Installations = Installations;","map":{"version":3,"names":["Object","defineProperty","exports","value","Installations","error_1","require","installations_request_handler_1","validator","constructor","app","isNonNullObject","FirebaseInstallationsError","InstallationsClientErrorCode","INVALID_ARGUMENT","app_","requestHandler","FirebaseInstallationsRequestHandler","deleteInstallation","fid"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/firebase-admin/lib/installations/installations.js"],"sourcesContent":["/*! firebase-admin v13.0.1 */\r\n\"use strict\";\r\n/*!\r\n * Copyright 2021 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Installations = void 0;\r\nconst error_1 = require(\"../utils/error\");\r\nconst installations_request_handler_1 = require(\"./installations-request-handler\");\r\nconst validator = require(\"../utils/validator\");\r\n/**\r\n * The `Installations` service for the current app.\r\n */\r\nclass Installations {\r\n    /**\r\n     * @param app - The app for this Installations service.\r\n     * @constructor\r\n     * @internal\r\n     */\r\n    constructor(app) {\r\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\r\n            throw new error_1.FirebaseInstallationsError(error_1.InstallationsClientErrorCode.INVALID_ARGUMENT, 'First argument passed to admin.installations() must be a valid Firebase app instance.');\r\n        }\r\n        this.app_ = app;\r\n        this.requestHandler = new installations_request_handler_1.FirebaseInstallationsRequestHandler(app);\r\n    }\r\n    /**\r\n     * Deletes the specified installation ID and the associated data from Firebase.\r\n     *\r\n     * @param fid - The Firebase installation ID to be deleted.\r\n     *\r\n     * @returns A promise fulfilled when the installation ID is deleted.\r\n     */\r\n    deleteInstallation(fid) {\r\n        return this.requestHandler.deleteInstallation(fid);\r\n    }\r\n    /**\r\n     * Returns the app associated with this Installations instance.\r\n     *\r\n     * @returns The app associated with this Installations instance.\r\n     */\r\n    get app() {\r\n        return this.app_;\r\n    }\r\n}\r\nexports.Installations = Installations;\r\n"],"mappings":"AAAA;AACA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAG,KAAK,CAAC;AAC9B,MAAMC,OAAO,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACzC,MAAMC,+BAA+B,GAAGD,OAAO,CAAC,iCAAiC,CAAC;AAClF,MAAME,SAAS,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AAC/C;AACA;AACA;AACA,MAAMF,aAAa,CAAC;EAChB;AACJ;AACA;AACA;AACA;EACIK,WAAWA,CAACC,GAAG,EAAE;IACb,IAAI,CAACF,SAAS,CAACG,eAAe,CAACD,GAAG,CAAC,IAAI,EAAE,SAAS,IAAIA,GAAG,CAAC,EAAE;MACxD,MAAM,IAAIL,OAAO,CAACO,0BAA0B,CAACP,OAAO,CAACQ,4BAA4B,CAACC,gBAAgB,EAAE,uFAAuF,CAAC;IAChM;IACA,IAAI,CAACC,IAAI,GAAGL,GAAG;IACf,IAAI,CAACM,cAAc,GAAG,IAAIT,+BAA+B,CAACU,mCAAmC,CAACP,GAAG,CAAC;EACtG;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIQ,kBAAkBA,CAACC,GAAG,EAAE;IACpB,OAAO,IAAI,CAACH,cAAc,CAACE,kBAAkB,CAACC,GAAG,CAAC;EACtD;EACA;AACJ;AACA;AACA;AACA;EACI,IAAIT,GAAGA,CAAA,EAAG;IACN,OAAO,IAAI,CAACK,IAAI;EACpB;AACJ;AACAb,OAAO,CAACE,aAAa,GAAGA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}