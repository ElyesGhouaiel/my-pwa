{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable prefer-rest-params */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.callbackifyAll = exports.callbackify = exports.promisifyAll = exports.promisify = void 0;\n/**\r\n * Wraps a callback style function to conditionally return a promise.\r\n *\r\n * @param {function} originalMethod - The method to promisify.\r\n * @param {object=} options - Promise options.\r\n * @param {boolean} options.singular - Resolve the promise with single arg instead of an array.\r\n * @return {function} wrapped\r\n */\nfunction promisify(originalMethod, options) {\n  if (originalMethod.promisified_) {\n    return originalMethod;\n  }\n  options = options || {};\n  const slice = Array.prototype.slice;\n  // tslint:disable-next-line:no-any\n  const wrapper = function () {\n    let last;\n    for (last = arguments.length - 1; last >= 0; last--) {\n      const arg = arguments[last];\n      if (typeof arg === 'undefined') {\n        continue; // skip trailing undefined.\n      }\n      if (typeof arg !== 'function') {\n        break; // non-callback last argument found.\n      }\n      return originalMethod.apply(this, arguments);\n    }\n    // peel trailing undefined.\n    const args = slice.call(arguments, 0, last + 1);\n    // tslint:disable-next-line:variable-name\n    let PromiseCtor = Promise;\n    // Because dedupe will likely create a single install of\n    // @google-cloud/common to be shared amongst all modules, we need to\n    // localize it at the Service level.\n    if (this && this.Promise) {\n      PromiseCtor = this.Promise;\n    }\n    return new PromiseCtor((resolve, reject) => {\n      // tslint:disable-next-line:no-any\n      args.push((...args) => {\n        const callbackArgs = slice.call(args);\n        const err = callbackArgs.shift();\n        if (err) {\n          return reject(err);\n        }\n        if (options.singular && callbackArgs.length === 1) {\n          resolve(callbackArgs[0]);\n        } else {\n          resolve(callbackArgs);\n        }\n      });\n      originalMethod.apply(this, args);\n    });\n  };\n  wrapper.promisified_ = true;\n  return wrapper;\n}\nexports.promisify = promisify;\n/**\r\n * Promisifies certain Class methods. This will not promisify private or\r\n * streaming methods.\r\n *\r\n * @param {module:common/service} Class - Service class.\r\n * @param {object=} options - Configuration object.\r\n */\n// tslint:disable-next-line:variable-name\nfunction promisifyAll(Class, options) {\n  const exclude = options && options.exclude || [];\n  const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);\n  const methods = ownPropertyNames.filter(methodName => {\n    // clang-format off\n    return !exclude.includes(methodName) && typeof Class.prototype[methodName] === 'function' &&\n    // is it a function?\n    !/(^_|(Stream|_)|promise$)|^constructor$/.test(methodName) // is it promisable?\n    ;\n    // clang-format on\n  });\n  methods.forEach(methodName => {\n    const originalMethod = Class.prototype[methodName];\n    if (!originalMethod.promisified_) {\n      Class.prototype[methodName] = exports.promisify(originalMethod, options);\n    }\n  });\n}\nexports.promisifyAll = promisifyAll;\n/**\r\n * Wraps a promisy type function to conditionally call a callback function.\r\n *\r\n * @param {function} originalMethod - The method to callbackify.\r\n * @param {object=} options - Callback options.\r\n * @param {boolean} options.singular - Pass to the callback a single arg instead of an array.\r\n * @return {function} wrapped\r\n */\nfunction callbackify(originalMethod) {\n  if (originalMethod.callbackified_) {\n    return originalMethod;\n  }\n  // tslint:disable-next-line:no-any\n  const wrapper = function () {\n    if (typeof arguments[arguments.length - 1] !== 'function') {\n      return originalMethod.apply(this, arguments);\n    }\n    const cb = Array.prototype.pop.call(arguments);\n    originalMethod.apply(this, arguments).then(\n    // tslint:disable-next-line:no-any\n    res => {\n      res = Array.isArray(res) ? res : [res];\n      cb(null, ...res);\n    }, err => cb(err));\n  };\n  wrapper.callbackified_ = true;\n  return wrapper;\n}\nexports.callbackify = callbackify;\n/**\r\n * Callbackifies certain Class methods. This will not callbackify private or\r\n * streaming methods.\r\n *\r\n * @param {module:common/service} Class - Service class.\r\n * @param {object=} options - Configuration object.\r\n */\nfunction callbackifyAll(\n// tslint:disable-next-line:variable-name\nClass, options) {\n  const exclude = options && options.exclude || [];\n  const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);\n  const methods = ownPropertyNames.filter(methodName => {\n    // clang-format off\n    return !exclude.includes(methodName) && typeof Class.prototype[methodName] === 'function' &&\n    // is it a function?\n    !/^_|(Stream|_)|^constructor$/.test(methodName) // is it callbackifyable?\n    ;\n    // clang-format on\n  });\n  methods.forEach(methodName => {\n    const originalMethod = Class.prototype[methodName];\n    if (!originalMethod.callbackified_) {\n      Class.prototype[methodName] = exports.callbackify(originalMethod);\n    }\n  });\n}\nexports.callbackifyAll = callbackifyAll;","map":{"version":3,"names":["Object","defineProperty","exports","value","callbackifyAll","callbackify","promisifyAll","promisify","originalMethod","options","promisified_","slice","Array","prototype","wrapper","last","arguments","length","arg","apply","args","call","PromiseCtor","Promise","resolve","reject","push","callbackArgs","err","shift","singular","Class","exclude","ownPropertyNames","getOwnPropertyNames","methods","filter","methodName","includes","test","forEach","callbackified_","cb","pop","then","res","isArray"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/@google-cloud/promisify/build/src/index.js"],"sourcesContent":["\"use strict\";\r\n/* eslint-disable prefer-rest-params */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.callbackifyAll = exports.callbackify = exports.promisifyAll = exports.promisify = void 0;\r\n/**\r\n * Wraps a callback style function to conditionally return a promise.\r\n *\r\n * @param {function} originalMethod - The method to promisify.\r\n * @param {object=} options - Promise options.\r\n * @param {boolean} options.singular - Resolve the promise with single arg instead of an array.\r\n * @return {function} wrapped\r\n */\r\nfunction promisify(originalMethod, options) {\r\n    if (originalMethod.promisified_) {\r\n        return originalMethod;\r\n    }\r\n    options = options || {};\r\n    const slice = Array.prototype.slice;\r\n    // tslint:disable-next-line:no-any\r\n    const wrapper = function () {\r\n        let last;\r\n        for (last = arguments.length - 1; last >= 0; last--) {\r\n            const arg = arguments[last];\r\n            if (typeof arg === 'undefined') {\r\n                continue; // skip trailing undefined.\r\n            }\r\n            if (typeof arg !== 'function') {\r\n                break; // non-callback last argument found.\r\n            }\r\n            return originalMethod.apply(this, arguments);\r\n        }\r\n        // peel trailing undefined.\r\n        const args = slice.call(arguments, 0, last + 1);\r\n        // tslint:disable-next-line:variable-name\r\n        let PromiseCtor = Promise;\r\n        // Because dedupe will likely create a single install of\r\n        // @google-cloud/common to be shared amongst all modules, we need to\r\n        // localize it at the Service level.\r\n        if (this && this.Promise) {\r\n            PromiseCtor = this.Promise;\r\n        }\r\n        return new PromiseCtor((resolve, reject) => {\r\n            // tslint:disable-next-line:no-any\r\n            args.push((...args) => {\r\n                const callbackArgs = slice.call(args);\r\n                const err = callbackArgs.shift();\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n                if (options.singular && callbackArgs.length === 1) {\r\n                    resolve(callbackArgs[0]);\r\n                }\r\n                else {\r\n                    resolve(callbackArgs);\r\n                }\r\n            });\r\n            originalMethod.apply(this, args);\r\n        });\r\n    };\r\n    wrapper.promisified_ = true;\r\n    return wrapper;\r\n}\r\nexports.promisify = promisify;\r\n/**\r\n * Promisifies certain Class methods. This will not promisify private or\r\n * streaming methods.\r\n *\r\n * @param {module:common/service} Class - Service class.\r\n * @param {object=} options - Configuration object.\r\n */\r\n// tslint:disable-next-line:variable-name\r\nfunction promisifyAll(Class, options) {\r\n    const exclude = (options && options.exclude) || [];\r\n    const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);\r\n    const methods = ownPropertyNames.filter(methodName => {\r\n        // clang-format off\r\n        return (!exclude.includes(methodName) &&\r\n            typeof Class.prototype[methodName] === 'function' && // is it a function?\r\n            !/(^_|(Stream|_)|promise$)|^constructor$/.test(methodName) // is it promisable?\r\n        );\r\n        // clang-format on\r\n    });\r\n    methods.forEach(methodName => {\r\n        const originalMethod = Class.prototype[methodName];\r\n        if (!originalMethod.promisified_) {\r\n            Class.prototype[methodName] = exports.promisify(originalMethod, options);\r\n        }\r\n    });\r\n}\r\nexports.promisifyAll = promisifyAll;\r\n/**\r\n * Wraps a promisy type function to conditionally call a callback function.\r\n *\r\n * @param {function} originalMethod - The method to callbackify.\r\n * @param {object=} options - Callback options.\r\n * @param {boolean} options.singular - Pass to the callback a single arg instead of an array.\r\n * @return {function} wrapped\r\n */\r\nfunction callbackify(originalMethod) {\r\n    if (originalMethod.callbackified_) {\r\n        return originalMethod;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    const wrapper = function () {\r\n        if (typeof arguments[arguments.length - 1] !== 'function') {\r\n            return originalMethod.apply(this, arguments);\r\n        }\r\n        const cb = Array.prototype.pop.call(arguments);\r\n        originalMethod.apply(this, arguments).then(\r\n        // tslint:disable-next-line:no-any\r\n        (res) => {\r\n            res = Array.isArray(res) ? res : [res];\r\n            cb(null, ...res);\r\n        }, (err) => cb(err));\r\n    };\r\n    wrapper.callbackified_ = true;\r\n    return wrapper;\r\n}\r\nexports.callbackify = callbackify;\r\n/**\r\n * Callbackifies certain Class methods. This will not callbackify private or\r\n * streaming methods.\r\n *\r\n * @param {module:common/service} Class - Service class.\r\n * @param {object=} options - Configuration object.\r\n */\r\nfunction callbackifyAll(\r\n// tslint:disable-next-line:variable-name\r\nClass, options) {\r\n    const exclude = (options && options.exclude) || [];\r\n    const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);\r\n    const methods = ownPropertyNames.filter(methodName => {\r\n        // clang-format off\r\n        return (!exclude.includes(methodName) &&\r\n            typeof Class.prototype[methodName] === 'function' && // is it a function?\r\n            !/^_|(Stream|_)|^constructor$/.test(methodName) // is it callbackifyable?\r\n        );\r\n        // clang-format on\r\n    });\r\n    methods.forEach(methodName => {\r\n        const originalMethod = Class.prototype[methodName];\r\n        if (!originalMethod.callbackified_) {\r\n            Class.prototype[methodName] = exports.callbackify(originalMethod);\r\n        }\r\n    });\r\n}\r\nexports.callbackifyAll = callbackifyAll;\r\n//# sourceMappingURL=index.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}