{"ast":null,"code":"\"use strict\";\n\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeCrypto = void 0;\nconst crypto = require(\"crypto\");\nclass NodeCrypto {\n  async sha256DigestBase64(str) {\n    return crypto.createHash('sha256').update(str).digest('base64');\n  }\n  randomBytesBase64(count) {\n    return crypto.randomBytes(count).toString('base64');\n  }\n  async verify(pubkey, data, signature) {\n    const verifier = crypto.createVerify('RSA-SHA256');\n    verifier.update(data);\n    verifier.end();\n    return verifier.verify(pubkey, signature, 'base64');\n  }\n  async sign(privateKey, data) {\n    const signer = crypto.createSign('RSA-SHA256');\n    signer.update(data);\n    signer.end();\n    return signer.sign(privateKey, 'base64');\n  }\n  decodeBase64StringUtf8(base64) {\n    return Buffer.from(base64, 'base64').toString('utf-8');\n  }\n  encodeBase64StringUtf8(text) {\n    return Buffer.from(text, 'utf-8').toString('base64');\n  }\n  /**\r\n   * Computes the SHA-256 hash of the provided string.\r\n   * @param str The plain text string to hash.\r\n   * @return A promise that resolves with the SHA-256 hash of the provided\r\n   *   string in hexadecimal encoding.\r\n   */\n  async sha256DigestHex(str) {\n    return crypto.createHash('sha256').update(str).digest('hex');\n  }\n  /**\r\n   * Computes the HMAC hash of a message using the provided crypto key and the\r\n   * SHA-256 algorithm.\r\n   * @param key The secret crypto key in utf-8 or ArrayBuffer format.\r\n   * @param msg The plain text message.\r\n   * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\r\n   *   format.\r\n   */\n  async signWithHmacSha256(key, msg) {\n    const cryptoKey = typeof key === 'string' ? key : toBuffer(key);\n    return toArrayBuffer(crypto.createHmac('sha256', cryptoKey).update(msg).digest());\n  }\n}\nexports.NodeCrypto = NodeCrypto;\n/**\r\n * Converts a Node.js Buffer to an ArrayBuffer.\r\n * https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer\r\n * @param buffer The Buffer input to covert.\r\n * @return The ArrayBuffer representation of the input.\r\n */\nfunction toArrayBuffer(buffer) {\n  return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n}\n/**\r\n * Converts an ArrayBuffer to a Node.js Buffer.\r\n * @param arrayBuffer The ArrayBuffer input to covert.\r\n * @return The Buffer representation of the input.\r\n */\nfunction toBuffer(arrayBuffer) {\n  return Buffer.from(arrayBuffer);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","NodeCrypto","crypto","require","sha256DigestBase64","str","createHash","update","digest","randomBytesBase64","count","randomBytes","toString","verify","pubkey","data","signature","verifier","createVerify","end","sign","privateKey","signer","createSign","decodeBase64StringUtf8","base64","Buffer","from","encodeBase64StringUtf8","text","sha256DigestHex","signWithHmacSha256","key","msg","cryptoKey","toBuffer","toArrayBuffer","createHmac","buffer","slice","byteOffset","byteLength","arrayBuffer"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/google-auth-library/build/src/crypto/node/crypto.js"],"sourcesContent":["\"use strict\";\r\n// Copyright 2019 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NodeCrypto = void 0;\r\nconst crypto = require(\"crypto\");\r\nclass NodeCrypto {\r\n    async sha256DigestBase64(str) {\r\n        return crypto.createHash('sha256').update(str).digest('base64');\r\n    }\r\n    randomBytesBase64(count) {\r\n        return crypto.randomBytes(count).toString('base64');\r\n    }\r\n    async verify(pubkey, data, signature) {\r\n        const verifier = crypto.createVerify('RSA-SHA256');\r\n        verifier.update(data);\r\n        verifier.end();\r\n        return verifier.verify(pubkey, signature, 'base64');\r\n    }\r\n    async sign(privateKey, data) {\r\n        const signer = crypto.createSign('RSA-SHA256');\r\n        signer.update(data);\r\n        signer.end();\r\n        return signer.sign(privateKey, 'base64');\r\n    }\r\n    decodeBase64StringUtf8(base64) {\r\n        return Buffer.from(base64, 'base64').toString('utf-8');\r\n    }\r\n    encodeBase64StringUtf8(text) {\r\n        return Buffer.from(text, 'utf-8').toString('base64');\r\n    }\r\n    /**\r\n     * Computes the SHA-256 hash of the provided string.\r\n     * @param str The plain text string to hash.\r\n     * @return A promise that resolves with the SHA-256 hash of the provided\r\n     *   string in hexadecimal encoding.\r\n     */\r\n    async sha256DigestHex(str) {\r\n        return crypto.createHash('sha256').update(str).digest('hex');\r\n    }\r\n    /**\r\n     * Computes the HMAC hash of a message using the provided crypto key and the\r\n     * SHA-256 algorithm.\r\n     * @param key The secret crypto key in utf-8 or ArrayBuffer format.\r\n     * @param msg The plain text message.\r\n     * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\r\n     *   format.\r\n     */\r\n    async signWithHmacSha256(key, msg) {\r\n        const cryptoKey = typeof key === 'string' ? key : toBuffer(key);\r\n        return toArrayBuffer(crypto.createHmac('sha256', cryptoKey).update(msg).digest());\r\n    }\r\n}\r\nexports.NodeCrypto = NodeCrypto;\r\n/**\r\n * Converts a Node.js Buffer to an ArrayBuffer.\r\n * https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer\r\n * @param buffer The Buffer input to covert.\r\n * @return The ArrayBuffer representation of the input.\r\n */\r\nfunction toArrayBuffer(buffer) {\r\n    return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\r\n}\r\n/**\r\n * Converts an ArrayBuffer to a Node.js Buffer.\r\n * @param arrayBuffer The ArrayBuffer input to covert.\r\n * @return The Buffer representation of the input.\r\n */\r\nfunction toBuffer(arrayBuffer) {\r\n    return Buffer.from(arrayBuffer);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}