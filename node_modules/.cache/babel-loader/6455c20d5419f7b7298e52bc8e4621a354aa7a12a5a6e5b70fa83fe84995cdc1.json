{"ast":null,"code":"const logger = require('debug')('jwks');\nconst {\n  RateLimiter\n} = require('limiter');\nconst JwksRateLimitError = require('../errors/JwksRateLimitError');\nfunction rateLimitWrapper(client, {\n  jwksRequestsPerMinute = 10\n}) {\n  const getSigningKey = client.getSigningKey.bind(client);\n  const limiter = new RateLimiter(jwksRequestsPerMinute, 'minute', true);\n  logger(`Configured rate limiting to JWKS endpoint at ${jwksRequestsPerMinute}/minute`);\n  return async kid => await new Promise((resolve, reject) => {\n    limiter.removeTokens(1, async (err, remaining) => {\n      if (err) {\n        reject(err);\n      }\n      logger('Requests to the JWKS endpoint available for the next minute:', remaining);\n      if (remaining < 0) {\n        logger('Too many requests to the JWKS endpoint');\n        reject(new JwksRateLimitError('Too many requests to the JWKS endpoint'));\n      } else {\n        try {\n          const key = await getSigningKey(kid);\n          resolve(key);\n        } catch (error) {\n          reject(error);\n        }\n      }\n    });\n  });\n}\nmodule.exports.default = rateLimitWrapper;","map":{"version":3,"names":["logger","require","RateLimiter","JwksRateLimitError","rateLimitWrapper","client","jwksRequestsPerMinute","getSigningKey","bind","limiter","kid","Promise","resolve","reject","removeTokens","err","remaining","key","error","module","exports","default"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/jwks-rsa/src/wrappers/rateLimit.js"],"sourcesContent":["const logger = require('debug')('jwks');\r\nconst { RateLimiter } = require('limiter');\r\n\r\nconst JwksRateLimitError = require('../errors/JwksRateLimitError');\r\n\r\nfunction rateLimitWrapper(client, { jwksRequestsPerMinute = 10 }) {\r\n  const getSigningKey = client.getSigningKey.bind(client);\r\n\r\n  const limiter = new RateLimiter(jwksRequestsPerMinute, 'minute', true);\r\n  logger(`Configured rate limiting to JWKS endpoint at ${jwksRequestsPerMinute}/minute`);\r\n\r\n  return async (kid) => await new Promise((resolve, reject) => {\r\n    limiter.removeTokens(1, async (err, remaining) => {\r\n      if (err) {\r\n        reject(err);\r\n      }\r\n\r\n      logger('Requests to the JWKS endpoint available for the next minute:', remaining);\r\n      if (remaining < 0) {\r\n        logger('Too many requests to the JWKS endpoint');\r\n        reject(new JwksRateLimitError('Too many requests to the JWKS endpoint'));\r\n      } else {\r\n        try {\r\n          const key = await getSigningKey(kid);\r\n          resolve(key);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nmodule.exports.default = rateLimitWrapper;\r\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;AACvC,MAAM;EAAEC;AAAY,CAAC,GAAGD,OAAO,CAAC,SAAS,CAAC;AAE1C,MAAME,kBAAkB,GAAGF,OAAO,CAAC,8BAA8B,CAAC;AAElE,SAASG,gBAAgBA,CAACC,MAAM,EAAE;EAAEC,qBAAqB,GAAG;AAAG,CAAC,EAAE;EAChE,MAAMC,aAAa,GAAGF,MAAM,CAACE,aAAa,CAACC,IAAI,CAACH,MAAM,CAAC;EAEvD,MAAMI,OAAO,GAAG,IAAIP,WAAW,CAACI,qBAAqB,EAAE,QAAQ,EAAE,IAAI,CAAC;EACtEN,MAAM,CAAC,gDAAgDM,qBAAqB,SAAS,CAAC;EAEtF,OAAO,MAAOI,GAAG,IAAK,MAAM,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IAC3DJ,OAAO,CAACK,YAAY,CAAC,CAAC,EAAE,OAAOC,GAAG,EAAEC,SAAS,KAAK;MAChD,IAAID,GAAG,EAAE;QACPF,MAAM,CAACE,GAAG,CAAC;MACb;MAEAf,MAAM,CAAC,8DAA8D,EAAEgB,SAAS,CAAC;MACjF,IAAIA,SAAS,GAAG,CAAC,EAAE;QACjBhB,MAAM,CAAC,wCAAwC,CAAC;QAChDa,MAAM,CAAC,IAAIV,kBAAkB,CAAC,wCAAwC,CAAC,CAAC;MAC1E,CAAC,MAAM;QACL,IAAI;UACF,MAAMc,GAAG,GAAG,MAAMV,aAAa,CAACG,GAAG,CAAC;UACpCE,OAAO,CAACK,GAAG,CAAC;QACd,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdL,MAAM,CAACK,KAAK,CAAC;QACf;MACF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEAC,MAAM,CAACC,OAAO,CAACC,OAAO,GAAGjB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}