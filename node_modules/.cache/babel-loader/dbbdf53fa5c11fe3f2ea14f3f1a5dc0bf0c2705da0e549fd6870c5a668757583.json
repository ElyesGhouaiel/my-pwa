{"ast":null,"code":"/*! firebase-admin v13.0.1 */\n\"use strict\";\n\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Storage = void 0;\nconst error_1 = require(\"../utils/error\");\nconst credential_internal_1 = require(\"../app/credential-internal\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\n/**\r\n * The default `Storage` service if no\r\n * app is provided or the `Storage` service associated with the provided\r\n * app.\r\n */\nclass Storage {\n  /**\r\n   * @param app - The app for this Storage service.\r\n   * @constructor\r\n   * @internal\r\n   */\n  constructor(app) {\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseError({\n        code: 'storage/invalid-argument',\n        message: 'First argument passed to admin.storage() must be a valid Firebase app instance.'\n      });\n    }\n    if (!process.env.STORAGE_EMULATOR_HOST && process.env.FIREBASE_STORAGE_EMULATOR_HOST) {\n      const firebaseStorageEmulatorHost = process.env.FIREBASE_STORAGE_EMULATOR_HOST;\n      if (firebaseStorageEmulatorHost.match(/https?:\\/\\//)) {\n        throw new error_1.FirebaseError({\n          code: 'storage/invalid-emulator-host',\n          message: 'FIREBASE_STORAGE_EMULATOR_HOST should not contain a protocol (http or https).'\n        });\n      }\n      process.env.STORAGE_EMULATOR_HOST = `http://${process.env.FIREBASE_STORAGE_EMULATOR_HOST}`;\n    }\n    let storage;\n    try {\n      storage = require('@google-cloud/storage').Storage;\n    } catch (err) {\n      throw new error_1.FirebaseError({\n        code: 'storage/missing-dependencies',\n        message: 'Failed to import the Cloud Storage client library for Node.js. ' + 'Make sure to install the \"@google-cloud/storage\" npm package. ' + `Original error: ${err}`\n      });\n    }\n    const projectId = utils.getExplicitProjectId(app);\n    const credential = app.options.credential;\n    if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n      this.storageClient = new storage({\n        // When the SDK is initialized with ServiceAccountCredentials an explicit projectId is\n        // guaranteed to be available.\n        projectId: projectId,\n        credentials: {\n          private_key: credential.privateKey,\n          client_email: credential.clientEmail\n        }\n      });\n    } else if ((0, credential_internal_1.isApplicationDefault)(app.options.credential)) {\n      // Try to use the Google application default credentials.\n      this.storageClient = new storage();\n    } else {\n      throw new error_1.FirebaseError({\n        code: 'storage/invalid-credential',\n        message: 'Failed to initialize Google Cloud Storage client with the available credential. ' + 'Must initialize the SDK with a certificate credential or application default credentials ' + 'to use Cloud Storage API.'\n      });\n    }\n    this.appInternal = app;\n  }\n  /**\r\n   * Gets a reference to a Cloud Storage bucket.\r\n   *\r\n   * @param name - Optional name of the bucket to be retrieved. If name is not specified,\r\n   * retrieves a reference to the default bucket.\r\n   * @returns A {@link https://cloud.google.com/nodejs/docs/reference/storage/latest/Bucket | Bucket}\r\n   * instance as defined in the `@google-cloud/storage` package.\r\n   */\n  bucket(name) {\n    const bucketName = typeof name !== 'undefined' ? name : this.appInternal.options.storageBucket;\n    if (validator.isNonEmptyString(bucketName)) {\n      return this.storageClient.bucket(bucketName);\n    }\n    throw new error_1.FirebaseError({\n      code: 'storage/invalid-argument',\n      message: 'Bucket name not specified or invalid. Specify a valid bucket name via the ' + 'storageBucket option when initializing the app, or specify the bucket name ' + 'explicitly when calling the getBucket() method.'\n    });\n  }\n  /**\r\n   * Optional app whose `Storage` service to\r\n   * return. If not provided, the default `Storage` service will be returned.\r\n   */\n  get app() {\n    return this.appInternal;\n  }\n}\nexports.Storage = Storage;","map":{"version":3,"names":["Object","defineProperty","exports","value","Storage","error_1","require","credential_internal_1","utils","validator","constructor","app","isNonNullObject","FirebaseError","code","message","process","env","STORAGE_EMULATOR_HOST","FIREBASE_STORAGE_EMULATOR_HOST","firebaseStorageEmulatorHost","match","storage","err","projectId","getExplicitProjectId","credential","options","ServiceAccountCredential","storageClient","credentials","private_key","privateKey","client_email","clientEmail","isApplicationDefault","appInternal","bucket","name","bucketName","storageBucket","isNonEmptyString"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/firebase-admin/lib/storage/storage.js"],"sourcesContent":["/*! firebase-admin v13.0.1 */\r\n\"use strict\";\r\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Storage = void 0;\r\nconst error_1 = require(\"../utils/error\");\r\nconst credential_internal_1 = require(\"../app/credential-internal\");\r\nconst utils = require(\"../utils/index\");\r\nconst validator = require(\"../utils/validator\");\r\n/**\r\n * The default `Storage` service if no\r\n * app is provided or the `Storage` service associated with the provided\r\n * app.\r\n */\r\nclass Storage {\r\n    /**\r\n     * @param app - The app for this Storage service.\r\n     * @constructor\r\n     * @internal\r\n     */\r\n    constructor(app) {\r\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\r\n            throw new error_1.FirebaseError({\r\n                code: 'storage/invalid-argument',\r\n                message: 'First argument passed to admin.storage() must be a valid Firebase app instance.',\r\n            });\r\n        }\r\n        if (!process.env.STORAGE_EMULATOR_HOST && process.env.FIREBASE_STORAGE_EMULATOR_HOST) {\r\n            const firebaseStorageEmulatorHost = process.env.FIREBASE_STORAGE_EMULATOR_HOST;\r\n            if (firebaseStorageEmulatorHost.match(/https?:\\/\\//)) {\r\n                throw new error_1.FirebaseError({\r\n                    code: 'storage/invalid-emulator-host',\r\n                    message: 'FIREBASE_STORAGE_EMULATOR_HOST should not contain a protocol (http or https).',\r\n                });\r\n            }\r\n            process.env.STORAGE_EMULATOR_HOST = `http://${process.env.FIREBASE_STORAGE_EMULATOR_HOST}`;\r\n        }\r\n        let storage;\r\n        try {\r\n            storage = require('@google-cloud/storage').Storage;\r\n        }\r\n        catch (err) {\r\n            throw new error_1.FirebaseError({\r\n                code: 'storage/missing-dependencies',\r\n                message: 'Failed to import the Cloud Storage client library for Node.js. '\r\n                    + 'Make sure to install the \"@google-cloud/storage\" npm package. '\r\n                    + `Original error: ${err}`,\r\n            });\r\n        }\r\n        const projectId = utils.getExplicitProjectId(app);\r\n        const credential = app.options.credential;\r\n        if (credential instanceof credential_internal_1.ServiceAccountCredential) {\r\n            this.storageClient = new storage({\r\n                // When the SDK is initialized with ServiceAccountCredentials an explicit projectId is\r\n                // guaranteed to be available.\r\n                projectId: projectId,\r\n                credentials: {\r\n                    private_key: credential.privateKey,\r\n                    client_email: credential.clientEmail,\r\n                },\r\n            });\r\n        }\r\n        else if ((0, credential_internal_1.isApplicationDefault)(app.options.credential)) {\r\n            // Try to use the Google application default credentials.\r\n            this.storageClient = new storage();\r\n        }\r\n        else {\r\n            throw new error_1.FirebaseError({\r\n                code: 'storage/invalid-credential',\r\n                message: 'Failed to initialize Google Cloud Storage client with the available credential. ' +\r\n                    'Must initialize the SDK with a certificate credential or application default credentials ' +\r\n                    'to use Cloud Storage API.',\r\n            });\r\n        }\r\n        this.appInternal = app;\r\n    }\r\n    /**\r\n     * Gets a reference to a Cloud Storage bucket.\r\n     *\r\n     * @param name - Optional name of the bucket to be retrieved. If name is not specified,\r\n     * retrieves a reference to the default bucket.\r\n     * @returns A {@link https://cloud.google.com/nodejs/docs/reference/storage/latest/Bucket | Bucket}\r\n     * instance as defined in the `@google-cloud/storage` package.\r\n     */\r\n    bucket(name) {\r\n        const bucketName = (typeof name !== 'undefined')\r\n            ? name : this.appInternal.options.storageBucket;\r\n        if (validator.isNonEmptyString(bucketName)) {\r\n            return this.storageClient.bucket(bucketName);\r\n        }\r\n        throw new error_1.FirebaseError({\r\n            code: 'storage/invalid-argument',\r\n            message: 'Bucket name not specified or invalid. Specify a valid bucket name via the ' +\r\n                'storageBucket option when initializing the app, or specify the bucket name ' +\r\n                'explicitly when calling the getBucket() method.',\r\n        });\r\n    }\r\n    /**\r\n     * Optional app whose `Storage` service to\r\n     * return. If not provided, the default `Storage` service will be returned.\r\n     */\r\n    get app() {\r\n        return this.appInternal;\r\n    }\r\n}\r\nexports.Storage = Storage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}