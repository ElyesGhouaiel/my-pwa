{"ast":null,"code":"/*! firebase-admin v13.0.1 */\n\"use strict\";\n\n/*!\r\n * Copyright 2020 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirebaseRemoteConfigError = exports.RemoteConfigApiClient = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\n// Remote Config backend constants\n/**\r\n  * Allows the `FIREBASE_REMOTE_CONFIG_URL_BASE` environment\r\n  * variable to override the default API endpoint URL.\r\n  */\nconst FIREBASE_REMOTE_CONFIG_URL_BASE = process.env.FIREBASE_REMOTE_CONFIG_URL_BASE || 'https://firebaseremoteconfig.googleapis.com';\nconst FIREBASE_REMOTE_CONFIG_HEADERS = {\n  'X-Firebase-Client': `fire-admin-node/${utils.getSdkVersion()}`,\n  // There is a known issue in which the ETag is not properly returned in cases where the request\n  // does not specify a compression type. Currently, it is required to include the header\n  // `Accept-Encoding: gzip` or equivalent in all requests.\n  // https://firebase.google.com/docs/remote-config/use-config-rest#etag_usage_and_forced_updates\n  'Accept-Encoding': 'gzip'\n};\n/**\r\n * Class that facilitates sending requests to the Firebase Remote Config backend API.\r\n *\r\n * @internal\r\n */\nclass RemoteConfigApiClient {\n  constructor(app) {\n    this.app = app;\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', 'First argument passed to admin.remoteConfig() must be a valid Firebase app instance.');\n    }\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n  getTemplate() {\n    return this.getUrl().then(url => {\n      const request = {\n        method: 'GET',\n        url: `${url}/remoteConfig`,\n        headers: FIREBASE_REMOTE_CONFIG_HEADERS\n      };\n      return this.httpClient.send(request);\n    }).then(resp => {\n      return this.toRemoteConfigTemplate(resp);\n    }).catch(err => {\n      throw this.toFirebaseError(err);\n    });\n  }\n  getTemplateAtVersion(versionNumber) {\n    const data = {\n      versionNumber: this.validateVersionNumber(versionNumber)\n    };\n    return this.getUrl().then(url => {\n      const request = {\n        method: 'GET',\n        url: `${url}/remoteConfig`,\n        headers: FIREBASE_REMOTE_CONFIG_HEADERS,\n        data\n      };\n      return this.httpClient.send(request);\n    }).then(resp => {\n      return this.toRemoteConfigTemplate(resp);\n    }).catch(err => {\n      throw this.toFirebaseError(err);\n    });\n  }\n  validateTemplate(template) {\n    template = this.validateInputRemoteConfigTemplate(template);\n    return this.sendPutRequest(template, template.etag, true).then(resp => {\n      // validating a template returns an etag with the suffix -0 means that your update\n      // was successfully validated. We set the etag back to the original etag of the template\n      // to allow future operations.\n      this.validateEtag(resp.headers['etag']);\n      return this.toRemoteConfigTemplate(resp, template.etag);\n    }).catch(err => {\n      throw this.toFirebaseError(err);\n    });\n  }\n  publishTemplate(template, options) {\n    template = this.validateInputRemoteConfigTemplate(template);\n    let ifMatch = template.etag;\n    if (options && options.force === true) {\n      // setting `If-Match: *` forces the Remote Config template to be updated\n      // and circumvent the ETag, and the protection from that it provides.\n      ifMatch = '*';\n    }\n    return this.sendPutRequest(template, ifMatch).then(resp => {\n      return this.toRemoteConfigTemplate(resp);\n    }).catch(err => {\n      throw this.toFirebaseError(err);\n    });\n  }\n  rollback(versionNumber) {\n    const data = {\n      versionNumber: this.validateVersionNumber(versionNumber)\n    };\n    return this.getUrl().then(url => {\n      const request = {\n        method: 'POST',\n        url: `${url}/remoteConfig:rollback`,\n        headers: FIREBASE_REMOTE_CONFIG_HEADERS,\n        data\n      };\n      return this.httpClient.send(request);\n    }).then(resp => {\n      return this.toRemoteConfigTemplate(resp);\n    }).catch(err => {\n      throw this.toFirebaseError(err);\n    });\n  }\n  listVersions(options) {\n    if (typeof options !== 'undefined') {\n      options = this.validateListVersionsOptions(options);\n    }\n    return this.getUrl().then(url => {\n      const request = {\n        method: 'GET',\n        url: `${url}/remoteConfig:listVersions`,\n        headers: FIREBASE_REMOTE_CONFIG_HEADERS,\n        data: options\n      };\n      return this.httpClient.send(request);\n    }).then(resp => {\n      return resp.data;\n    }).catch(err => {\n      throw this.toFirebaseError(err);\n    });\n  }\n  getServerTemplate() {\n    return this.getUrl().then(url => {\n      const request = {\n        method: 'GET',\n        url: `${url}/namespaces/firebase-server/serverRemoteConfig`,\n        headers: FIREBASE_REMOTE_CONFIG_HEADERS\n      };\n      return this.httpClient.send(request);\n    }).then(resp => {\n      return this.toRemoteConfigServerTemplate(resp);\n    }).catch(err => {\n      throw this.toFirebaseError(err);\n    });\n  }\n  sendPutRequest(template, etag, validateOnly) {\n    let path = 'remoteConfig';\n    if (validateOnly) {\n      path += '?validate_only=true';\n    }\n    return this.getUrl().then(url => {\n      const request = {\n        method: 'PUT',\n        url: `${url}/${path}`,\n        headers: {\n          ...FIREBASE_REMOTE_CONFIG_HEADERS,\n          'If-Match': etag\n        },\n        data: {\n          conditions: template.conditions,\n          parameters: template.parameters,\n          parameterGroups: template.parameterGroups,\n          version: template.version\n        }\n      };\n      return this.httpClient.send(request);\n    });\n  }\n  getUrl() {\n    return this.getProjectIdPrefix().then(projectIdPrefix => {\n      return `${FIREBASE_REMOTE_CONFIG_URL_BASE}/v1/${projectIdPrefix}`;\n    });\n  }\n  getProjectIdPrefix() {\n    if (this.projectIdPrefix) {\n      return Promise.resolve(this.projectIdPrefix);\n    }\n    return utils.findProjectId(this.app).then(projectId => {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new FirebaseRemoteConfigError('unknown-error', 'Failed to determine project ID. Initialize the SDK with service account credentials, or ' + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT ' + 'environment variable.');\n      }\n      this.projectIdPrefix = `projects/${projectId}`;\n      return this.projectIdPrefix;\n    });\n  }\n  toFirebaseError(err) {\n    if (err instanceof error_1.PrefixedFirebaseError) {\n      return err;\n    }\n    const response = err.response;\n    if (!response.isJson()) {\n      return new FirebaseRemoteConfigError('unknown-error', `Unexpected response with status: ${response.status} and body: ${response.text}`);\n    }\n    const error = response.data.error || {};\n    let code = 'unknown-error';\n    if (error.status && error.status in ERROR_CODE_MAPPING) {\n      code = ERROR_CODE_MAPPING[error.status];\n    }\n    const message = error.message || `Unknown server error: ${response.text}`;\n    return new FirebaseRemoteConfigError(code, message);\n  }\n  /**\r\n   * Creates a RemoteConfigTemplate from the API response.\r\n   * If provided, customEtag is used instead of the etag returned in the API response.\r\n   *\r\n   * @param {HttpResponse} resp API response object.\r\n   * @param {string} customEtag A custom etag to replace the etag fom the API response (Optional).\r\n   */\n  toRemoteConfigTemplate(resp, customEtag) {\n    const etag = typeof customEtag === 'undefined' ? resp.headers['etag'] : customEtag;\n    this.validateEtag(etag);\n    return {\n      conditions: resp.data.conditions,\n      parameters: resp.data.parameters,\n      parameterGroups: resp.data.parameterGroups,\n      etag,\n      version: resp.data.version\n    };\n  }\n  /**\r\n   * Creates a RemoteConfigServerTemplate from the API response.\r\n   * If provided, customEtag is used instead of the etag returned in the API response.\r\n   *\r\n   * @param {HttpResponse} resp API response object.\r\n   * @param {string} customEtag A custom etag to replace the etag fom the API response (Optional).\r\n   */\n  toRemoteConfigServerTemplate(resp, customEtag) {\n    const etag = typeof customEtag === 'undefined' ? resp.headers['etag'] : customEtag;\n    this.validateEtag(etag);\n    return {\n      conditions: resp.data.conditions,\n      parameters: resp.data.parameters,\n      etag,\n      version: resp.data.version\n    };\n  }\n  /**\r\n   * Checks if the given RemoteConfigTemplate object is valid.\r\n   * The object must have valid parameters, parameter groups, conditions, and an etag.\r\n   * Removes output only properties from version metadata.\r\n   *\r\n   * @param {RemoteConfigTemplate} template A RemoteConfigTemplate object to be validated.\r\n   *\r\n   * @returns {RemoteConfigTemplate} The validated RemoteConfigTemplate object.\r\n   */\n  validateInputRemoteConfigTemplate(template) {\n    const templateCopy = (0, deep_copy_1.deepCopy)(template);\n    if (!validator.isNonNullObject(templateCopy)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', `Invalid Remote Config template: ${JSON.stringify(templateCopy)}`);\n    }\n    if (!validator.isNonEmptyString(templateCopy.etag)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', 'ETag must be a non-empty string.');\n    }\n    if (!validator.isNonNullObject(templateCopy.parameters)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\n    }\n    if (!validator.isNonNullObject(templateCopy.parameterGroups)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');\n    }\n    if (!validator.isArray(templateCopy.conditions)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\n    }\n    if (typeof templateCopy.version !== 'undefined') {\n      // exclude output only properties and keep the only input property: description\n      templateCopy.version = {\n        description: templateCopy.version.description\n      };\n    }\n    return templateCopy;\n  }\n  /**\r\n   * Checks if a given version number is valid.\r\n   * A version number must be an integer or a string in int64 format.\r\n   * If valid, returns the string representation of the provided version number.\r\n   *\r\n   * @param {string|number} versionNumber A version number to be validated.\r\n   *\r\n   * @returns {string} The validated version number as a string.\r\n   */\n  validateVersionNumber(versionNumber, propertyName = 'versionNumber') {\n    if (!validator.isNonEmptyString(versionNumber) && !validator.isNumber(versionNumber)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', `${propertyName} must be a non-empty string in int64 format or a number`);\n    }\n    if (!Number.isInteger(Number(versionNumber))) {\n      throw new FirebaseRemoteConfigError('invalid-argument', `${propertyName} must be an integer or a string in int64 format`);\n    }\n    return versionNumber.toString();\n  }\n  validateEtag(etag) {\n    if (!validator.isNonEmptyString(etag)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', 'ETag header is not present in the server response.');\n    }\n  }\n  /**\r\n   * Checks if a given `ListVersionsOptions` object is valid. If successful, creates a copy of the\r\n   * options object and convert `startTime` and `endTime` to RFC3339 UTC \"Zulu\" format, if present.\r\n   *\r\n   * @param {ListVersionsOptions} options An options object to be validated.\r\n   *\r\n   * @returns {ListVersionsOptions} A copy of the provided options object with timestamps converted\r\n   * to UTC Zulu format.\r\n   */\n  validateListVersionsOptions(options) {\n    const optionsCopy = (0, deep_copy_1.deepCopy)(options);\n    if (!validator.isNonNullObject(optionsCopy)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', 'ListVersionsOptions must be a non-null object.');\n    }\n    if (typeof optionsCopy.pageSize !== 'undefined') {\n      if (!validator.isNumber(optionsCopy.pageSize)) {\n        throw new FirebaseRemoteConfigError('invalid-argument', 'pageSize must be a number.');\n      }\n      if (optionsCopy.pageSize < 1 || optionsCopy.pageSize > 300) {\n        throw new FirebaseRemoteConfigError('invalid-argument', 'pageSize must be a number between 1 and 300 (inclusive).');\n      }\n    }\n    if (typeof optionsCopy.pageToken !== 'undefined' && !validator.isNonEmptyString(optionsCopy.pageToken)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', 'pageToken must be a string value.');\n    }\n    if (typeof optionsCopy.endVersionNumber !== 'undefined') {\n      optionsCopy.endVersionNumber = this.validateVersionNumber(optionsCopy.endVersionNumber, 'endVersionNumber');\n    }\n    if (typeof optionsCopy.startTime !== 'undefined') {\n      if (!(optionsCopy.startTime instanceof Date) && !validator.isUTCDateString(optionsCopy.startTime)) {\n        throw new FirebaseRemoteConfigError('invalid-argument', 'startTime must be a valid Date object or a UTC date string.');\n      }\n      // Convert startTime to RFC3339 UTC \"Zulu\" format.\n      if (optionsCopy.startTime instanceof Date) {\n        optionsCopy.startTime = optionsCopy.startTime.toISOString();\n      } else {\n        optionsCopy.startTime = new Date(optionsCopy.startTime).toISOString();\n      }\n    }\n    if (typeof optionsCopy.endTime !== 'undefined') {\n      if (!(optionsCopy.endTime instanceof Date) && !validator.isUTCDateString(optionsCopy.endTime)) {\n        throw new FirebaseRemoteConfigError('invalid-argument', 'endTime must be a valid Date object or a UTC date string.');\n      }\n      // Convert endTime to RFC3339 UTC \"Zulu\" format.\n      if (optionsCopy.endTime instanceof Date) {\n        optionsCopy.endTime = optionsCopy.endTime.toISOString();\n      } else {\n        optionsCopy.endTime = new Date(optionsCopy.endTime).toISOString();\n      }\n    }\n    // Remove undefined fields from optionsCopy\n    Object.keys(optionsCopy).forEach(key => typeof optionsCopy[key] === 'undefined' && delete optionsCopy[key]);\n    return optionsCopy;\n  }\n}\nexports.RemoteConfigApiClient = RemoteConfigApiClient;\nconst ERROR_CODE_MAPPING = {\n  ABORTED: 'aborted',\n  ALREADY_EXISTS: 'already-exists',\n  INVALID_ARGUMENT: 'invalid-argument',\n  INTERNAL: 'internal-error',\n  FAILED_PRECONDITION: 'failed-precondition',\n  NOT_FOUND: 'not-found',\n  OUT_OF_RANGE: 'out-of-range',\n  PERMISSION_DENIED: 'permission-denied',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  UNAUTHENTICATED: 'unauthenticated',\n  UNKNOWN: 'unknown-error'\n};\n/**\r\n * Firebase Remote Config error code structure. This extends PrefixedFirebaseError.\r\n *\r\n * @param {RemoteConfigErrorCode} code The error code.\r\n * @param {string} message The error message.\r\n * @constructor\r\n */\nclass FirebaseRemoteConfigError extends error_1.PrefixedFirebaseError {\n  constructor(code, message) {\n    super('remote-config', code, message);\n  }\n}\nexports.FirebaseRemoteConfigError = FirebaseRemoteConfigError;","map":{"version":3,"names":["Object","defineProperty","exports","value","FirebaseRemoteConfigError","RemoteConfigApiClient","api_request_1","require","error_1","utils","validator","deep_copy_1","FIREBASE_REMOTE_CONFIG_URL_BASE","process","env","FIREBASE_REMOTE_CONFIG_HEADERS","getSdkVersion","constructor","app","isNonNullObject","httpClient","AuthorizedHttpClient","getTemplate","getUrl","then","url","request","method","headers","send","resp","toRemoteConfigTemplate","catch","err","toFirebaseError","getTemplateAtVersion","versionNumber","data","validateVersionNumber","validateTemplate","template","validateInputRemoteConfigTemplate","sendPutRequest","etag","validateEtag","publishTemplate","options","ifMatch","force","rollback","listVersions","validateListVersionsOptions","getServerTemplate","toRemoteConfigServerTemplate","validateOnly","path","conditions","parameters","parameterGroups","version","getProjectIdPrefix","projectIdPrefix","Promise","resolve","findProjectId","projectId","isNonEmptyString","PrefixedFirebaseError","response","isJson","status","text","error","code","ERROR_CODE_MAPPING","message","customEtag","templateCopy","deepCopy","JSON","stringify","isArray","description","propertyName","isNumber","Number","isInteger","toString","optionsCopy","pageSize","pageToken","endVersionNumber","startTime","Date","isUTCDateString","toISOString","endTime","keys","forEach","key","ABORTED","ALREADY_EXISTS","INVALID_ARGUMENT","INTERNAL","FAILED_PRECONDITION","NOT_FOUND","OUT_OF_RANGE","PERMISSION_DENIED","RESOURCE_EXHAUSTED","UNAUTHENTICATED","UNKNOWN"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/firebase-admin/lib/remote-config/remote-config-api-client-internal.js"],"sourcesContent":["/*! firebase-admin v13.0.1 */\r\n\"use strict\";\r\n/*!\r\n * Copyright 2020 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FirebaseRemoteConfigError = exports.RemoteConfigApiClient = void 0;\r\nconst api_request_1 = require(\"../utils/api-request\");\r\nconst error_1 = require(\"../utils/error\");\r\nconst utils = require(\"../utils/index\");\r\nconst validator = require(\"../utils/validator\");\r\nconst deep_copy_1 = require(\"../utils/deep-copy\");\r\n// Remote Config backend constants\r\n/**\r\n  * Allows the `FIREBASE_REMOTE_CONFIG_URL_BASE` environment\r\n  * variable to override the default API endpoint URL.\r\n  */\r\nconst FIREBASE_REMOTE_CONFIG_URL_BASE = process.env.FIREBASE_REMOTE_CONFIG_URL_BASE || 'https://firebaseremoteconfig.googleapis.com';\r\nconst FIREBASE_REMOTE_CONFIG_HEADERS = {\r\n    'X-Firebase-Client': `fire-admin-node/${utils.getSdkVersion()}`,\r\n    // There is a known issue in which the ETag is not properly returned in cases where the request\r\n    // does not specify a compression type. Currently, it is required to include the header\r\n    // `Accept-Encoding: gzip` or equivalent in all requests.\r\n    // https://firebase.google.com/docs/remote-config/use-config-rest#etag_usage_and_forced_updates\r\n    'Accept-Encoding': 'gzip',\r\n};\r\n/**\r\n * Class that facilitates sending requests to the Firebase Remote Config backend API.\r\n *\r\n * @internal\r\n */\r\nclass RemoteConfigApiClient {\r\n    constructor(app) {\r\n        this.app = app;\r\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\r\n            throw new FirebaseRemoteConfigError('invalid-argument', 'First argument passed to admin.remoteConfig() must be a valid Firebase app instance.');\r\n        }\r\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\r\n    }\r\n    getTemplate() {\r\n        return this.getUrl()\r\n            .then((url) => {\r\n            const request = {\r\n                method: 'GET',\r\n                url: `${url}/remoteConfig`,\r\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS\r\n            };\r\n            return this.httpClient.send(request);\r\n        })\r\n            .then((resp) => {\r\n            return this.toRemoteConfigTemplate(resp);\r\n        })\r\n            .catch((err) => {\r\n            throw this.toFirebaseError(err);\r\n        });\r\n    }\r\n    getTemplateAtVersion(versionNumber) {\r\n        const data = { versionNumber: this.validateVersionNumber(versionNumber) };\r\n        return this.getUrl()\r\n            .then((url) => {\r\n            const request = {\r\n                method: 'GET',\r\n                url: `${url}/remoteConfig`,\r\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS,\r\n                data\r\n            };\r\n            return this.httpClient.send(request);\r\n        })\r\n            .then((resp) => {\r\n            return this.toRemoteConfigTemplate(resp);\r\n        })\r\n            .catch((err) => {\r\n            throw this.toFirebaseError(err);\r\n        });\r\n    }\r\n    validateTemplate(template) {\r\n        template = this.validateInputRemoteConfigTemplate(template);\r\n        return this.sendPutRequest(template, template.etag, true)\r\n            .then((resp) => {\r\n            // validating a template returns an etag with the suffix -0 means that your update\r\n            // was successfully validated. We set the etag back to the original etag of the template\r\n            // to allow future operations.\r\n            this.validateEtag(resp.headers['etag']);\r\n            return this.toRemoteConfigTemplate(resp, template.etag);\r\n        })\r\n            .catch((err) => {\r\n            throw this.toFirebaseError(err);\r\n        });\r\n    }\r\n    publishTemplate(template, options) {\r\n        template = this.validateInputRemoteConfigTemplate(template);\r\n        let ifMatch = template.etag;\r\n        if (options && options.force === true) {\r\n            // setting `If-Match: *` forces the Remote Config template to be updated\r\n            // and circumvent the ETag, and the protection from that it provides.\r\n            ifMatch = '*';\r\n        }\r\n        return this.sendPutRequest(template, ifMatch)\r\n            .then((resp) => {\r\n            return this.toRemoteConfigTemplate(resp);\r\n        })\r\n            .catch((err) => {\r\n            throw this.toFirebaseError(err);\r\n        });\r\n    }\r\n    rollback(versionNumber) {\r\n        const data = { versionNumber: this.validateVersionNumber(versionNumber) };\r\n        return this.getUrl()\r\n            .then((url) => {\r\n            const request = {\r\n                method: 'POST',\r\n                url: `${url}/remoteConfig:rollback`,\r\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS,\r\n                data\r\n            };\r\n            return this.httpClient.send(request);\r\n        })\r\n            .then((resp) => {\r\n            return this.toRemoteConfigTemplate(resp);\r\n        })\r\n            .catch((err) => {\r\n            throw this.toFirebaseError(err);\r\n        });\r\n    }\r\n    listVersions(options) {\r\n        if (typeof options !== 'undefined') {\r\n            options = this.validateListVersionsOptions(options);\r\n        }\r\n        return this.getUrl()\r\n            .then((url) => {\r\n            const request = {\r\n                method: 'GET',\r\n                url: `${url}/remoteConfig:listVersions`,\r\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS,\r\n                data: options\r\n            };\r\n            return this.httpClient.send(request);\r\n        })\r\n            .then((resp) => {\r\n            return resp.data;\r\n        })\r\n            .catch((err) => {\r\n            throw this.toFirebaseError(err);\r\n        });\r\n    }\r\n    getServerTemplate() {\r\n        return this.getUrl()\r\n            .then((url) => {\r\n            const request = {\r\n                method: 'GET',\r\n                url: `${url}/namespaces/firebase-server/serverRemoteConfig`,\r\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS\r\n            };\r\n            return this.httpClient.send(request);\r\n        })\r\n            .then((resp) => {\r\n            return this.toRemoteConfigServerTemplate(resp);\r\n        })\r\n            .catch((err) => {\r\n            throw this.toFirebaseError(err);\r\n        });\r\n    }\r\n    sendPutRequest(template, etag, validateOnly) {\r\n        let path = 'remoteConfig';\r\n        if (validateOnly) {\r\n            path += '?validate_only=true';\r\n        }\r\n        return this.getUrl()\r\n            .then((url) => {\r\n            const request = {\r\n                method: 'PUT',\r\n                url: `${url}/${path}`,\r\n                headers: { ...FIREBASE_REMOTE_CONFIG_HEADERS, 'If-Match': etag },\r\n                data: {\r\n                    conditions: template.conditions,\r\n                    parameters: template.parameters,\r\n                    parameterGroups: template.parameterGroups,\r\n                    version: template.version,\r\n                }\r\n            };\r\n            return this.httpClient.send(request);\r\n        });\r\n    }\r\n    getUrl() {\r\n        return this.getProjectIdPrefix()\r\n            .then((projectIdPrefix) => {\r\n            return `${FIREBASE_REMOTE_CONFIG_URL_BASE}/v1/${projectIdPrefix}`;\r\n        });\r\n    }\r\n    getProjectIdPrefix() {\r\n        if (this.projectIdPrefix) {\r\n            return Promise.resolve(this.projectIdPrefix);\r\n        }\r\n        return utils.findProjectId(this.app)\r\n            .then((projectId) => {\r\n            if (!validator.isNonEmptyString(projectId)) {\r\n                throw new FirebaseRemoteConfigError('unknown-error', 'Failed to determine project ID. Initialize the SDK with service account credentials, or '\r\n                    + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT '\r\n                    + 'environment variable.');\r\n            }\r\n            this.projectIdPrefix = `projects/${projectId}`;\r\n            return this.projectIdPrefix;\r\n        });\r\n    }\r\n    toFirebaseError(err) {\r\n        if (err instanceof error_1.PrefixedFirebaseError) {\r\n            return err;\r\n        }\r\n        const response = err.response;\r\n        if (!response.isJson()) {\r\n            return new FirebaseRemoteConfigError('unknown-error', `Unexpected response with status: ${response.status} and body: ${response.text}`);\r\n        }\r\n        const error = response.data.error || {};\r\n        let code = 'unknown-error';\r\n        if (error.status && error.status in ERROR_CODE_MAPPING) {\r\n            code = ERROR_CODE_MAPPING[error.status];\r\n        }\r\n        const message = error.message || `Unknown server error: ${response.text}`;\r\n        return new FirebaseRemoteConfigError(code, message);\r\n    }\r\n    /**\r\n     * Creates a RemoteConfigTemplate from the API response.\r\n     * If provided, customEtag is used instead of the etag returned in the API response.\r\n     *\r\n     * @param {HttpResponse} resp API response object.\r\n     * @param {string} customEtag A custom etag to replace the etag fom the API response (Optional).\r\n     */\r\n    toRemoteConfigTemplate(resp, customEtag) {\r\n        const etag = (typeof customEtag === 'undefined') ? resp.headers['etag'] : customEtag;\r\n        this.validateEtag(etag);\r\n        return {\r\n            conditions: resp.data.conditions,\r\n            parameters: resp.data.parameters,\r\n            parameterGroups: resp.data.parameterGroups,\r\n            etag,\r\n            version: resp.data.version,\r\n        };\r\n    }\r\n    /**\r\n     * Creates a RemoteConfigServerTemplate from the API response.\r\n     * If provided, customEtag is used instead of the etag returned in the API response.\r\n     *\r\n     * @param {HttpResponse} resp API response object.\r\n     * @param {string} customEtag A custom etag to replace the etag fom the API response (Optional).\r\n     */\r\n    toRemoteConfigServerTemplate(resp, customEtag) {\r\n        const etag = (typeof customEtag === 'undefined') ? resp.headers['etag'] : customEtag;\r\n        this.validateEtag(etag);\r\n        return {\r\n            conditions: resp.data.conditions,\r\n            parameters: resp.data.parameters,\r\n            etag,\r\n            version: resp.data.version,\r\n        };\r\n    }\r\n    /**\r\n     * Checks if the given RemoteConfigTemplate object is valid.\r\n     * The object must have valid parameters, parameter groups, conditions, and an etag.\r\n     * Removes output only properties from version metadata.\r\n     *\r\n     * @param {RemoteConfigTemplate} template A RemoteConfigTemplate object to be validated.\r\n     *\r\n     * @returns {RemoteConfigTemplate} The validated RemoteConfigTemplate object.\r\n     */\r\n    validateInputRemoteConfigTemplate(template) {\r\n        const templateCopy = (0, deep_copy_1.deepCopy)(template);\r\n        if (!validator.isNonNullObject(templateCopy)) {\r\n            throw new FirebaseRemoteConfigError('invalid-argument', `Invalid Remote Config template: ${JSON.stringify(templateCopy)}`);\r\n        }\r\n        if (!validator.isNonEmptyString(templateCopy.etag)) {\r\n            throw new FirebaseRemoteConfigError('invalid-argument', 'ETag must be a non-empty string.');\r\n        }\r\n        if (!validator.isNonNullObject(templateCopy.parameters)) {\r\n            throw new FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\r\n        }\r\n        if (!validator.isNonNullObject(templateCopy.parameterGroups)) {\r\n            throw new FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');\r\n        }\r\n        if (!validator.isArray(templateCopy.conditions)) {\r\n            throw new FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\r\n        }\r\n        if (typeof templateCopy.version !== 'undefined') {\r\n            // exclude output only properties and keep the only input property: description\r\n            templateCopy.version = { description: templateCopy.version.description };\r\n        }\r\n        return templateCopy;\r\n    }\r\n    /**\r\n     * Checks if a given version number is valid.\r\n     * A version number must be an integer or a string in int64 format.\r\n     * If valid, returns the string representation of the provided version number.\r\n     *\r\n     * @param {string|number} versionNumber A version number to be validated.\r\n     *\r\n     * @returns {string} The validated version number as a string.\r\n     */\r\n    validateVersionNumber(versionNumber, propertyName = 'versionNumber') {\r\n        if (!validator.isNonEmptyString(versionNumber) &&\r\n            !validator.isNumber(versionNumber)) {\r\n            throw new FirebaseRemoteConfigError('invalid-argument', `${propertyName} must be a non-empty string in int64 format or a number`);\r\n        }\r\n        if (!Number.isInteger(Number(versionNumber))) {\r\n            throw new FirebaseRemoteConfigError('invalid-argument', `${propertyName} must be an integer or a string in int64 format`);\r\n        }\r\n        return versionNumber.toString();\r\n    }\r\n    validateEtag(etag) {\r\n        if (!validator.isNonEmptyString(etag)) {\r\n            throw new FirebaseRemoteConfigError('invalid-argument', 'ETag header is not present in the server response.');\r\n        }\r\n    }\r\n    /**\r\n     * Checks if a given `ListVersionsOptions` object is valid. If successful, creates a copy of the\r\n     * options object and convert `startTime` and `endTime` to RFC3339 UTC \"Zulu\" format, if present.\r\n     *\r\n     * @param {ListVersionsOptions} options An options object to be validated.\r\n     *\r\n     * @returns {ListVersionsOptions} A copy of the provided options object with timestamps converted\r\n     * to UTC Zulu format.\r\n     */\r\n    validateListVersionsOptions(options) {\r\n        const optionsCopy = (0, deep_copy_1.deepCopy)(options);\r\n        if (!validator.isNonNullObject(optionsCopy)) {\r\n            throw new FirebaseRemoteConfigError('invalid-argument', 'ListVersionsOptions must be a non-null object.');\r\n        }\r\n        if (typeof optionsCopy.pageSize !== 'undefined') {\r\n            if (!validator.isNumber(optionsCopy.pageSize)) {\r\n                throw new FirebaseRemoteConfigError('invalid-argument', 'pageSize must be a number.');\r\n            }\r\n            if (optionsCopy.pageSize < 1 || optionsCopy.pageSize > 300) {\r\n                throw new FirebaseRemoteConfigError('invalid-argument', 'pageSize must be a number between 1 and 300 (inclusive).');\r\n            }\r\n        }\r\n        if (typeof optionsCopy.pageToken !== 'undefined' && !validator.isNonEmptyString(optionsCopy.pageToken)) {\r\n            throw new FirebaseRemoteConfigError('invalid-argument', 'pageToken must be a string value.');\r\n        }\r\n        if (typeof optionsCopy.endVersionNumber !== 'undefined') {\r\n            optionsCopy.endVersionNumber = this.validateVersionNumber(optionsCopy.endVersionNumber, 'endVersionNumber');\r\n        }\r\n        if (typeof optionsCopy.startTime !== 'undefined') {\r\n            if (!(optionsCopy.startTime instanceof Date) && !validator.isUTCDateString(optionsCopy.startTime)) {\r\n                throw new FirebaseRemoteConfigError('invalid-argument', 'startTime must be a valid Date object or a UTC date string.');\r\n            }\r\n            // Convert startTime to RFC3339 UTC \"Zulu\" format.\r\n            if (optionsCopy.startTime instanceof Date) {\r\n                optionsCopy.startTime = optionsCopy.startTime.toISOString();\r\n            }\r\n            else {\r\n                optionsCopy.startTime = new Date(optionsCopy.startTime).toISOString();\r\n            }\r\n        }\r\n        if (typeof optionsCopy.endTime !== 'undefined') {\r\n            if (!(optionsCopy.endTime instanceof Date) && !validator.isUTCDateString(optionsCopy.endTime)) {\r\n                throw new FirebaseRemoteConfigError('invalid-argument', 'endTime must be a valid Date object or a UTC date string.');\r\n            }\r\n            // Convert endTime to RFC3339 UTC \"Zulu\" format.\r\n            if (optionsCopy.endTime instanceof Date) {\r\n                optionsCopy.endTime = optionsCopy.endTime.toISOString();\r\n            }\r\n            else {\r\n                optionsCopy.endTime = new Date(optionsCopy.endTime).toISOString();\r\n            }\r\n        }\r\n        // Remove undefined fields from optionsCopy\r\n        Object.keys(optionsCopy).forEach(key => (typeof optionsCopy[key] === 'undefined') && delete optionsCopy[key]);\r\n        return optionsCopy;\r\n    }\r\n}\r\nexports.RemoteConfigApiClient = RemoteConfigApiClient;\r\nconst ERROR_CODE_MAPPING = {\r\n    ABORTED: 'aborted',\r\n    ALREADY_EXISTS: 'already-exists',\r\n    INVALID_ARGUMENT: 'invalid-argument',\r\n    INTERNAL: 'internal-error',\r\n    FAILED_PRECONDITION: 'failed-precondition',\r\n    NOT_FOUND: 'not-found',\r\n    OUT_OF_RANGE: 'out-of-range',\r\n    PERMISSION_DENIED: 'permission-denied',\r\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\r\n    UNAUTHENTICATED: 'unauthenticated',\r\n    UNKNOWN: 'unknown-error',\r\n};\r\n/**\r\n * Firebase Remote Config error code structure. This extends PrefixedFirebaseError.\r\n *\r\n * @param {RemoteConfigErrorCode} code The error code.\r\n * @param {string} message The error message.\r\n * @constructor\r\n */\r\nclass FirebaseRemoteConfigError extends error_1.PrefixedFirebaseError {\r\n    constructor(code, message) {\r\n        super('remote-config', code, message);\r\n    }\r\n}\r\nexports.FirebaseRemoteConfigError = FirebaseRemoteConfigError;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}