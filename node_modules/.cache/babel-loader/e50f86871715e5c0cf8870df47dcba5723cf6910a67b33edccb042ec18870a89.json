{"ast":null,"code":"/*! firebase-admin v13.0.1 */\n\"use strict\";\n\n/*!\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFirebaseError = createFirebaseError;\nexports.getErrorCode = getErrorCode;\nconst error_1 = require(\"../utils/error\");\nconst validator = require(\"../utils/validator\");\n/**\r\n * Creates a new `FirebaseMessagingError` by extracting the error code, message and other relevant\r\n * details from a `RequestResponseError` response.\r\n *\r\n * @param err - The `RequestResponseError` to convert into a Firebase error\r\n * @returns A Firebase error that can be returned to the user.\r\n */\nfunction createFirebaseError(err) {\n  if (err.response.isJson()) {\n    // For JSON responses, map the server response to a client-side error.\n    const json = err.response.data;\n    const errorCode = getErrorCode(json);\n    const errorMessage = getErrorMessage(json);\n    return error_1.FirebaseMessagingError.fromServerError(errorCode, errorMessage, json);\n  }\n  // Non-JSON response\n  let error;\n  switch (err.response.status) {\n    case 400:\n      error = error_1.MessagingClientErrorCode.INVALID_ARGUMENT;\n      break;\n    case 401:\n    case 403:\n      error = error_1.MessagingClientErrorCode.AUTHENTICATION_ERROR;\n      break;\n    case 500:\n      error = error_1.MessagingClientErrorCode.INTERNAL_ERROR;\n      break;\n    case 503:\n      error = error_1.MessagingClientErrorCode.SERVER_UNAVAILABLE;\n      break;\n    default:\n      // Treat non-JSON responses with unexpected status codes as unknown errors.\n      error = error_1.MessagingClientErrorCode.UNKNOWN_ERROR;\n  }\n  return new error_1.FirebaseMessagingError({\n    code: error.code,\n    message: `${error.message} Raw server response: \"${err.response.text}\". Status code: ` + `${err.response.status}.`\n  });\n}\n/**\r\n * @param response - The response to check for errors.\r\n * @returns The error code if present; null otherwise.\r\n */\nfunction getErrorCode(response) {\n  if (validator.isNonNullObject(response) && 'error' in response) {\n    const error = response.error;\n    if (validator.isString(error)) {\n      return error;\n    }\n    if (validator.isArray(error.details)) {\n      const fcmErrorType = 'type.googleapis.com/google.firebase.fcm.v1.FcmError';\n      for (const element of error.details) {\n        if (element['@type'] === fcmErrorType) {\n          return element.errorCode;\n        }\n      }\n    }\n    if ('status' in error) {\n      return error.status;\n    } else {\n      return error.message;\n    }\n  }\n  return null;\n}\n/**\r\n * Extracts error message from the given response object.\r\n *\r\n * @param response - The response to check for errors.\r\n * @returns The error message if present; null otherwise.\r\n */\nfunction getErrorMessage(response) {\n  if (validator.isNonNullObject(response) && 'error' in response && validator.isNonEmptyString(response.error.message)) {\n    return response.error.message;\n  }\n  return null;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createFirebaseError","getErrorCode","error_1","require","validator","err","response","isJson","json","data","errorCode","errorMessage","getErrorMessage","FirebaseMessagingError","fromServerError","error","status","MessagingClientErrorCode","INVALID_ARGUMENT","AUTHENTICATION_ERROR","INTERNAL_ERROR","SERVER_UNAVAILABLE","UNKNOWN_ERROR","code","message","text","isNonNullObject","isString","isArray","details","fcmErrorType","element","isNonEmptyString"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/firebase-admin/lib/messaging/messaging-errors-internal.js"],"sourcesContent":["/*! firebase-admin v13.0.1 */\r\n\"use strict\";\r\n/*!\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.createFirebaseError = createFirebaseError;\r\nexports.getErrorCode = getErrorCode;\r\nconst error_1 = require(\"../utils/error\");\r\nconst validator = require(\"../utils/validator\");\r\n/**\r\n * Creates a new `FirebaseMessagingError` by extracting the error code, message and other relevant\r\n * details from a `RequestResponseError` response.\r\n *\r\n * @param err - The `RequestResponseError` to convert into a Firebase error\r\n * @returns A Firebase error that can be returned to the user.\r\n */\r\nfunction createFirebaseError(err) {\r\n    if (err.response.isJson()) {\r\n        // For JSON responses, map the server response to a client-side error.\r\n        const json = err.response.data;\r\n        const errorCode = getErrorCode(json);\r\n        const errorMessage = getErrorMessage(json);\r\n        return error_1.FirebaseMessagingError.fromServerError(errorCode, errorMessage, json);\r\n    }\r\n    // Non-JSON response\r\n    let error;\r\n    switch (err.response.status) {\r\n        case 400:\r\n            error = error_1.MessagingClientErrorCode.INVALID_ARGUMENT;\r\n            break;\r\n        case 401:\r\n        case 403:\r\n            error = error_1.MessagingClientErrorCode.AUTHENTICATION_ERROR;\r\n            break;\r\n        case 500:\r\n            error = error_1.MessagingClientErrorCode.INTERNAL_ERROR;\r\n            break;\r\n        case 503:\r\n            error = error_1.MessagingClientErrorCode.SERVER_UNAVAILABLE;\r\n            break;\r\n        default:\r\n            // Treat non-JSON responses with unexpected status codes as unknown errors.\r\n            error = error_1.MessagingClientErrorCode.UNKNOWN_ERROR;\r\n    }\r\n    return new error_1.FirebaseMessagingError({\r\n        code: error.code,\r\n        message: `${error.message} Raw server response: \"${err.response.text}\". Status code: ` +\r\n            `${err.response.status}.`,\r\n    });\r\n}\r\n/**\r\n * @param response - The response to check for errors.\r\n * @returns The error code if present; null otherwise.\r\n */\r\nfunction getErrorCode(response) {\r\n    if (validator.isNonNullObject(response) && 'error' in response) {\r\n        const error = response.error;\r\n        if (validator.isString(error)) {\r\n            return error;\r\n        }\r\n        if (validator.isArray(error.details)) {\r\n            const fcmErrorType = 'type.googleapis.com/google.firebase.fcm.v1.FcmError';\r\n            for (const element of error.details) {\r\n                if (element['@type'] === fcmErrorType) {\r\n                    return element.errorCode;\r\n                }\r\n            }\r\n        }\r\n        if ('status' in error) {\r\n            return error.status;\r\n        }\r\n        else {\r\n            return error.message;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Extracts error message from the given response object.\r\n *\r\n * @param response - The response to check for errors.\r\n * @returns The error message if present; null otherwise.\r\n */\r\nfunction getErrorMessage(response) {\r\n    if (validator.isNonNullObject(response) &&\r\n        'error' in response &&\r\n        validator.isNonEmptyString(response.error.message)) {\r\n        return response.error.message;\r\n    }\r\n    return null;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}