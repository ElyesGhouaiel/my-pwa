{"ast":null,"code":"\"use strict\";\n\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OngoingCallPromise = exports.OngoingCall = void 0;\nconst status_1 = require(\"./status\");\nconst googleError_1 = require(\"./googleError\");\nclass OngoingCall {\n  /**\r\n   * OngoingCall manages callback, API calls, and cancellation\r\n   * of the API calls.\r\n   * @param {APICallback=} callback\r\n   *   The callback to be called asynchronously when the API call\r\n   *   finishes.\r\n   * @constructor\r\n   * @property {APICallback} callback\r\n   *   The callback function to be called.\r\n   * @private\r\n   */\n  constructor(callback) {\n    this.callback = callback;\n    this.completed = false;\n  }\n  /**\r\n   * Cancels the ongoing promise.\r\n   */\n  cancel() {\n    if (this.completed) {\n      return;\n    }\n    this.completed = true;\n    if (this.cancelFunc) {\n      this.cancelFunc();\n    } else {\n      const error = new googleError_1.GoogleError('cancelled');\n      error.code = status_1.Status.CANCELLED;\n      this.callback(error);\n    }\n  }\n  /**\r\n   * Call calls the specified function. Result will be used to fulfill\r\n   * the promise.\r\n   *\r\n   * @param {SimpleCallbackFunction} func\r\n   *   A function for an API call.\r\n   * @param {Object} argument\r\n   *   A request object.\r\n   */\n  call(func, argument) {\n    if (this.completed) {\n      return;\n    }\n    const canceller = func(argument, (err, response, next, rawResponse) => {\n      this.completed = true;\n      setImmediate(this.callback, err, response, next, rawResponse);\n    });\n    if (canceller instanceof Promise) {\n      canceller.catch(err => {\n        setImmediate(this.callback, new googleError_1.GoogleError(err), null, null, null);\n      });\n    }\n    this.cancelFunc = () => canceller.cancel();\n  }\n}\nexports.OngoingCall = OngoingCall;\nclass OngoingCallPromise extends OngoingCall {\n  /**\r\n   * GaxPromise is GRPCCallbackWrapper, but it holds a promise when\r\n   * the API call finishes.\r\n   * @constructor\r\n   * @private\r\n   */\n  constructor() {\n    let resolveCallback;\n    let rejectCallback;\n    const callback = (err, response, next, rawResponse) => {\n      if (err) {\n        // If gRPC metadata exist, parsed google.rpc.status details.\n        if (err.metadata) {\n          rejectCallback(googleError_1.GoogleError.parseGRPCStatusDetails(err));\n        } else {\n          rejectCallback(err);\n        }\n      } else if (response !== undefined) {\n        resolveCallback([response, next || null, rawResponse || null]);\n      } else {\n        throw new googleError_1.GoogleError('Neither error nor response are defined');\n      }\n    };\n    const promise = new Promise((resolve, reject) => {\n      resolveCallback = resolve;\n      rejectCallback = reject;\n    });\n    super(callback);\n    this.promise = promise;\n    this.promise.cancel = () => {\n      this.cancel();\n    };\n  }\n}\nexports.OngoingCallPromise = OngoingCallPromise;","map":{"version":3,"names":["Object","defineProperty","exports","value","OngoingCallPromise","OngoingCall","status_1","require","googleError_1","constructor","callback","completed","cancel","cancelFunc","error","GoogleError","code","Status","CANCELLED","call","func","argument","canceller","err","response","next","rawResponse","setImmediate","Promise","catch","resolveCallback","rejectCallback","metadata","parseGRPCStatusDetails","undefined","promise","resolve","reject"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/google-gax/build/src/call.js"],"sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.OngoingCallPromise = exports.OngoingCall = void 0;\r\nconst status_1 = require(\"./status\");\r\nconst googleError_1 = require(\"./googleError\");\r\nclass OngoingCall {\r\n    /**\r\n     * OngoingCall manages callback, API calls, and cancellation\r\n     * of the API calls.\r\n     * @param {APICallback=} callback\r\n     *   The callback to be called asynchronously when the API call\r\n     *   finishes.\r\n     * @constructor\r\n     * @property {APICallback} callback\r\n     *   The callback function to be called.\r\n     * @private\r\n     */\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n        this.completed = false;\r\n    }\r\n    /**\r\n     * Cancels the ongoing promise.\r\n     */\r\n    cancel() {\r\n        if (this.completed) {\r\n            return;\r\n        }\r\n        this.completed = true;\r\n        if (this.cancelFunc) {\r\n            this.cancelFunc();\r\n        }\r\n        else {\r\n            const error = new googleError_1.GoogleError('cancelled');\r\n            error.code = status_1.Status.CANCELLED;\r\n            this.callback(error);\r\n        }\r\n    }\r\n    /**\r\n     * Call calls the specified function. Result will be used to fulfill\r\n     * the promise.\r\n     *\r\n     * @param {SimpleCallbackFunction} func\r\n     *   A function for an API call.\r\n     * @param {Object} argument\r\n     *   A request object.\r\n     */\r\n    call(func, argument) {\r\n        if (this.completed) {\r\n            return;\r\n        }\r\n        const canceller = func(argument, (err, response, next, rawResponse) => {\r\n            this.completed = true;\r\n            setImmediate(this.callback, err, response, next, rawResponse);\r\n        });\r\n        if (canceller instanceof Promise) {\r\n            canceller.catch(err => {\r\n                setImmediate(this.callback, new googleError_1.GoogleError(err), null, null, null);\r\n            });\r\n        }\r\n        this.cancelFunc = () => canceller.cancel();\r\n    }\r\n}\r\nexports.OngoingCall = OngoingCall;\r\nclass OngoingCallPromise extends OngoingCall {\r\n    /**\r\n     * GaxPromise is GRPCCallbackWrapper, but it holds a promise when\r\n     * the API call finishes.\r\n     * @constructor\r\n     * @private\r\n     */\r\n    constructor() {\r\n        let resolveCallback;\r\n        let rejectCallback;\r\n        const callback = (err, response, next, rawResponse) => {\r\n            if (err) {\r\n                // If gRPC metadata exist, parsed google.rpc.status details.\r\n                if (err.metadata) {\r\n                    rejectCallback(googleError_1.GoogleError.parseGRPCStatusDetails(err));\r\n                }\r\n                else {\r\n                    rejectCallback(err);\r\n                }\r\n            }\r\n            else if (response !== undefined) {\r\n                resolveCallback([response, next || null, rawResponse || null]);\r\n            }\r\n            else {\r\n                throw new googleError_1.GoogleError('Neither error nor response are defined');\r\n            }\r\n        };\r\n        const promise = new Promise((resolve, reject) => {\r\n            resolveCallback = resolve;\r\n            rejectCallback = reject;\r\n        });\r\n        super(callback);\r\n        this.promise = promise;\r\n        this.promise.cancel = () => {\r\n            this.cancel();\r\n        };\r\n    }\r\n}\r\nexports.OngoingCallPromise = OngoingCallPromise;\r\n//# sourceMappingURL=call.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAGF,OAAO,CAACG,WAAW,GAAG,KAAK,CAAC;AACzD,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMC,aAAa,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC9C,MAAMF,WAAW,CAAC;EACd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACII,WAAWA,CAACC,QAAQ,EAAE;IAClB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,SAAS,GAAG,KAAK;EAC1B;EACA;AACJ;AACA;EACIC,MAAMA,CAAA,EAAG;IACL,IAAI,IAAI,CAACD,SAAS,EAAE;MAChB;IACJ;IACA,IAAI,CAACA,SAAS,GAAG,IAAI;IACrB,IAAI,IAAI,CAACE,UAAU,EAAE;MACjB,IAAI,CAACA,UAAU,CAAC,CAAC;IACrB,CAAC,MACI;MACD,MAAMC,KAAK,GAAG,IAAIN,aAAa,CAACO,WAAW,CAAC,WAAW,CAAC;MACxDD,KAAK,CAACE,IAAI,GAAGV,QAAQ,CAACW,MAAM,CAACC,SAAS;MACtC,IAAI,CAACR,QAAQ,CAACI,KAAK,CAAC;IACxB;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIK,IAAIA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IACjB,IAAI,IAAI,CAACV,SAAS,EAAE;MAChB;IACJ;IACA,MAAMW,SAAS,GAAGF,IAAI,CAACC,QAAQ,EAAE,CAACE,GAAG,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,WAAW,KAAK;MACnE,IAAI,CAACf,SAAS,GAAG,IAAI;MACrBgB,YAAY,CAAC,IAAI,CAACjB,QAAQ,EAAEa,GAAG,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,WAAW,CAAC;IACjE,CAAC,CAAC;IACF,IAAIJ,SAAS,YAAYM,OAAO,EAAE;MAC9BN,SAAS,CAACO,KAAK,CAACN,GAAG,IAAI;QACnBI,YAAY,CAAC,IAAI,CAACjB,QAAQ,EAAE,IAAIF,aAAa,CAACO,WAAW,CAACQ,GAAG,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;MACrF,CAAC,CAAC;IACN;IACA,IAAI,CAACV,UAAU,GAAG,MAAMS,SAAS,CAACV,MAAM,CAAC,CAAC;EAC9C;AACJ;AACAV,OAAO,CAACG,WAAW,GAAGA,WAAW;AACjC,MAAMD,kBAAkB,SAASC,WAAW,CAAC;EACzC;AACJ;AACA;AACA;AACA;AACA;EACII,WAAWA,CAAA,EAAG;IACV,IAAIqB,eAAe;IACnB,IAAIC,cAAc;IAClB,MAAMrB,QAAQ,GAAGA,CAACa,GAAG,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,WAAW,KAAK;MACnD,IAAIH,GAAG,EAAE;QACL;QACA,IAAIA,GAAG,CAACS,QAAQ,EAAE;UACdD,cAAc,CAACvB,aAAa,CAACO,WAAW,CAACkB,sBAAsB,CAACV,GAAG,CAAC,CAAC;QACzE,CAAC,MACI;UACDQ,cAAc,CAACR,GAAG,CAAC;QACvB;MACJ,CAAC,MACI,IAAIC,QAAQ,KAAKU,SAAS,EAAE;QAC7BJ,eAAe,CAAC,CAACN,QAAQ,EAAEC,IAAI,IAAI,IAAI,EAAEC,WAAW,IAAI,IAAI,CAAC,CAAC;MAClE,CAAC,MACI;QACD,MAAM,IAAIlB,aAAa,CAACO,WAAW,CAAC,wCAAwC,CAAC;MACjF;IACJ,CAAC;IACD,MAAMoB,OAAO,GAAG,IAAIP,OAAO,CAAC,CAACQ,OAAO,EAAEC,MAAM,KAAK;MAC7CP,eAAe,GAAGM,OAAO;MACzBL,cAAc,GAAGM,MAAM;IAC3B,CAAC,CAAC;IACF,KAAK,CAAC3B,QAAQ,CAAC;IACf,IAAI,CAACyB,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACA,OAAO,CAACvB,MAAM,GAAG,MAAM;MACxB,IAAI,CAACA,MAAM,CAAC,CAAC;IACjB,CAAC;EACL;AACJ;AACAV,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}