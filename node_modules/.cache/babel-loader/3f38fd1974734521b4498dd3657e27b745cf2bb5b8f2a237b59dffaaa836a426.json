{"ast":null,"code":"\"use strict\";\n\n/*!\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FieldPath = exports.QualifiedResourcePath = exports.ResourcePath = exports.DEFAULT_DATABASE_ID = void 0;\nexports.validateResourcePath = validateResourcePath;\nexports.validateFieldPath = validateFieldPath;\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\n/*!\r\n * The default database ID for this Firestore client. We do not yet expose the\r\n * ability to use different databases.\r\n */\nexports.DEFAULT_DATABASE_ID = '(default)';\n/*!\r\n * A regular expression to verify an absolute Resource Path in Firestore. It\r\n * extracts the project ID, the database name and the relative resource path\r\n * if available.\r\n *\r\n * @type {RegExp}\r\n */\nconst RESOURCE_PATH_RE =\n// Note: [\\s\\S] matches all characters including newlines.\n/^projects\\/([^/]*)\\/databases\\/([^/]*)(?:\\/documents\\/)?([\\s\\S]*)$/;\n/*!\r\n * A regular expression to verify whether a field name can be passed to the\r\n * backend without escaping.\r\n *\r\n * @type {RegExp}\r\n */\nconst UNESCAPED_FIELD_NAME_RE = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/*!\r\n * A regular expression to verify field paths that are passed to the API as\r\n * strings. Field paths that do not match this expression have to be provided\r\n * as a [FieldPath]{@link FieldPath} object.\r\n *\r\n * @type {RegExp}\r\n */\nconst FIELD_PATH_RE = /^[^*~/[\\]]+$/;\n/**\r\n * An abstract class representing a Firestore path.\r\n *\r\n * Subclasses have to implement `split()` and `canonicalString()`.\r\n *\r\n * @private\r\n * @internal\r\n * @class\r\n */\nclass Path {\n  /**\r\n   * Creates a new Path with the given segments.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @private\r\n   * @param segments Sequence of parts of a path.\r\n   */\n  constructor(segments) {\n    this.segments = segments;\n  }\n  /**\r\n   * Returns the number of segments of this field path.\r\n   *\r\n   * @private\r\n   * @internal\r\n   */\n  get size() {\n    return this.segments.length;\n  }\n  /**\r\n   * Create a child path beneath the current level.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @param relativePath Relative path to append to the current path.\r\n   * @returns The new path.\r\n   */\n  append(relativePath) {\n    if (relativePath instanceof Path) {\n      return this.construct(this.segments.concat(relativePath.segments));\n    }\n    return this.construct(this.segments.concat(this.split(relativePath)));\n  }\n  /**\r\n   * Returns the path of the parent node.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @returns The new path or null if we are already at the root.\r\n   */\n  parent() {\n    if (this.segments.length === 0) {\n      return null;\n    }\n    return this.construct(this.segments.slice(0, this.segments.length - 1));\n  }\n  /**\r\n   * Checks whether the current path is a prefix of the specified path.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @param other The path to check against.\r\n   * @returns 'true' iff the current path is a prefix match with 'other'.\r\n   */\n  isPrefixOf(other) {\n    if (other.segments.length < this.segments.length) {\n      return false;\n    }\n    for (let i = 0; i < this.segments.length; i++) {\n      if (this.segments[i] !== other.segments[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\r\n   * Compare the current path against another Path object.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @param other The path to compare to.\r\n   * @returns -1 if current < other, 1 if current > other, 0 if equal\r\n   */\n  compareTo(other) {\n    const len = Math.min(this.segments.length, other.segments.length);\n    for (let i = 0; i < len; i++) {\n      if (this.segments[i] < other.segments[i]) {\n        return -1;\n      }\n      if (this.segments[i] > other.segments[i]) {\n        return 1;\n      }\n    }\n    if (this.segments.length < other.segments.length) {\n      return -1;\n    }\n    if (this.segments.length > other.segments.length) {\n      return 1;\n    }\n    return 0;\n  }\n  /**\r\n   * Returns a copy of the underlying segments.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @returns A copy of the segments that make up this path.\r\n   */\n  toArray() {\n    return this.segments.slice();\n  }\n  /**\r\n   * Pops the last segment from this `Path` and returns a newly constructed\r\n   * `Path`.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @returns The newly created Path.\r\n   */\n  popLast() {\n    this.segments.pop();\n    return this.construct(this.segments);\n  }\n  /**\r\n   * Returns true if this `Path` is equal to the provided value.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @param other The value to compare against.\r\n   * @return true if this `Path` is equal to the provided value.\r\n   */\n  isEqual(other) {\n    return this === other || this.compareTo(other) === 0;\n  }\n}\n/**\r\n * A slash-separated path for navigating resources within the current Firestore\r\n * instance.\r\n *\r\n * @private\r\n * @internal\r\n */\nclass ResourcePath extends Path {\n  /**\r\n   * Constructs a ResourcePath.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @param segments Sequence of names of the parts of the path.\r\n   */\n  constructor(...segments) {\n    super(segments);\n  }\n  /**\r\n   * Indicates whether this path points to a document.\r\n   * @private\r\n   * @internal\r\n   */\n  get isDocument() {\n    return this.segments.length > 0 && this.segments.length % 2 === 0;\n  }\n  /**\r\n   * Indicates whether this path points to a collection.\r\n   * @private\r\n   * @internal\r\n   */\n  get isCollection() {\n    return this.segments.length % 2 === 1;\n  }\n  /**\r\n   * The last component of the path.\r\n   * @private\r\n   * @internal\r\n   */\n  get id() {\n    if (this.segments.length > 0) {\n      return this.segments[this.segments.length - 1];\n    }\n    return null;\n  }\n  /**\r\n   * Returns the location of this path relative to the root of the project's\r\n   * database.\r\n   * @private\r\n   * @internal\r\n   */\n  get relativeName() {\n    return this.segments.join('/');\n  }\n  /**\r\n   * Constructs a new instance of ResourcePath.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @param segments Sequence of parts of the path.\r\n   * @returns The newly created ResourcePath.\r\n   */\n  construct(segments) {\n    return new ResourcePath(...segments);\n  }\n  /**\r\n   * Splits a string into path segments, using slashes as separators.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @param relativePath The path to split.\r\n   * @returns The split path segments.\r\n   */\n  split(relativePath) {\n    // We may have an empty segment at the beginning or end if they had a\n    // leading or trailing slash (which we allow).\n    return relativePath.split('/').filter(segment => segment.length > 0);\n  }\n  /**\r\n   * Converts this path to a fully qualified ResourcePath.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @param projectId The project ID of the current Firestore project.\r\n   * @return A fully-qualified resource path pointing to the same element.\r\n   */\n  toQualifiedResourcePath(projectId, databaseId) {\n    return new QualifiedResourcePath(projectId, databaseId, ...this.segments);\n  }\n}\nexports.ResourcePath = ResourcePath;\n/**\r\n * A default instance pointing to the root collection.\r\n * @private\r\n * @internal\r\n */\nResourcePath.EMPTY = new ResourcePath();\n/**\r\n * A slash-separated path that includes a project and database ID for referring\r\n * to resources in any Firestore project.\r\n *\r\n * @private\r\n * @internal\r\n */\nclass QualifiedResourcePath extends ResourcePath {\n  /**\r\n   * Constructs a Firestore Resource Path.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @param projectId The Firestore project id.\r\n   * @param databaseId The Firestore database id.\r\n   * @param segments Sequence of names of the parts of the path.\r\n   */\n  constructor(projectId, databaseId, ...segments) {\n    super(...segments);\n    this.projectId = projectId;\n    this.databaseId = databaseId;\n  }\n  /**\r\n   * String representation of the path relative to the database root.\r\n   * @private\r\n   * @internal\r\n   */\n  get relativeName() {\n    return this.segments.join('/');\n  }\n  /**\r\n   * Creates a resource path from an absolute Firestore path.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @param absolutePath A string representation of a Resource Path.\r\n   * @returns The new ResourcePath.\r\n   */\n  static fromSlashSeparatedString(absolutePath) {\n    const elements = RESOURCE_PATH_RE.exec(absolutePath);\n    if (elements) {\n      const project = elements[1];\n      const database = elements[2];\n      const path = elements[3];\n      return new QualifiedResourcePath(project, database).append(path);\n    }\n    throw new Error(`Resource name '${absolutePath}' is not valid.`);\n  }\n  /**\r\n   * Create a child path beneath the current level.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @param relativePath Relative path to append to the current path.\r\n   * @returns The new path.\r\n   */\n  append(relativePath) {\n    // `super.append()` calls `QualifiedResourcePath.construct()` when invoked\n    // from here and returns a QualifiedResourcePath.\n    return super.append(relativePath);\n  }\n  /**\r\n   * Create a child path beneath the current level.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @returns The new path.\r\n   */\n  parent() {\n    return super.parent();\n  }\n  /**\r\n   * String representation of a ResourcePath as expected by the API.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @returns The representation as expected by the API.\r\n   */\n  get formattedName() {\n    const components = ['projects', this.projectId, 'databases', this.databaseId, 'documents', ...this.segments];\n    return components.join('/');\n  }\n  /**\r\n   * Constructs a new instance of ResourcePath. We need this instead of using\r\n   * the normal constructor because polymorphic 'this' doesn't work on static\r\n   * methods.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @param segments Sequence of names of the parts of the path.\r\n   * @returns The newly created QualifiedResourcePath.\r\n   */\n  construct(segments) {\n    return new QualifiedResourcePath(this.projectId, this.databaseId, ...segments);\n  }\n  /**\r\n   * Convenience method to match the ResourcePath API. This method always\r\n   * returns the current instance.\r\n   *\r\n   * @private\r\n   * @internal\r\n   */\n  toQualifiedResourcePath() {\n    return this;\n  }\n  /**\r\n   * Compare the current path against another ResourcePath object.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @param other The path to compare to.\r\n   * @returns -1 if current < other, 1 if current > other, 0 if equal\r\n   */\n  compareTo(other) {\n    if (other instanceof QualifiedResourcePath) {\n      if (this.projectId < other.projectId) {\n        return -1;\n      }\n      if (this.projectId > other.projectId) {\n        return 1;\n      }\n      if (this.databaseId < other.databaseId) {\n        return -1;\n      }\n      if (this.databaseId > other.databaseId) {\n        return 1;\n      }\n    }\n    return super.compareTo(other);\n  }\n  /**\r\n   * Converts this ResourcePath to the Firestore Proto representation.\r\n   * @private\r\n   * @internal\r\n   */\n  toProto() {\n    return {\n      referenceValue: this.formattedName\n    };\n  }\n}\nexports.QualifiedResourcePath = QualifiedResourcePath;\n/**\r\n * Validates that the given string can be used as a relative or absolute\r\n * resource path.\r\n *\r\n * @private\r\n * @internal\r\n * @param arg The argument name or argument index (for varargs methods).\r\n * @param resourcePath The path to validate.\r\n * @throws if the string can't be used as a resource path.\r\n */\nfunction validateResourcePath(arg, resourcePath) {\n  if (typeof resourcePath !== 'string' || resourcePath === '') {\n    throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'resource path')} Path must be a non-empty string.`);\n  }\n  if (resourcePath.indexOf('//') >= 0) {\n    throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'resource path')} Paths must not contain //.`);\n  }\n}\n/**\r\n * A dot-separated path for navigating sub-objects (e.g. nested maps) within a document.\r\n *\r\n * @class\r\n */\nclass FieldPath extends Path {\n  /**\r\n   * Constructs a Firestore Field Path.\r\n   *\r\n   * @param {...string} segments Sequence of field names that form this path.\r\n   *\r\n   * @example\r\n   * ```\r\n   * let query = firestore.collection('col');\r\n   * let fieldPath = new FieldPath('f.o.o', 'bar');\r\n   *\r\n   * query.where(fieldPath, '==', 42).get().then(snapshot => {\r\n   *   snapshot.forEach(document => {\r\n   *     console.log(`Document contains {'f.o.o' : {'bar' : 42}}`);\r\n   *   });\r\n   * });\r\n   * ```\r\n   */\n  constructor(...segments) {\n    if (Array.isArray(segments[0])) {\n      throw new Error('The FieldPath constructor no longer supports an array as its first argument. ' + 'Please unpack your array and call FieldPath() with individual arguments.');\n    }\n    (0, validate_1.validateMinNumberOfArguments)('FieldPath', segments, 1);\n    for (let i = 0; i < segments.length; ++i) {\n      (0, validate_1.validateString)(i, segments[i]);\n      if (segments[i].length === 0) {\n        throw new Error(`Element at index ${i} should not be an empty string.`);\n      }\n    }\n    super(segments);\n  }\n  /**\r\n   * A special FieldPath value to refer to the ID of a document. It can be used\r\n   * in queries to sort or filter by the document ID.\r\n   *\r\n   * @returns {FieldPath}\r\n   */\n  static documentId() {\n    return FieldPath._DOCUMENT_ID;\n  }\n  /**\r\n   * Turns a field path argument into a [FieldPath]{@link FieldPath}.\r\n   * Supports FieldPaths as input (which are passed through) and dot-separated\r\n   * strings.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @param {string|FieldPath} fieldPath The FieldPath to create.\r\n   * @returns {FieldPath} A field path representation.\r\n   */\n  static fromArgument(fieldPath) {\n    // validateFieldPath() is used in all public API entry points to validate\n    // that fromArgument() is only called with a Field Path or a string.\n    return fieldPath instanceof FieldPath ? fieldPath : new FieldPath(...fieldPath.split('.'));\n  }\n  /**\r\n   * String representation of a FieldPath as expected by the API.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @override\r\n   * @returns {string} The representation as expected by the API.\r\n   */\n  get formattedName() {\n    return this.segments.map(str => {\n      return UNESCAPED_FIELD_NAME_RE.test(str) ? str : '`' + str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`') + '`';\n    }).join('.');\n  }\n  /**\r\n   * Returns a string representation of this path.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @returns A string representing this path.\r\n   */\n  toString() {\n    return this.formattedName;\n  }\n  /**\r\n   * Splits a string into path segments, using dots as separators.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @override\r\n   * @param {string} fieldPath The path to split.\r\n   * @returns {Array.<string>} - The split path segments.\r\n   */\n  split(fieldPath) {\n    return fieldPath.split('.');\n  }\n  /**\r\n   * Constructs a new instance of FieldPath. We need this instead of using\r\n   * the normal constructor because polymorphic 'this' doesn't work on static\r\n   * methods.\r\n   *\r\n   * @private\r\n   * @internal\r\n   * @override\r\n   * @param segments Sequence of field names.\r\n   * @returns The newly created FieldPath.\r\n   */\n  construct(segments) {\n    return new FieldPath(...segments);\n  }\n  /**\r\n   * Returns true if this `FieldPath` is equal to the provided value.\r\n   *\r\n   * @param {*} other The value to compare against.\r\n   * @return {boolean} true if this `FieldPath` is equal to the provided value.\r\n   */\n  isEqual(other) {\n    return super.isEqual(other);\n  }\n}\nexports.FieldPath = FieldPath;\n/**\r\n * A special sentinel value to refer to the ID of a document.\r\n *\r\n * @private\r\n * @internal\r\n */\nFieldPath._DOCUMENT_ID = new FieldPath('__name__');\n/**\r\n * Validates that the provided value can be used as a field path argument.\r\n *\r\n * @private\r\n * @internal\r\n * @param arg The argument name or argument index (for varargs methods).\r\n * @param fieldPath The value to verify.\r\n * @throws if the string can't be used as a field path.\r\n */\nfunction validateFieldPath(arg, fieldPath) {\n  if (fieldPath instanceof FieldPath) {\n    return;\n  }\n  if (fieldPath === undefined) {\n    throw new Error((0, validate_1.invalidArgumentMessage)(arg, 'field path') + ' The path cannot be omitted.');\n  }\n  if ((0, util_1.isObject)(fieldPath) && fieldPath.constructor.name === 'FieldPath') {\n    throw new Error((0, validate_1.customObjectMessage)(arg, fieldPath));\n  }\n  if (typeof fieldPath !== 'string') {\n    throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'field path')} Paths can only be specified as strings or via a FieldPath object.`);\n  }\n  if (fieldPath.indexOf('..') >= 0) {\n    throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'field path')} Paths must not contain \"..\" in them.`);\n  }\n  if (fieldPath.startsWith('.') || fieldPath.endsWith('.')) {\n    throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'field path')} Paths must not start or end with \".\".`);\n  }\n  if (!FIELD_PATH_RE.test(fieldPath)) {\n    throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'field path')} Paths can't be empty and must not contain\n    \"*~/[]\".`);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","FieldPath","QualifiedResourcePath","ResourcePath","DEFAULT_DATABASE_ID","validateResourcePath","validateFieldPath","util_1","require","validate_1","RESOURCE_PATH_RE","UNESCAPED_FIELD_NAME_RE","FIELD_PATH_RE","Path","constructor","segments","size","length","append","relativePath","construct","concat","split","parent","slice","isPrefixOf","other","i","compareTo","len","Math","min","toArray","popLast","pop","isEqual","isDocument","isCollection","id","relativeName","join","filter","segment","toQualifiedResourcePath","projectId","databaseId","EMPTY","fromSlashSeparatedString","absolutePath","elements","exec","project","database","path","Error","formattedName","components","toProto","referenceValue","arg","resourcePath","invalidArgumentMessage","indexOf","Array","isArray","validateMinNumberOfArguments","validateString","documentId","_DOCUMENT_ID","fromArgument","fieldPath","map","str","test","replace","toString","undefined","isObject","name","customObjectMessage","startsWith","endsWith"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/@google-cloud/firestore/build/src/path.js"],"sourcesContent":["\"use strict\";\r\n/*!\r\n * Copyright 2017 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FieldPath = exports.QualifiedResourcePath = exports.ResourcePath = exports.DEFAULT_DATABASE_ID = void 0;\r\nexports.validateResourcePath = validateResourcePath;\r\nexports.validateFieldPath = validateFieldPath;\r\nconst util_1 = require(\"./util\");\r\nconst validate_1 = require(\"./validate\");\r\n/*!\r\n * The default database ID for this Firestore client. We do not yet expose the\r\n * ability to use different databases.\r\n */\r\nexports.DEFAULT_DATABASE_ID = '(default)';\r\n/*!\r\n * A regular expression to verify an absolute Resource Path in Firestore. It\r\n * extracts the project ID, the database name and the relative resource path\r\n * if available.\r\n *\r\n * @type {RegExp}\r\n */\r\nconst RESOURCE_PATH_RE = \r\n// Note: [\\s\\S] matches all characters including newlines.\r\n/^projects\\/([^/]*)\\/databases\\/([^/]*)(?:\\/documents\\/)?([\\s\\S]*)$/;\r\n/*!\r\n * A regular expression to verify whether a field name can be passed to the\r\n * backend without escaping.\r\n *\r\n * @type {RegExp}\r\n */\r\nconst UNESCAPED_FIELD_NAME_RE = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\r\n/*!\r\n * A regular expression to verify field paths that are passed to the API as\r\n * strings. Field paths that do not match this expression have to be provided\r\n * as a [FieldPath]{@link FieldPath} object.\r\n *\r\n * @type {RegExp}\r\n */\r\nconst FIELD_PATH_RE = /^[^*~/[\\]]+$/;\r\n/**\r\n * An abstract class representing a Firestore path.\r\n *\r\n * Subclasses have to implement `split()` and `canonicalString()`.\r\n *\r\n * @private\r\n * @internal\r\n * @class\r\n */\r\nclass Path {\r\n    /**\r\n     * Creates a new Path with the given segments.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @private\r\n     * @param segments Sequence of parts of a path.\r\n     */\r\n    constructor(segments) {\r\n        this.segments = segments;\r\n    }\r\n    /**\r\n     * Returns the number of segments of this field path.\r\n     *\r\n     * @private\r\n     * @internal\r\n     */\r\n    get size() {\r\n        return this.segments.length;\r\n    }\r\n    /**\r\n     * Create a child path beneath the current level.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @param relativePath Relative path to append to the current path.\r\n     * @returns The new path.\r\n     */\r\n    append(relativePath) {\r\n        if (relativePath instanceof Path) {\r\n            return this.construct(this.segments.concat(relativePath.segments));\r\n        }\r\n        return this.construct(this.segments.concat(this.split(relativePath)));\r\n    }\r\n    /**\r\n     * Returns the path of the parent node.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @returns The new path or null if we are already at the root.\r\n     */\r\n    parent() {\r\n        if (this.segments.length === 0) {\r\n            return null;\r\n        }\r\n        return this.construct(this.segments.slice(0, this.segments.length - 1));\r\n    }\r\n    /**\r\n     * Checks whether the current path is a prefix of the specified path.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @param other The path to check against.\r\n     * @returns 'true' iff the current path is a prefix match with 'other'.\r\n     */\r\n    isPrefixOf(other) {\r\n        if (other.segments.length < this.segments.length) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < this.segments.length; i++) {\r\n            if (this.segments[i] !== other.segments[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Compare the current path against another Path object.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @param other The path to compare to.\r\n     * @returns -1 if current < other, 1 if current > other, 0 if equal\r\n     */\r\n    compareTo(other) {\r\n        const len = Math.min(this.segments.length, other.segments.length);\r\n        for (let i = 0; i < len; i++) {\r\n            if (this.segments[i] < other.segments[i]) {\r\n                return -1;\r\n            }\r\n            if (this.segments[i] > other.segments[i]) {\r\n                return 1;\r\n            }\r\n        }\r\n        if (this.segments.length < other.segments.length) {\r\n            return -1;\r\n        }\r\n        if (this.segments.length > other.segments.length) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n     * Returns a copy of the underlying segments.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @returns A copy of the segments that make up this path.\r\n     */\r\n    toArray() {\r\n        return this.segments.slice();\r\n    }\r\n    /**\r\n     * Pops the last segment from this `Path` and returns a newly constructed\r\n     * `Path`.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @returns The newly created Path.\r\n     */\r\n    popLast() {\r\n        this.segments.pop();\r\n        return this.construct(this.segments);\r\n    }\r\n    /**\r\n     * Returns true if this `Path` is equal to the provided value.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @param other The value to compare against.\r\n     * @return true if this `Path` is equal to the provided value.\r\n     */\r\n    isEqual(other) {\r\n        return this === other || this.compareTo(other) === 0;\r\n    }\r\n}\r\n/**\r\n * A slash-separated path for navigating resources within the current Firestore\r\n * instance.\r\n *\r\n * @private\r\n * @internal\r\n */\r\nclass ResourcePath extends Path {\r\n    /**\r\n     * Constructs a ResourcePath.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @param segments Sequence of names of the parts of the path.\r\n     */\r\n    constructor(...segments) {\r\n        super(segments);\r\n    }\r\n    /**\r\n     * Indicates whether this path points to a document.\r\n     * @private\r\n     * @internal\r\n     */\r\n    get isDocument() {\r\n        return this.segments.length > 0 && this.segments.length % 2 === 0;\r\n    }\r\n    /**\r\n     * Indicates whether this path points to a collection.\r\n     * @private\r\n     * @internal\r\n     */\r\n    get isCollection() {\r\n        return this.segments.length % 2 === 1;\r\n    }\r\n    /**\r\n     * The last component of the path.\r\n     * @private\r\n     * @internal\r\n     */\r\n    get id() {\r\n        if (this.segments.length > 0) {\r\n            return this.segments[this.segments.length - 1];\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the location of this path relative to the root of the project's\r\n     * database.\r\n     * @private\r\n     * @internal\r\n     */\r\n    get relativeName() {\r\n        return this.segments.join('/');\r\n    }\r\n    /**\r\n     * Constructs a new instance of ResourcePath.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @param segments Sequence of parts of the path.\r\n     * @returns The newly created ResourcePath.\r\n     */\r\n    construct(segments) {\r\n        return new ResourcePath(...segments);\r\n    }\r\n    /**\r\n     * Splits a string into path segments, using slashes as separators.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @param relativePath The path to split.\r\n     * @returns The split path segments.\r\n     */\r\n    split(relativePath) {\r\n        // We may have an empty segment at the beginning or end if they had a\r\n        // leading or trailing slash (which we allow).\r\n        return relativePath.split('/').filter(segment => segment.length > 0);\r\n    }\r\n    /**\r\n     * Converts this path to a fully qualified ResourcePath.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @param projectId The project ID of the current Firestore project.\r\n     * @return A fully-qualified resource path pointing to the same element.\r\n     */\r\n    toQualifiedResourcePath(projectId, databaseId) {\r\n        return new QualifiedResourcePath(projectId, databaseId, ...this.segments);\r\n    }\r\n}\r\nexports.ResourcePath = ResourcePath;\r\n/**\r\n * A default instance pointing to the root collection.\r\n * @private\r\n * @internal\r\n */\r\nResourcePath.EMPTY = new ResourcePath();\r\n/**\r\n * A slash-separated path that includes a project and database ID for referring\r\n * to resources in any Firestore project.\r\n *\r\n * @private\r\n * @internal\r\n */\r\nclass QualifiedResourcePath extends ResourcePath {\r\n    /**\r\n     * Constructs a Firestore Resource Path.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @param projectId The Firestore project id.\r\n     * @param databaseId The Firestore database id.\r\n     * @param segments Sequence of names of the parts of the path.\r\n     */\r\n    constructor(projectId, databaseId, ...segments) {\r\n        super(...segments);\r\n        this.projectId = projectId;\r\n        this.databaseId = databaseId;\r\n    }\r\n    /**\r\n     * String representation of the path relative to the database root.\r\n     * @private\r\n     * @internal\r\n     */\r\n    get relativeName() {\r\n        return this.segments.join('/');\r\n    }\r\n    /**\r\n     * Creates a resource path from an absolute Firestore path.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @param absolutePath A string representation of a Resource Path.\r\n     * @returns The new ResourcePath.\r\n     */\r\n    static fromSlashSeparatedString(absolutePath) {\r\n        const elements = RESOURCE_PATH_RE.exec(absolutePath);\r\n        if (elements) {\r\n            const project = elements[1];\r\n            const database = elements[2];\r\n            const path = elements[3];\r\n            return new QualifiedResourcePath(project, database).append(path);\r\n        }\r\n        throw new Error(`Resource name '${absolutePath}' is not valid.`);\r\n    }\r\n    /**\r\n     * Create a child path beneath the current level.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @param relativePath Relative path to append to the current path.\r\n     * @returns The new path.\r\n     */\r\n    append(relativePath) {\r\n        // `super.append()` calls `QualifiedResourcePath.construct()` when invoked\r\n        // from here and returns a QualifiedResourcePath.\r\n        return super.append(relativePath);\r\n    }\r\n    /**\r\n     * Create a child path beneath the current level.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @returns The new path.\r\n     */\r\n    parent() {\r\n        return super.parent();\r\n    }\r\n    /**\r\n     * String representation of a ResourcePath as expected by the API.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @returns The representation as expected by the API.\r\n     */\r\n    get formattedName() {\r\n        const components = [\r\n            'projects',\r\n            this.projectId,\r\n            'databases',\r\n            this.databaseId,\r\n            'documents',\r\n            ...this.segments,\r\n        ];\r\n        return components.join('/');\r\n    }\r\n    /**\r\n     * Constructs a new instance of ResourcePath. We need this instead of using\r\n     * the normal constructor because polymorphic 'this' doesn't work on static\r\n     * methods.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @param segments Sequence of names of the parts of the path.\r\n     * @returns The newly created QualifiedResourcePath.\r\n     */\r\n    construct(segments) {\r\n        return new QualifiedResourcePath(this.projectId, this.databaseId, ...segments);\r\n    }\r\n    /**\r\n     * Convenience method to match the ResourcePath API. This method always\r\n     * returns the current instance.\r\n     *\r\n     * @private\r\n     * @internal\r\n     */\r\n    toQualifiedResourcePath() {\r\n        return this;\r\n    }\r\n    /**\r\n     * Compare the current path against another ResourcePath object.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @param other The path to compare to.\r\n     * @returns -1 if current < other, 1 if current > other, 0 if equal\r\n     */\r\n    compareTo(other) {\r\n        if (other instanceof QualifiedResourcePath) {\r\n            if (this.projectId < other.projectId) {\r\n                return -1;\r\n            }\r\n            if (this.projectId > other.projectId) {\r\n                return 1;\r\n            }\r\n            if (this.databaseId < other.databaseId) {\r\n                return -1;\r\n            }\r\n            if (this.databaseId > other.databaseId) {\r\n                return 1;\r\n            }\r\n        }\r\n        return super.compareTo(other);\r\n    }\r\n    /**\r\n     * Converts this ResourcePath to the Firestore Proto representation.\r\n     * @private\r\n     * @internal\r\n     */\r\n    toProto() {\r\n        return {\r\n            referenceValue: this.formattedName,\r\n        };\r\n    }\r\n}\r\nexports.QualifiedResourcePath = QualifiedResourcePath;\r\n/**\r\n * Validates that the given string can be used as a relative or absolute\r\n * resource path.\r\n *\r\n * @private\r\n * @internal\r\n * @param arg The argument name or argument index (for varargs methods).\r\n * @param resourcePath The path to validate.\r\n * @throws if the string can't be used as a resource path.\r\n */\r\nfunction validateResourcePath(arg, resourcePath) {\r\n    if (typeof resourcePath !== 'string' || resourcePath === '') {\r\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'resource path')} Path must be a non-empty string.`);\r\n    }\r\n    if (resourcePath.indexOf('//') >= 0) {\r\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'resource path')} Paths must not contain //.`);\r\n    }\r\n}\r\n/**\r\n * A dot-separated path for navigating sub-objects (e.g. nested maps) within a document.\r\n *\r\n * @class\r\n */\r\nclass FieldPath extends Path {\r\n    /**\r\n     * Constructs a Firestore Field Path.\r\n     *\r\n     * @param {...string} segments Sequence of field names that form this path.\r\n     *\r\n     * @example\r\n     * ```\r\n     * let query = firestore.collection('col');\r\n     * let fieldPath = new FieldPath('f.o.o', 'bar');\r\n     *\r\n     * query.where(fieldPath, '==', 42).get().then(snapshot => {\r\n     *   snapshot.forEach(document => {\r\n     *     console.log(`Document contains {'f.o.o' : {'bar' : 42}}`);\r\n     *   });\r\n     * });\r\n     * ```\r\n     */\r\n    constructor(...segments) {\r\n        if (Array.isArray(segments[0])) {\r\n            throw new Error('The FieldPath constructor no longer supports an array as its first argument. ' +\r\n                'Please unpack your array and call FieldPath() with individual arguments.');\r\n        }\r\n        (0, validate_1.validateMinNumberOfArguments)('FieldPath', segments, 1);\r\n        for (let i = 0; i < segments.length; ++i) {\r\n            (0, validate_1.validateString)(i, segments[i]);\r\n            if (segments[i].length === 0) {\r\n                throw new Error(`Element at index ${i} should not be an empty string.`);\r\n            }\r\n        }\r\n        super(segments);\r\n    }\r\n    /**\r\n     * A special FieldPath value to refer to the ID of a document. It can be used\r\n     * in queries to sort or filter by the document ID.\r\n     *\r\n     * @returns {FieldPath}\r\n     */\r\n    static documentId() {\r\n        return FieldPath._DOCUMENT_ID;\r\n    }\r\n    /**\r\n     * Turns a field path argument into a [FieldPath]{@link FieldPath}.\r\n     * Supports FieldPaths as input (which are passed through) and dot-separated\r\n     * strings.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @param {string|FieldPath} fieldPath The FieldPath to create.\r\n     * @returns {FieldPath} A field path representation.\r\n     */\r\n    static fromArgument(fieldPath) {\r\n        // validateFieldPath() is used in all public API entry points to validate\r\n        // that fromArgument() is only called with a Field Path or a string.\r\n        return fieldPath instanceof FieldPath\r\n            ? fieldPath\r\n            : new FieldPath(...fieldPath.split('.'));\r\n    }\r\n    /**\r\n     * String representation of a FieldPath as expected by the API.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @override\r\n     * @returns {string} The representation as expected by the API.\r\n     */\r\n    get formattedName() {\r\n        return this.segments\r\n            .map(str => {\r\n            return UNESCAPED_FIELD_NAME_RE.test(str)\r\n                ? str\r\n                : '`' + str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`') + '`';\r\n        })\r\n            .join('.');\r\n    }\r\n    /**\r\n     * Returns a string representation of this path.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @returns A string representing this path.\r\n     */\r\n    toString() {\r\n        return this.formattedName;\r\n    }\r\n    /**\r\n     * Splits a string into path segments, using dots as separators.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @override\r\n     * @param {string} fieldPath The path to split.\r\n     * @returns {Array.<string>} - The split path segments.\r\n     */\r\n    split(fieldPath) {\r\n        return fieldPath.split('.');\r\n    }\r\n    /**\r\n     * Constructs a new instance of FieldPath. We need this instead of using\r\n     * the normal constructor because polymorphic 'this' doesn't work on static\r\n     * methods.\r\n     *\r\n     * @private\r\n     * @internal\r\n     * @override\r\n     * @param segments Sequence of field names.\r\n     * @returns The newly created FieldPath.\r\n     */\r\n    construct(segments) {\r\n        return new FieldPath(...segments);\r\n    }\r\n    /**\r\n     * Returns true if this `FieldPath` is equal to the provided value.\r\n     *\r\n     * @param {*} other The value to compare against.\r\n     * @return {boolean} true if this `FieldPath` is equal to the provided value.\r\n     */\r\n    isEqual(other) {\r\n        return super.isEqual(other);\r\n    }\r\n}\r\nexports.FieldPath = FieldPath;\r\n/**\r\n * A special sentinel value to refer to the ID of a document.\r\n *\r\n * @private\r\n * @internal\r\n */\r\nFieldPath._DOCUMENT_ID = new FieldPath('__name__');\r\n/**\r\n * Validates that the provided value can be used as a field path argument.\r\n *\r\n * @private\r\n * @internal\r\n * @param arg The argument name or argument index (for varargs methods).\r\n * @param fieldPath The value to verify.\r\n * @throws if the string can't be used as a field path.\r\n */\r\nfunction validateFieldPath(arg, fieldPath) {\r\n    if (fieldPath instanceof FieldPath) {\r\n        return;\r\n    }\r\n    if (fieldPath === undefined) {\r\n        throw new Error((0, validate_1.invalidArgumentMessage)(arg, 'field path') + ' The path cannot be omitted.');\r\n    }\r\n    if ((0, util_1.isObject)(fieldPath) && fieldPath.constructor.name === 'FieldPath') {\r\n        throw new Error((0, validate_1.customObjectMessage)(arg, fieldPath));\r\n    }\r\n    if (typeof fieldPath !== 'string') {\r\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'field path')} Paths can only be specified as strings or via a FieldPath object.`);\r\n    }\r\n    if (fieldPath.indexOf('..') >= 0) {\r\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'field path')} Paths must not contain \"..\" in them.`);\r\n    }\r\n    if (fieldPath.startsWith('.') || fieldPath.endsWith('.')) {\r\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'field path')} Paths must not start or end with \".\".`);\r\n    }\r\n    if (!FIELD_PATH_RE.test(fieldPath)) {\r\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'field path')} Paths can't be empty and must not contain\r\n    \"*~/[]\".`);\r\n    }\r\n}\r\n//# sourceMappingURL=path.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}