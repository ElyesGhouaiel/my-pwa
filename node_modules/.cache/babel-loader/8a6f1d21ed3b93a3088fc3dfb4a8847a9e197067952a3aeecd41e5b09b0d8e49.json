{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MissingProjectIdError = exports.replaceProjectIdToken = void 0;\nconst stream_1 = require(\"stream\");\n// Copyright 2014 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\r\n * Populate the `{{projectId}}` placeholder.\r\n *\r\n * @throws {Error} If a projectId is required, but one is not provided.\r\n *\r\n * @param {*} - Any input value that may contain a placeholder. Arrays and objects will be looped.\r\n * @param {string} projectId - A projectId. If not provided\r\n * @return {*} - The original argument with all placeholders populated.\r\n */\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nfunction replaceProjectIdToken(value, projectId) {\n  if (Array.isArray(value)) {\n    value = value.map(v => replaceProjectIdToken(v, projectId));\n  }\n  if (value !== null && typeof value === 'object' && !(value instanceof Buffer) && !(value instanceof stream_1.Stream) && typeof value.hasOwnProperty === 'function') {\n    for (const opt in value) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (value.hasOwnProperty(opt)) {\n        value[opt] = replaceProjectIdToken(value[opt], projectId);\n      }\n    }\n  }\n  if (typeof value === 'string' && value.indexOf('{{projectId}}') > -1) {\n    if (!projectId || projectId === '{{projectId}}') {\n      throw new MissingProjectIdError();\n    }\n    value = value.replace(/{{projectId}}/g, projectId);\n  }\n  return value;\n}\nexports.replaceProjectIdToken = replaceProjectIdToken;\n/**\r\n * Custom error type for missing project ID errors.\r\n */\nclass MissingProjectIdError extends Error {\n  constructor() {\n    super(...arguments);\n    this.message = `Sorry, we cannot connect to Cloud Services without a project\n    ID. You may specify one with an environment variable named\n    \"GOOGLE_CLOUD_PROJECT\".`.replace(/ +/g, ' ');\n  }\n}\nexports.MissingProjectIdError = MissingProjectIdError;","map":{"version":3,"names":["Object","defineProperty","exports","value","MissingProjectIdError","replaceProjectIdToken","stream_1","require","projectId","Array","isArray","map","v","Buffer","Stream","hasOwnProperty","opt","indexOf","replace","Error","constructor","arguments","message"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/@google-cloud/projectify/build/src/index.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MissingProjectIdError = exports.replaceProjectIdToken = void 0;\r\nconst stream_1 = require(\"stream\");\r\n// Copyright 2014 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * Populate the `{{projectId}}` placeholder.\r\n *\r\n * @throws {Error} If a projectId is required, but one is not provided.\r\n *\r\n * @param {*} - Any input value that may contain a placeholder. Arrays and objects will be looped.\r\n * @param {string} projectId - A projectId. If not provided\r\n * @return {*} - The original argument with all placeholders populated.\r\n */\r\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\r\nfunction replaceProjectIdToken(value, projectId) {\r\n    if (Array.isArray(value)) {\r\n        value = value.map(v => replaceProjectIdToken(v, projectId));\r\n    }\r\n    if (value !== null &&\r\n        typeof value === 'object' &&\r\n        !(value instanceof Buffer) &&\r\n        !(value instanceof stream_1.Stream) &&\r\n        typeof value.hasOwnProperty === 'function') {\r\n        for (const opt in value) {\r\n            // eslint-disable-next-line no-prototype-builtins\r\n            if (value.hasOwnProperty(opt)) {\r\n                value[opt] = replaceProjectIdToken(value[opt], projectId);\r\n            }\r\n        }\r\n    }\r\n    if (typeof value === 'string' &&\r\n        value.indexOf('{{projectId}}') > -1) {\r\n        if (!projectId || projectId === '{{projectId}}') {\r\n            throw new MissingProjectIdError();\r\n        }\r\n        value = value.replace(/{{projectId}}/g, projectId);\r\n    }\r\n    return value;\r\n}\r\nexports.replaceProjectIdToken = replaceProjectIdToken;\r\n/**\r\n * Custom error type for missing project ID errors.\r\n */\r\nclass MissingProjectIdError extends Error {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.message = `Sorry, we cannot connect to Cloud Services without a project\r\n    ID. You may specify one with an environment variable named\r\n    \"GOOGLE_CLOUD_PROJECT\".`.replace(/ +/g, ' ');\r\n    }\r\n}\r\nexports.MissingProjectIdError = MissingProjectIdError;\r\n//# sourceMappingURL=index.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,qBAAqB,GAAGF,OAAO,CAACG,qBAAqB,GAAG,KAAK,CAAC;AACtE,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,qBAAqBA,CAACF,KAAK,EAAEK,SAAS,EAAE;EAC7C,IAAIC,KAAK,CAACC,OAAO,CAACP,KAAK,CAAC,EAAE;IACtBA,KAAK,GAAGA,KAAK,CAACQ,GAAG,CAACC,CAAC,IAAIP,qBAAqB,CAACO,CAAC,EAAEJ,SAAS,CAAC,CAAC;EAC/D;EACA,IAAIL,KAAK,KAAK,IAAI,IACd,OAAOA,KAAK,KAAK,QAAQ,IACzB,EAAEA,KAAK,YAAYU,MAAM,CAAC,IAC1B,EAAEV,KAAK,YAAYG,QAAQ,CAACQ,MAAM,CAAC,IACnC,OAAOX,KAAK,CAACY,cAAc,KAAK,UAAU,EAAE;IAC5C,KAAK,MAAMC,GAAG,IAAIb,KAAK,EAAE;MACrB;MACA,IAAIA,KAAK,CAACY,cAAc,CAACC,GAAG,CAAC,EAAE;QAC3Bb,KAAK,CAACa,GAAG,CAAC,GAAGX,qBAAqB,CAACF,KAAK,CAACa,GAAG,CAAC,EAAER,SAAS,CAAC;MAC7D;IACJ;EACJ;EACA,IAAI,OAAOL,KAAK,KAAK,QAAQ,IACzBA,KAAK,CAACc,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,EAAE;IACrC,IAAI,CAACT,SAAS,IAAIA,SAAS,KAAK,eAAe,EAAE;MAC7C,MAAM,IAAIJ,qBAAqB,CAAC,CAAC;IACrC;IACAD,KAAK,GAAGA,KAAK,CAACe,OAAO,CAAC,gBAAgB,EAAEV,SAAS,CAAC;EACtD;EACA,OAAOL,KAAK;AAChB;AACAD,OAAO,CAACG,qBAAqB,GAAGA,qBAAqB;AACrD;AACA;AACA;AACA,MAAMD,qBAAqB,SAASe,KAAK,CAAC;EACtCC,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnB,IAAI,CAACC,OAAO,GAAG;AACvB;AACA,4BAA4B,CAACJ,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;EAC5C;AACJ;AACAhB,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}