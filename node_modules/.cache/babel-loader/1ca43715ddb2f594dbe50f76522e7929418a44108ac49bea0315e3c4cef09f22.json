{"ast":null,"code":"\"use strict\";\n\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirestoreClient = void 0;\nconst stream_1 = require(\"stream\");\nconst jsonProtos = require(\"../../protos/v1.json\");\n/**\r\n * Client JSON configuration object, loaded from\r\n * `src/v1/firestore_client_config.json`.\r\n * This file defines retry strategy and timeouts for all API methods in this library.\r\n */\nconst gapicConfig = require(\"./firestore_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\r\n *  The Cloud Firestore service.\r\n *\r\n *  Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL\r\n *  document database that simplifies storing, syncing, and querying data for\r\n *  your mobile, web, and IoT apps at global scale. Its client libraries provide\r\n *  live synchronization and offline support, while its security features and\r\n *  integrations with Firebase and Google Cloud Platform accelerate building\r\n *  truly serverless apps.\r\n * @class\r\n * @memberof v1\r\n */\nclass FirestoreClient {\n  /**\r\n   * Construct an instance of FirestoreClient.\r\n   *\r\n   * @param {object} [options] - The configuration object.\r\n   * The options accepted by the constructor are described in detail\r\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\r\n   * The common options are:\r\n   * @param {object} [options.credentials] - Credentials object.\r\n   * @param {string} [options.credentials.client_email]\r\n   * @param {string} [options.credentials.private_key]\r\n   * @param {string} [options.email] - Account email address. Required when\r\n   *     using a .pem or .p12 keyFilename.\r\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\r\n   *     .p12 key downloaded from the Google Developers Console. If you provide\r\n   *     a path to a JSON file, the projectId option below is not necessary.\r\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\r\n   * @param {number} [options.port] - The port on which to connect to\r\n   *     the remote host.\r\n   * @param {string} [options.projectId] - The project ID from the Google\r\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\r\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\r\n   *     app is running in an environment which supports\r\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\r\n   *     your project ID will be detected automatically.\r\n   * @param {string} [options.apiEndpoint] - The domain name of the\r\n   *     API remote host.\r\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\r\n   *     Follows the structure of {@link gapicConfig}.\r\n   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.\r\n   *     For more information, please check the\r\n   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\r\n   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\r\n   *     need to avoid loading the default gRPC version and want to use the fallback\r\n   *     HTTP implementation. Load only fallback version and pass it to the constructor:\r\n   *     ```\r\n   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\r\n   *     const client = new FirestoreClient({fallback: true}, gax);\r\n   *     ```\r\n   */\n  constructor(opts, gaxInstance) {\n    var _a, _b, _c, _d, _e;\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    };\n    // Ensure that options include all the required fields.\n    const staticMembers = this.constructor;\n    if ((opts === null || opts === void 0 ? void 0 : opts.universe_domain) && (opts === null || opts === void 0 ? void 0 : opts.universeDomain) && (opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== (opts === null || opts === void 0 ? void 0 : opts.universeDomain)) {\n      throw new Error('Please set either universe_domain or universeDomain, but not both.');\n    }\n    const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object' ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;\n    this._universeDomain = (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.universeDomain) !== null && _a !== void 0 ? _a : opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== null && _b !== void 0 ? _b : universeDomainEnvVar) !== null && _c !== void 0 ? _c : 'googleapis.com';\n    this._servicePath = 'firestore.' + this._universeDomain;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || this._servicePath;\n    this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_d = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _d !== void 0 ? _d : {};\n    const fallback = (_e = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _e !== void 0 ? _e : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts);\n    // Request numeric enum values if REST transport is used.\n    opts.numericEnums = true;\n    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n    if (servicePath !== this._servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    }\n    // Load google-gax module synchronously if needed\n    if (!gaxInstance) {\n      gaxInstance = require('google-gax');\n    }\n    // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;\n    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n    // Save options to use in initialize() method.\n    this._opts = opts;\n    // Save the auth object to the client, for use by other methods.\n    this.auth = this._gaxGrpc.auth;\n    // Set useJWTAccessWithScope on the auth object.\n    this.auth.useJWTAccessWithScope = true;\n    // Set defaultServicePath on the auth object.\n    this.auth.defaultServicePath = this._servicePath;\n    // Set the default scopes in auth client if needed.\n    if (servicePath === this._servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    }\n    this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);\n    // Determine the client header string.\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n    if (typeof process === 'object' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    } else {\n      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n    }\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    }\n    // Load the applicable protos.\n    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n    // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n    this.descriptors.page = {\n      listDocuments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'documents'),\n      partitionQuery: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'partitions'),\n      listCollectionIds: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'collectionIds')\n    };\n    // Some of the methods on this service provide streaming responses.\n    // Provide descriptors for these.\n    this.descriptors.stream = {\n      batchGetDocuments: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n      runQuery: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n      runAggregationQuery: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n      write: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n      listen: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries)\n    };\n    // Put together the default options sent with requests.\n    this._defaults = this._gaxGrpc.constructSettings('google.firestore.v1.Firestore', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    });\n    // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n    this.innerApiCalls = {};\n    // Add a warn function to the client constructor so it can be easily tested.\n    this.warn = this._gaxModule.warn;\n  }\n  /**\r\n   * Initialize the client.\r\n   * Performs asynchronous operations (such as authentication) and prepares the client.\r\n   * This function will be called automatically when any class method is called for the\r\n   * first time, but if you need to initialize it before calling an actual method,\r\n   * feel free to call initialize() directly.\r\n   *\r\n   * You can await on this method if you want to make sure the client is initialized.\r\n   *\r\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\r\n   */\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.firestoreStub) {\n      return this.firestoreStub;\n    }\n    // Put together the \"service stub\" for\n    // google.firestore.v1.Firestore.\n    this.firestoreStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.firestore.v1.Firestore') :\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.firestore.v1.Firestore, this._opts, this._providedCustomServicePath);\n    // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n    const firestoreStubMethods = ['getDocument', 'listDocuments', 'updateDocument', 'deleteDocument', 'batchGetDocuments', 'beginTransaction', 'commit', 'rollback', 'runQuery', 'runAggregationQuery', 'partitionQuery', 'write', 'listen', 'listCollectionIds', 'batchWrite', 'createDocument'];\n    for (const methodName of firestoreStubMethods) {\n      const callPromise = this.firestoreStub.then(stub => (...args) => {\n        if (this._terminated) {\n          if (methodName in this.descriptors.stream) {\n            const stream = new stream_1.PassThrough();\n            setImmediate(() => {\n              stream.emit('error', new this._gaxModule.GoogleError('The client has already been closed.'));\n            });\n            return stream;\n          }\n          return Promise.reject('The client has already been closed.');\n        }\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.page[methodName] || this.descriptors.stream[methodName] || undefined;\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n      this.innerApiCalls[methodName] = apiCall;\n    }\n    return this.firestoreStub;\n  }\n  /**\r\n   * The DNS address for this API service.\r\n   * @deprecated Use the apiEndpoint method of the client instance.\r\n   * @returns {string} The DNS address for this service.\r\n   */\n  static get servicePath() {\n    if (typeof process === 'object' && typeof process.emitWarning === 'function') {\n      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');\n    }\n    return 'firestore.googleapis.com';\n  }\n  /**\r\n   * The DNS address for this API service - same as servicePath.\r\n   * @deprecated Use the apiEndpoint method of the client instance.\r\n   * @returns {string} The DNS address for this service.\r\n   */\n  static get apiEndpoint() {\n    if (typeof process === 'object' && typeof process.emitWarning === 'function') {\n      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');\n    }\n    return 'firestore.googleapis.com';\n  }\n  /**\r\n   * The DNS address for this API service.\r\n   * @returns {string} The DNS address for this service.\r\n   */\n  get apiEndpoint() {\n    return this._servicePath;\n  }\n  get universeDomain() {\n    return this._universeDomain;\n  }\n  /**\r\n   * The port for this API service.\r\n   * @returns {number} The default port for this service.\r\n   */\n  static get port() {\n    return 443;\n  }\n  /**\r\n   * The scopes needed to make gRPC calls for every method defined\r\n   * in this service.\r\n   * @returns {string[]} List of default scopes.\r\n   */\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/datastore'];\n  }\n  /**\r\n   * Return the project ID used by this class.\r\n   * @returns {Promise} A promise that resolves to string containing the project ID.\r\n   */\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n    return this.auth.getProjectId();\n  }\n  getDocument(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      name: (_a = request.name) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getDocument(request, options, callback);\n  }\n  updateDocument(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      'document.name': (_a = request.document.name) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.updateDocument(request, options, callback);\n  }\n  deleteDocument(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      name: (_a = request.name) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.deleteDocument(request, options, callback);\n  }\n  beginTransaction(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      database: (_a = request.database) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.beginTransaction(request, options, callback);\n  }\n  commit(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      database: (_a = request.database) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.commit(request, options, callback);\n  }\n  rollback(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      database: (_a = request.database) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.rollback(request, options, callback);\n  }\n  batchWrite(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      database: (_a = request.database) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.batchWrite(request, options, callback);\n  }\n  createDocument(request, optionsOrCallback, callback) {\n    var _a, _b;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n      collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.createDocument(request, options, callback);\n  }\n  /**\r\n   * Gets multiple documents.\r\n   *\r\n   * Documents returned by this method are not guaranteed to be returned in the\r\n   * same order that they were requested.\r\n   *\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.database\r\n   *   Required. The database name. In the format:\r\n   *   `projects/{project_id}/databases/{database_id}`.\r\n   * @param {string[]} request.documents\r\n   *   The names of the documents to retrieve. In the format:\r\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\r\n   *   The request will fail if any of the document is not a child resource of the\r\n   *   given `database`. Duplicate names will be elided.\r\n   * @param {google.firestore.v1.DocumentMask} request.mask\r\n   *   The fields to return. If not set, returns all fields.\r\n   *\r\n   *   If a document has a field that is not present in this mask, that field will\r\n   *   not be returned in the response.\r\n   * @param {Buffer} request.transaction\r\n   *   Reads documents in a transaction.\r\n   * @param {google.firestore.v1.TransactionOptions} request.newTransaction\r\n   *   Starts a new transaction and reads the documents.\r\n   *   Defaults to a read-only transaction.\r\n   *   The new transaction ID will be returned as the first response in the\r\n   *   stream.\r\n   * @param {google.protobuf.Timestamp} request.readTime\r\n   *   Reads documents as they were at the given time.\r\n   *\r\n   *   This must be a microsecond precision timestamp within the past one hour,\r\n   *   or if Point-in-Time Recovery is enabled, can additionally be a whole\r\n   *   minute timestamp within the past 7 days.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Stream}\r\n   *   An object stream which emits {@link protos.google.firestore.v1.BatchGetDocumentsResponse|BatchGetDocumentsResponse} on 'data' event.\r\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }\r\n   *   for more details and examples.\r\n   * @example <caption>include:samples/generated/v1/firestore.batch_get_documents.js</caption>\r\n   * region_tag:firestore_v1_generated_Firestore_BatchGetDocuments_async\r\n   */\n  batchGetDocuments(request, options) {\n    var _a;\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      database: (_a = request.database) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.batchGetDocuments(request, options);\n  }\n  /**\r\n   * Runs a query.\r\n   *\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.parent\r\n   *   Required. The parent resource name. In the format:\r\n   *   `projects/{project_id}/databases/{database_id}/documents` or\r\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\r\n   *   For example:\r\n   *   `projects/my-project/databases/my-database/documents` or\r\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\r\n   * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\r\n   *   A structured query.\r\n   * @param {Buffer} request.transaction\r\n   *   Run the query within an already active transaction.\r\n   *\r\n   *   The value here is the opaque transaction ID to execute the query in.\r\n   * @param {google.firestore.v1.TransactionOptions} request.newTransaction\r\n   *   Starts a new transaction and reads the documents.\r\n   *   Defaults to a read-only transaction.\r\n   *   The new transaction ID will be returned as the first response in the\r\n   *   stream.\r\n   * @param {google.protobuf.Timestamp} request.readTime\r\n   *   Reads documents as they were at the given time.\r\n   *\r\n   *   This must be a microsecond precision timestamp within the past one hour,\r\n   *   or if Point-in-Time Recovery is enabled, can additionally be a whole\r\n   *   minute timestamp within the past 7 days.\r\n   * @param {google.firestore.v1.ExplainOptions} [request.explainOptions]\r\n   *   Optional. Explain options for the query. If set, additional query\r\n   *   statistics will be returned. If not, only query results will be returned.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Stream}\r\n   *   An object stream which emits {@link protos.google.firestore.v1.RunQueryResponse|RunQueryResponse} on 'data' event.\r\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }\r\n   *   for more details and examples.\r\n   * @example <caption>include:samples/generated/v1/firestore.run_query.js</caption>\r\n   * region_tag:firestore_v1_generated_Firestore_RunQuery_async\r\n   */\n  runQuery(request, options) {\n    var _a;\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.runQuery(request, options);\n  }\n  /**\r\n   * Runs an aggregation query.\r\n   *\r\n   * Rather than producing {@link protos.google.firestore.v1.Document|Document} results like\r\n   * {@link protos.google.firestore.v1.Firestore.RunQuery|Firestore.RunQuery}, this API\r\n   * allows running an aggregation to produce a series of\r\n   * {@link protos.google.firestore.v1.AggregationResult|AggregationResult} server-side.\r\n   *\r\n   * High-Level Example:\r\n   *\r\n   * ```\r\n   * -- Return the number of documents in table given a filter.\r\n   * SELECT COUNT(*) FROM ( SELECT * FROM k where a = true );\r\n   * ```\r\n   *\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.parent\r\n   *   Required. The parent resource name. In the format:\r\n   *   `projects/{project_id}/databases/{database_id}/documents` or\r\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\r\n   *   For example:\r\n   *   `projects/my-project/databases/my-database/documents` or\r\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\r\n   * @param {google.firestore.v1.StructuredAggregationQuery} request.structuredAggregationQuery\r\n   *   An aggregation query.\r\n   * @param {Buffer} request.transaction\r\n   *   Run the aggregation within an already active transaction.\r\n   *\r\n   *   The value here is the opaque transaction ID to execute the query in.\r\n   * @param {google.firestore.v1.TransactionOptions} request.newTransaction\r\n   *   Starts a new transaction as part of the query, defaulting to read-only.\r\n   *\r\n   *   The new transaction ID will be returned as the first response in the\r\n   *   stream.\r\n   * @param {google.protobuf.Timestamp} request.readTime\r\n   *   Executes the query at the given timestamp.\r\n   *\r\n   *   This must be a microsecond precision timestamp within the past one hour,\r\n   *   or if Point-in-Time Recovery is enabled, can additionally be a whole\r\n   *   minute timestamp within the past 7 days.\r\n   * @param {google.firestore.v1.ExplainOptions} [request.explainOptions]\r\n   *   Optional. Explain options for the query. If set, additional query\r\n   *   statistics will be returned. If not, only query results will be returned.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Stream}\r\n   *   An object stream which emits {@link protos.google.firestore.v1.RunAggregationQueryResponse|RunAggregationQueryResponse} on 'data' event.\r\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }\r\n   *   for more details and examples.\r\n   * @example <caption>include:samples/generated/v1/firestore.run_aggregation_query.js</caption>\r\n   * region_tag:firestore_v1_generated_Firestore_RunAggregationQuery_async\r\n   */\n  runAggregationQuery(request, options) {\n    var _a;\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.runAggregationQuery(request, options);\n  }\n  /**\r\n   * Streams batches of document updates and deletes, in order. This method is\r\n   * only available via gRPC or WebChannel (not REST).\r\n   *\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Stream}\r\n   *   An object stream which is both readable and writable. It accepts objects\r\n   *   representing {@link protos.google.firestore.v1.WriteRequest|WriteRequest} for write() method, and\r\n   *   will emit objects representing {@link protos.google.firestore.v1.WriteResponse|WriteResponse} on 'data' event asynchronously.\r\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming | documentation }\r\n   *   for more details and examples.\r\n   * @example <caption>include:samples/generated/v1/firestore.write.js</caption>\r\n   * region_tag:firestore_v1_generated_Firestore_Write_async\r\n   */\n  write(options) {\n    this.initialize();\n    return this.innerApiCalls.write(null, options);\n  }\n  /**\r\n   * Listens to changes. This method is only available via gRPC or WebChannel\r\n   * (not REST).\r\n   *\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Stream}\r\n   *   An object stream which is both readable and writable. It accepts objects\r\n   *   representing {@link protos.google.firestore.v1.ListenRequest|ListenRequest} for write() method, and\r\n   *   will emit objects representing {@link protos.google.firestore.v1.ListenResponse|ListenResponse} on 'data' event asynchronously.\r\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming | documentation }\r\n   *   for more details and examples.\r\n   * @example <caption>include:samples/generated/v1/firestore.listen.js</caption>\r\n   * region_tag:firestore_v1_generated_Firestore_Listen_async\r\n   */\n  listen(options) {\n    this.initialize();\n    return this.innerApiCalls.listen(null, options);\n  }\n  listDocuments(request, optionsOrCallback, callback) {\n    var _a, _b;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n      collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listDocuments(request, options, callback);\n  }\n  /**\r\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.parent\r\n   *   Required. The parent resource name. In the format:\r\n   *   `projects/{project_id}/databases/{database_id}/documents` or\r\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\r\n   *\r\n   *   For example:\r\n   *   `projects/my-project/databases/my-database/documents` or\r\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\r\n   * @param {string} [request.collectionId]\r\n   *   Optional. The collection ID, relative to `parent`, to list.\r\n   *\r\n   *   For example: `chatrooms` or `messages`.\r\n   *\r\n   *   This is optional, and when not provided, Firestore will list documents\r\n   *   from all collections under the provided `parent`.\r\n   * @param {number} [request.pageSize]\r\n   *   Optional. The maximum number of documents to return in a single response.\r\n   *\r\n   *   Firestore may return fewer than this value.\r\n   * @param {string} [request.pageToken]\r\n   *   Optional. A page token, received from a previous `ListDocuments` response.\r\n   *\r\n   *   Provide this to retrieve the subsequent page. When paginating, all other\r\n   *   parameters (with the exception of `page_size`) must match the values set\r\n   *   in the request that generated the page token.\r\n   * @param {string} [request.orderBy]\r\n   *   Optional. The optional ordering of the documents to return.\r\n   *\r\n   *   For example: `priority desc, __name__ desc`.\r\n   *\r\n   *   This mirrors the {@link protos.google.firestore.v1.StructuredQuery.order_by|`ORDER BY`}\r\n   *   used in Firestore queries but in a string representation. When absent,\r\n   *   documents are ordered based on `__name__ ASC`.\r\n   * @param {google.firestore.v1.DocumentMask} [request.mask]\r\n   *   Optional. The fields to return. If not set, returns all fields.\r\n   *\r\n   *   If a document has a field that is not present in this mask, that field\r\n   *   will not be returned in the response.\r\n   * @param {Buffer} request.transaction\r\n   *   Perform the read as part of an already active transaction.\r\n   * @param {google.protobuf.Timestamp} request.readTime\r\n   *   Perform the read at the provided time.\r\n   *\r\n   *   This must be a microsecond precision timestamp within the past one hour,\r\n   *   or if Point-in-Time Recovery is enabled, can additionally be a whole\r\n   *   minute timestamp within the past 7 days.\r\n   * @param {boolean} request.showMissing\r\n   *   If the list should show missing documents.\r\n   *\r\n   *   A document is missing if it does not exist, but there are sub-documents\r\n   *   nested underneath it. When true, such missing documents will be returned\r\n   *   with a key but will not have fields,\r\n   *   {@link protos.google.firestore.v1.Document.create_time|`create_time`}, or\r\n   *   {@link protos.google.firestore.v1.Document.update_time|`update_time`} set.\r\n   *\r\n   *   Requests with `show_missing` may not specify `where` or `order_by`.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Stream}\r\n   *   An object stream which emits an object representing {@link protos.google.firestore.v1.Document|Document} on 'data' event.\r\n   *   The client library will perform auto-pagination by default: it will call the API as many\r\n   *   times as needed. Note that it can affect your quota.\r\n   *   We recommend using `listDocumentsAsync()`\r\n   *   method described below for async iteration which you can stop as needed.\r\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\r\n   *   for more details and examples.\r\n   */\n  listDocumentsStream(request, options) {\n    var _a, _b;\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n      collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : ''\n    });\n    const defaultCallSettings = this._defaults['listDocuments'];\n    const callSettings = defaultCallSettings.merge(options);\n    this.initialize();\n    return this.descriptors.page.listDocuments.createStream(this.innerApiCalls.listDocuments, request, callSettings);\n  }\n  /**\r\n   * Equivalent to `listDocuments`, but returns an iterable object.\r\n   *\r\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.parent\r\n   *   Required. The parent resource name. In the format:\r\n   *   `projects/{project_id}/databases/{database_id}/documents` or\r\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\r\n   *\r\n   *   For example:\r\n   *   `projects/my-project/databases/my-database/documents` or\r\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\r\n   * @param {string} [request.collectionId]\r\n   *   Optional. The collection ID, relative to `parent`, to list.\r\n   *\r\n   *   For example: `chatrooms` or `messages`.\r\n   *\r\n   *   This is optional, and when not provided, Firestore will list documents\r\n   *   from all collections under the provided `parent`.\r\n   * @param {number} [request.pageSize]\r\n   *   Optional. The maximum number of documents to return in a single response.\r\n   *\r\n   *   Firestore may return fewer than this value.\r\n   * @param {string} [request.pageToken]\r\n   *   Optional. A page token, received from a previous `ListDocuments` response.\r\n   *\r\n   *   Provide this to retrieve the subsequent page. When paginating, all other\r\n   *   parameters (with the exception of `page_size`) must match the values set\r\n   *   in the request that generated the page token.\r\n   * @param {string} [request.orderBy]\r\n   *   Optional. The optional ordering of the documents to return.\r\n   *\r\n   *   For example: `priority desc, __name__ desc`.\r\n   *\r\n   *   This mirrors the {@link protos.google.firestore.v1.StructuredQuery.order_by|`ORDER BY`}\r\n   *   used in Firestore queries but in a string representation. When absent,\r\n   *   documents are ordered based on `__name__ ASC`.\r\n   * @param {google.firestore.v1.DocumentMask} [request.mask]\r\n   *   Optional. The fields to return. If not set, returns all fields.\r\n   *\r\n   *   If a document has a field that is not present in this mask, that field\r\n   *   will not be returned in the response.\r\n   * @param {Buffer} request.transaction\r\n   *   Perform the read as part of an already active transaction.\r\n   * @param {google.protobuf.Timestamp} request.readTime\r\n   *   Perform the read at the provided time.\r\n   *\r\n   *   This must be a microsecond precision timestamp within the past one hour,\r\n   *   or if Point-in-Time Recovery is enabled, can additionally be a whole\r\n   *   minute timestamp within the past 7 days.\r\n   * @param {boolean} request.showMissing\r\n   *   If the list should show missing documents.\r\n   *\r\n   *   A document is missing if it does not exist, but there are sub-documents\r\n   *   nested underneath it. When true, such missing documents will be returned\r\n   *   with a key but will not have fields,\r\n   *   {@link protos.google.firestore.v1.Document.create_time|`create_time`}, or\r\n   *   {@link protos.google.firestore.v1.Document.update_time|`update_time`} set.\r\n   *\r\n   *   Requests with `show_missing` may not specify `where` or `order_by`.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Object}\r\n   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\r\n   *   When you iterate the returned iterable, each element will be an object representing\r\n   *   {@link protos.google.firestore.v1.Document|Document}. The API will be called under the hood as needed, once per the page,\r\n   *   so you can stop the iteration when you don't need more results.\r\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\r\n   *   for more details and examples.\r\n   * @example <caption>include:samples/generated/v1/firestore.list_documents.js</caption>\r\n   * region_tag:firestore_v1_generated_Firestore_ListDocuments_async\r\n   */\n  listDocumentsAsync(request, options) {\n    var _a, _b;\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n      collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : ''\n    });\n    const defaultCallSettings = this._defaults['listDocuments'];\n    const callSettings = defaultCallSettings.merge(options);\n    this.initialize();\n    return this.descriptors.page.listDocuments.asyncIterate(this.innerApiCalls['listDocuments'], request, callSettings);\n  }\n  partitionQuery(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.partitionQuery(request, options, callback);\n  }\n  /**\r\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.parent\r\n   *   Required. The parent resource name. In the format:\r\n   *   `projects/{project_id}/databases/{database_id}/documents`.\r\n   *   Document resource names are not supported; only database resource names\r\n   *   can be specified.\r\n   * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\r\n   *   A structured query.\r\n   *   Query must specify collection with all descendants and be ordered by name\r\n   *   ascending. Other filters, order bys, limits, offsets, and start/end\r\n   *   cursors are not supported.\r\n   * @param {number} request.partitionCount\r\n   *   The desired maximum number of partition points.\r\n   *   The partitions may be returned across multiple pages of results.\r\n   *   The number must be positive. The actual number of partitions\r\n   *   returned may be fewer.\r\n   *\r\n   *   For example, this may be set to one fewer than the number of parallel\r\n   *   queries to be run, or in running a data pipeline job, one fewer than the\r\n   *   number of workers or compute instances available.\r\n   * @param {string} request.pageToken\r\n   *   The `next_page_token` value returned from a previous call to\r\n   *   PartitionQuery that may be used to get an additional set of results.\r\n   *   There are no ordering guarantees between sets of results. Thus, using\r\n   *   multiple sets of results will require merging the different result sets.\r\n   *\r\n   *   For example, two subsequent calls using a page_token may return:\r\n   *\r\n   *    * cursor B, cursor M, cursor Q\r\n   *    * cursor A, cursor U, cursor W\r\n   *\r\n   *   To obtain a complete result set ordered with respect to the results of the\r\n   *   query supplied to PartitionQuery, the results sets should be merged:\r\n   *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W\r\n   * @param {number} request.pageSize\r\n   *   The maximum number of partitions to return in this call, subject to\r\n   *   `partition_count`.\r\n   *\r\n   *   For example, if `partition_count` = 10 and `page_size` = 8, the first call\r\n   *   to PartitionQuery will return up to 8 partitions and a `next_page_token`\r\n   *   if more results exist. A second call to PartitionQuery will return up to\r\n   *   2 partitions, to complete the total of 10 specified in `partition_count`.\r\n   * @param {google.protobuf.Timestamp} request.readTime\r\n   *   Reads documents as they were at the given time.\r\n   *\r\n   *   This must be a microsecond precision timestamp within the past one hour,\r\n   *   or if Point-in-Time Recovery is enabled, can additionally be a whole\r\n   *   minute timestamp within the past 7 days.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Stream}\r\n   *   An object stream which emits an object representing {@link protos.google.firestore.v1.Cursor|Cursor} on 'data' event.\r\n   *   The client library will perform auto-pagination by default: it will call the API as many\r\n   *   times as needed. Note that it can affect your quota.\r\n   *   We recommend using `partitionQueryAsync()`\r\n   *   method described below for async iteration which you can stop as needed.\r\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\r\n   *   for more details and examples.\r\n   */\n  partitionQueryStream(request, options) {\n    var _a;\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ''\n    });\n    const defaultCallSettings = this._defaults['partitionQuery'];\n    const callSettings = defaultCallSettings.merge(options);\n    this.initialize();\n    return this.descriptors.page.partitionQuery.createStream(this.innerApiCalls.partitionQuery, request, callSettings);\n  }\n  /**\r\n   * Equivalent to `partitionQuery`, but returns an iterable object.\r\n   *\r\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.parent\r\n   *   Required. The parent resource name. In the format:\r\n   *   `projects/{project_id}/databases/{database_id}/documents`.\r\n   *   Document resource names are not supported; only database resource names\r\n   *   can be specified.\r\n   * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\r\n   *   A structured query.\r\n   *   Query must specify collection with all descendants and be ordered by name\r\n   *   ascending. Other filters, order bys, limits, offsets, and start/end\r\n   *   cursors are not supported.\r\n   * @param {number} request.partitionCount\r\n   *   The desired maximum number of partition points.\r\n   *   The partitions may be returned across multiple pages of results.\r\n   *   The number must be positive. The actual number of partitions\r\n   *   returned may be fewer.\r\n   *\r\n   *   For example, this may be set to one fewer than the number of parallel\r\n   *   queries to be run, or in running a data pipeline job, one fewer than the\r\n   *   number of workers or compute instances available.\r\n   * @param {string} request.pageToken\r\n   *   The `next_page_token` value returned from a previous call to\r\n   *   PartitionQuery that may be used to get an additional set of results.\r\n   *   There are no ordering guarantees between sets of results. Thus, using\r\n   *   multiple sets of results will require merging the different result sets.\r\n   *\r\n   *   For example, two subsequent calls using a page_token may return:\r\n   *\r\n   *    * cursor B, cursor M, cursor Q\r\n   *    * cursor A, cursor U, cursor W\r\n   *\r\n   *   To obtain a complete result set ordered with respect to the results of the\r\n   *   query supplied to PartitionQuery, the results sets should be merged:\r\n   *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W\r\n   * @param {number} request.pageSize\r\n   *   The maximum number of partitions to return in this call, subject to\r\n   *   `partition_count`.\r\n   *\r\n   *   For example, if `partition_count` = 10 and `page_size` = 8, the first call\r\n   *   to PartitionQuery will return up to 8 partitions and a `next_page_token`\r\n   *   if more results exist. A second call to PartitionQuery will return up to\r\n   *   2 partitions, to complete the total of 10 specified in `partition_count`.\r\n   * @param {google.protobuf.Timestamp} request.readTime\r\n   *   Reads documents as they were at the given time.\r\n   *\r\n   *   This must be a microsecond precision timestamp within the past one hour,\r\n   *   or if Point-in-Time Recovery is enabled, can additionally be a whole\r\n   *   minute timestamp within the past 7 days.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Object}\r\n   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\r\n   *   When you iterate the returned iterable, each element will be an object representing\r\n   *   {@link protos.google.firestore.v1.Cursor|Cursor}. The API will be called under the hood as needed, once per the page,\r\n   *   so you can stop the iteration when you don't need more results.\r\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\r\n   *   for more details and examples.\r\n   * @example <caption>include:samples/generated/v1/firestore.partition_query.js</caption>\r\n   * region_tag:firestore_v1_generated_Firestore_PartitionQuery_async\r\n   */\n  partitionQueryAsync(request, options) {\n    var _a;\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ''\n    });\n    const defaultCallSettings = this._defaults['partitionQuery'];\n    const callSettings = defaultCallSettings.merge(options);\n    this.initialize();\n    return this.descriptors.page.partitionQuery.asyncIterate(this.innerApiCalls['partitionQuery'], request, callSettings);\n  }\n  listCollectionIds(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listCollectionIds(request, options, callback);\n  }\n  /**\r\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.parent\r\n   *   Required. The parent document. In the format:\r\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\r\n   *   For example:\r\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\r\n   * @param {number} request.pageSize\r\n   *   The maximum number of results to return.\r\n   * @param {string} request.pageToken\r\n   *   A page token. Must be a value from\r\n   *   {@link protos.google.firestore.v1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\r\n   * @param {google.protobuf.Timestamp} request.readTime\r\n   *   Reads documents as they were at the given time.\r\n   *\r\n   *   This must be a microsecond precision timestamp within the past one hour,\r\n   *   or if Point-in-Time Recovery is enabled, can additionally be a whole\r\n   *   minute timestamp within the past 7 days.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Stream}\r\n   *   An object stream which emits an object representing string on 'data' event.\r\n   *   The client library will perform auto-pagination by default: it will call the API as many\r\n   *   times as needed. Note that it can affect your quota.\r\n   *   We recommend using `listCollectionIdsAsync()`\r\n   *   method described below for async iteration which you can stop as needed.\r\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\r\n   *   for more details and examples.\r\n   */\n  listCollectionIdsStream(request, options) {\n    var _a;\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ''\n    });\n    const defaultCallSettings = this._defaults['listCollectionIds'];\n    const callSettings = defaultCallSettings.merge(options);\n    this.initialize();\n    return this.descriptors.page.listCollectionIds.createStream(this.innerApiCalls.listCollectionIds, request, callSettings);\n  }\n  /**\r\n   * Equivalent to `listCollectionIds`, but returns an iterable object.\r\n   *\r\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.parent\r\n   *   Required. The parent document. In the format:\r\n   *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\r\n   *   For example:\r\n   *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\r\n   * @param {number} request.pageSize\r\n   *   The maximum number of results to return.\r\n   * @param {string} request.pageToken\r\n   *   A page token. Must be a value from\r\n   *   {@link protos.google.firestore.v1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\r\n   * @param {google.protobuf.Timestamp} request.readTime\r\n   *   Reads documents as they were at the given time.\r\n   *\r\n   *   This must be a microsecond precision timestamp within the past one hour,\r\n   *   or if Point-in-Time Recovery is enabled, can additionally be a whole\r\n   *   minute timestamp within the past 7 days.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Object}\r\n   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\r\n   *   When you iterate the returned iterable, each element will be an object representing\r\n   *   string. The API will be called under the hood as needed, once per the page,\r\n   *   so you can stop the iteration when you don't need more results.\r\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\r\n   *   for more details and examples.\r\n   * @example <caption>include:samples/generated/v1/firestore.list_collection_ids.js</caption>\r\n   * region_tag:firestore_v1_generated_Firestore_ListCollectionIds_async\r\n   */\n  listCollectionIdsAsync(request, options) {\n    var _a;\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ''\n    });\n    const defaultCallSettings = this._defaults['listCollectionIds'];\n    const callSettings = defaultCallSettings.merge(options);\n    this.initialize();\n    return this.descriptors.page.listCollectionIds.asyncIterate(this.innerApiCalls['listCollectionIds'], request, callSettings);\n  }\n  /**\r\n   * Gets information about a location.\r\n   *\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.name\r\n   *   Resource name for the location.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.\r\n   * @returns {Promise} - The promise which resolves to an array.\r\n   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.\r\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }\r\n   *   for more details and examples.\r\n   * @example\r\n   * ```\r\n   * const [response] = await client.getLocation(request);\r\n   * ```\r\n   */\n  getLocation(request, options, callback) {\n    return this.locationsClient.getLocation(request, options, callback);\n  }\n  /**\r\n   * Lists information about the supported locations for this service. Returns an iterable object.\r\n   *\r\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\r\n   * @param {Object} request\r\n   *   The request object that will be sent.\r\n   * @param {string} request.name\r\n   *   The resource that owns the locations collection, if applicable.\r\n   * @param {string} request.filter\r\n   *   The standard list filter.\r\n   * @param {number} request.pageSize\r\n   *   The standard list page size.\r\n   * @param {string} request.pageToken\r\n   *   The standard list page token.\r\n   * @param {object} [options]\r\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n   * @returns {Object}\r\n   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\r\n   *   When you iterate the returned iterable, each element will be an object representing\r\n   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,\r\n   *   so you can stop the iteration when you don't need more results.\r\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\r\n   *   for more details and examples.\r\n   * @example\r\n   * ```\r\n   * const iterable = client.listLocationsAsync(request);\r\n   * for await (const response of iterable) {\r\n   *   // process response\r\n   * }\r\n   * ```\r\n   */\n  listLocationsAsync(request, options) {\n    return this.locationsClient.listLocationsAsync(request, options);\n  }\n  /**\r\n   * Terminate the gRPC channel and close the client.\r\n   *\r\n   * The client will no longer be usable and all future behavior is undefined.\r\n   * @returns {Promise} A promise that resolves when the client is closed.\r\n   */\n  close() {\n    if (this.firestoreStub && !this._terminated) {\n      return this.firestoreStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n        this.locationsClient.close();\n      });\n    }\n    return Promise.resolve();\n  }\n}\nexports.FirestoreClient = FirestoreClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","FirestoreClient","stream_1","require","jsonProtos","gapicConfig","version","constructor","opts","gaxInstance","_a","_b","_c","_d","_e","_terminated","descriptors","page","stream","longrunning","batching","staticMembers","universe_domain","universeDomain","Error","universeDomainEnvVar","process","env","undefined","_universeDomain","_servicePath","servicePath","apiEndpoint","_providedCustomServicePath","port","clientConfig","fallback","window","fetch","assign","numericEnums","scopes","_gaxModule","_gaxGrpc","GrpcClient","_opts","auth","useJWTAccessWithScope","defaultServicePath","defaultScopes","locationsClient","LocationsClient","clientHeader","push","versions","node","grpcVersion","libName","libVersion","_protos","loadProtoJSON","listDocuments","PageDescriptor","partitionQuery","listCollectionIds","batchGetDocuments","StreamDescriptor","StreamType","SERVER_STREAMING","gaxServerStreamingRetries","runQuery","runAggregationQuery","write","BIDI_STREAMING","listen","_defaults","constructSettings","join","innerApiCalls","warn","initialize","firestoreStub","createStub","lookupService","google","firestore","v1","Firestore","firestoreStubMethods","methodName","callPromise","then","stub","args","PassThrough","setImmediate","emit","GoogleError","Promise","reject","func","apply","err","descriptor","apiCall","createApiCall","emitWarning","getProjectId","callback","getDocument","request","optionsOrCallback","options","otherArgs","headers","routingHeader","fromParams","name","updateDocument","document","deleteDocument","beginTransaction","database","commit","rollback","batchWrite","createDocument","parent","collection_id","collectionId","listDocumentsStream","defaultCallSettings","callSettings","merge","createStream","listDocumentsAsync","asyncIterate","partitionQueryStream","partitionQueryAsync","listCollectionIdsStream","listCollectionIdsAsync","getLocation","listLocationsAsync","close","resolve"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/@google-cloud/firestore/build/src/v1/firestore_client.js"],"sourcesContent":["\"use strict\";\r\n// Copyright 2024 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     https://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n// ** This file is automatically generated by gapic-generator-typescript. **\r\n// ** https://github.com/googleapis/gapic-generator-typescript **\r\n// ** All changes to this file may be overwritten. **\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FirestoreClient = void 0;\r\nconst stream_1 = require(\"stream\");\r\nconst jsonProtos = require(\"../../protos/v1.json\");\r\n/**\r\n * Client JSON configuration object, loaded from\r\n * `src/v1/firestore_client_config.json`.\r\n * This file defines retry strategy and timeouts for all API methods in this library.\r\n */\r\nconst gapicConfig = require(\"./firestore_client_config.json\");\r\nconst version = require('../../../package.json').version;\r\n/**\r\n *  The Cloud Firestore service.\r\n *\r\n *  Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL\r\n *  document database that simplifies storing, syncing, and querying data for\r\n *  your mobile, web, and IoT apps at global scale. Its client libraries provide\r\n *  live synchronization and offline support, while its security features and\r\n *  integrations with Firebase and Google Cloud Platform accelerate building\r\n *  truly serverless apps.\r\n * @class\r\n * @memberof v1\r\n */\r\nclass FirestoreClient {\r\n    /**\r\n     * Construct an instance of FirestoreClient.\r\n     *\r\n     * @param {object} [options] - The configuration object.\r\n     * The options accepted by the constructor are described in detail\r\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\r\n     * The common options are:\r\n     * @param {object} [options.credentials] - Credentials object.\r\n     * @param {string} [options.credentials.client_email]\r\n     * @param {string} [options.credentials.private_key]\r\n     * @param {string} [options.email] - Account email address. Required when\r\n     *     using a .pem or .p12 keyFilename.\r\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\r\n     *     .p12 key downloaded from the Google Developers Console. If you provide\r\n     *     a path to a JSON file, the projectId option below is not necessary.\r\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\r\n     * @param {number} [options.port] - The port on which to connect to\r\n     *     the remote host.\r\n     * @param {string} [options.projectId] - The project ID from the Google\r\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\r\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\r\n     *     app is running in an environment which supports\r\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\r\n     *     your project ID will be detected automatically.\r\n     * @param {string} [options.apiEndpoint] - The domain name of the\r\n     *     API remote host.\r\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\r\n     *     Follows the structure of {@link gapicConfig}.\r\n     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.\r\n     *     For more information, please check the\r\n     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\r\n     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\r\n     *     need to avoid loading the default gRPC version and want to use the fallback\r\n     *     HTTP implementation. Load only fallback version and pass it to the constructor:\r\n     *     ```\r\n     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\r\n     *     const client = new FirestoreClient({fallback: true}, gax);\r\n     *     ```\r\n     */\r\n    constructor(opts, gaxInstance) {\r\n        var _a, _b, _c, _d, _e;\r\n        this._terminated = false;\r\n        this.descriptors = {\r\n            page: {},\r\n            stream: {},\r\n            longrunning: {},\r\n            batching: {},\r\n        };\r\n        // Ensure that options include all the required fields.\r\n        const staticMembers = this.constructor;\r\n        if ((opts === null || opts === void 0 ? void 0 : opts.universe_domain) &&\r\n            (opts === null || opts === void 0 ? void 0 : opts.universeDomain) &&\r\n            (opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== (opts === null || opts === void 0 ? void 0 : opts.universeDomain)) {\r\n            throw new Error('Please set either universe_domain or universeDomain, but not both.');\r\n        }\r\n        const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object'\r\n            ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']\r\n            : undefined;\r\n        this._universeDomain =\r\n            (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.universeDomain) !== null && _a !== void 0 ? _a : opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== null && _b !== void 0 ? _b : universeDomainEnvVar) !== null && _c !== void 0 ? _c : 'googleapis.com';\r\n        this._servicePath = 'firestore.' + this._universeDomain;\r\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || this._servicePath;\r\n        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\r\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\r\n        const clientConfig = (_d = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _d !== void 0 ? _d : {};\r\n        const fallback = (_e = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _e !== void 0 ? _e : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\r\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\r\n        // Request numeric enum values if REST transport is used.\r\n        opts.numericEnums = true;\r\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\r\n        if (servicePath !== this._servicePath && !('scopes' in opts)) {\r\n            opts['scopes'] = staticMembers.scopes;\r\n        }\r\n        // Load google-gax module synchronously if needed\r\n        if (!gaxInstance) {\r\n            gaxInstance = require('google-gax');\r\n        }\r\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\r\n        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;\r\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\r\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\r\n        // Save options to use in initialize() method.\r\n        this._opts = opts;\r\n        // Save the auth object to the client, for use by other methods.\r\n        this.auth = this._gaxGrpc.auth;\r\n        // Set useJWTAccessWithScope on the auth object.\r\n        this.auth.useJWTAccessWithScope = true;\r\n        // Set defaultServicePath on the auth object.\r\n        this.auth.defaultServicePath = this._servicePath;\r\n        // Set the default scopes in auth client if needed.\r\n        if (servicePath === this._servicePath) {\r\n            this.auth.defaultScopes = staticMembers.scopes;\r\n        }\r\n        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);\r\n        // Determine the client header string.\r\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\r\n        if (typeof process === 'object' && 'versions' in process) {\r\n            clientHeader.push(`gl-node/${process.versions.node}`);\r\n        }\r\n        else {\r\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\r\n        }\r\n        if (!opts.fallback) {\r\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\r\n        }\r\n        else {\r\n            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\r\n        }\r\n        if (opts.libName && opts.libVersion) {\r\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\r\n        }\r\n        // Load the applicable protos.\r\n        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\r\n        // Some of the methods on this service return \"paged\" results,\r\n        // (e.g. 50 results at a time, with tokens to get subsequent\r\n        // pages). Denote the keys used for pagination and results.\r\n        this.descriptors.page = {\r\n            listDocuments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'documents'),\r\n            partitionQuery: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'partitions'),\r\n            listCollectionIds: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'collectionIds'),\r\n        };\r\n        // Some of the methods on this service provide streaming responses.\r\n        // Provide descriptors for these.\r\n        this.descriptors.stream = {\r\n            batchGetDocuments: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\r\n            runQuery: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\r\n            runAggregationQuery: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\r\n            write: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\r\n            listen: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\r\n        };\r\n        // Put together the default options sent with requests.\r\n        this._defaults = this._gaxGrpc.constructSettings('google.firestore.v1.Firestore', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\r\n        // Set up a dictionary of \"inner API calls\"; the core implementation\r\n        // of calling the API is handled in `google-gax`, with this code\r\n        // merely providing the destination and request information.\r\n        this.innerApiCalls = {};\r\n        // Add a warn function to the client constructor so it can be easily tested.\r\n        this.warn = this._gaxModule.warn;\r\n    }\r\n    /**\r\n     * Initialize the client.\r\n     * Performs asynchronous operations (such as authentication) and prepares the client.\r\n     * This function will be called automatically when any class method is called for the\r\n     * first time, but if you need to initialize it before calling an actual method,\r\n     * feel free to call initialize() directly.\r\n     *\r\n     * You can await on this method if you want to make sure the client is initialized.\r\n     *\r\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\r\n     */\r\n    initialize() {\r\n        // If the client stub promise is already initialized, return immediately.\r\n        if (this.firestoreStub) {\r\n            return this.firestoreStub;\r\n        }\r\n        // Put together the \"service stub\" for\r\n        // google.firestore.v1.Firestore.\r\n        this.firestoreStub = this._gaxGrpc.createStub(this._opts.fallback\r\n            ? this._protos.lookupService('google.firestore.v1.Firestore')\r\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                this._protos.google.firestore.v1.Firestore, this._opts, this._providedCustomServicePath);\r\n        // Iterate over each of the methods that the service provides\r\n        // and create an API call method for each.\r\n        const firestoreStubMethods = [\r\n            'getDocument',\r\n            'listDocuments',\r\n            'updateDocument',\r\n            'deleteDocument',\r\n            'batchGetDocuments',\r\n            'beginTransaction',\r\n            'commit',\r\n            'rollback',\r\n            'runQuery',\r\n            'runAggregationQuery',\r\n            'partitionQuery',\r\n            'write',\r\n            'listen',\r\n            'listCollectionIds',\r\n            'batchWrite',\r\n            'createDocument',\r\n        ];\r\n        for (const methodName of firestoreStubMethods) {\r\n            const callPromise = this.firestoreStub.then(stub => (...args) => {\r\n                if (this._terminated) {\r\n                    if (methodName in this.descriptors.stream) {\r\n                        const stream = new stream_1.PassThrough();\r\n                        setImmediate(() => {\r\n                            stream.emit('error', new this._gaxModule.GoogleError('The client has already been closed.'));\r\n                        });\r\n                        return stream;\r\n                    }\r\n                    return Promise.reject('The client has already been closed.');\r\n                }\r\n                const func = stub[methodName];\r\n                return func.apply(stub, args);\r\n            }, (err) => () => {\r\n                throw err;\r\n            });\r\n            const descriptor = this.descriptors.page[methodName] ||\r\n                this.descriptors.stream[methodName] ||\r\n                undefined;\r\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\r\n            this.innerApiCalls[methodName] = apiCall;\r\n        }\r\n        return this.firestoreStub;\r\n    }\r\n    /**\r\n     * The DNS address for this API service.\r\n     * @deprecated Use the apiEndpoint method of the client instance.\r\n     * @returns {string} The DNS address for this service.\r\n     */\r\n    static get servicePath() {\r\n        if (typeof process === 'object' &&\r\n            typeof process.emitWarning === 'function') {\r\n            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');\r\n        }\r\n        return 'firestore.googleapis.com';\r\n    }\r\n    /**\r\n     * The DNS address for this API service - same as servicePath.\r\n     * @deprecated Use the apiEndpoint method of the client instance.\r\n     * @returns {string} The DNS address for this service.\r\n     */\r\n    static get apiEndpoint() {\r\n        if (typeof process === 'object' &&\r\n            typeof process.emitWarning === 'function') {\r\n            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');\r\n        }\r\n        return 'firestore.googleapis.com';\r\n    }\r\n    /**\r\n     * The DNS address for this API service.\r\n     * @returns {string} The DNS address for this service.\r\n     */\r\n    get apiEndpoint() {\r\n        return this._servicePath;\r\n    }\r\n    get universeDomain() {\r\n        return this._universeDomain;\r\n    }\r\n    /**\r\n     * The port for this API service.\r\n     * @returns {number} The default port for this service.\r\n     */\r\n    static get port() {\r\n        return 443;\r\n    }\r\n    /**\r\n     * The scopes needed to make gRPC calls for every method defined\r\n     * in this service.\r\n     * @returns {string[]} List of default scopes.\r\n     */\r\n    static get scopes() {\r\n        return [\r\n            'https://www.googleapis.com/auth/cloud-platform',\r\n            'https://www.googleapis.com/auth/datastore',\r\n        ];\r\n    }\r\n    /**\r\n     * Return the project ID used by this class.\r\n     * @returns {Promise} A promise that resolves to string containing the project ID.\r\n     */\r\n    getProjectId(callback) {\r\n        if (callback) {\r\n            this.auth.getProjectId(callback);\r\n            return;\r\n        }\r\n        return this.auth.getProjectId();\r\n    }\r\n    getDocument(request, optionsOrCallback, callback) {\r\n        var _a;\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\r\n            });\r\n        this.initialize();\r\n        return this.innerApiCalls.getDocument(request, options, callback);\r\n    }\r\n    updateDocument(request, optionsOrCallback, callback) {\r\n        var _a;\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                'document.name': (_a = request.document.name) !== null && _a !== void 0 ? _a : '',\r\n            });\r\n        this.initialize();\r\n        return this.innerApiCalls.updateDocument(request, options, callback);\r\n    }\r\n    deleteDocument(request, optionsOrCallback, callback) {\r\n        var _a;\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\r\n            });\r\n        this.initialize();\r\n        return this.innerApiCalls.deleteDocument(request, options, callback);\r\n    }\r\n    beginTransaction(request, optionsOrCallback, callback) {\r\n        var _a;\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\r\n            });\r\n        this.initialize();\r\n        return this.innerApiCalls.beginTransaction(request, options, callback);\r\n    }\r\n    commit(request, optionsOrCallback, callback) {\r\n        var _a;\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\r\n            });\r\n        this.initialize();\r\n        return this.innerApiCalls.commit(request, options, callback);\r\n    }\r\n    rollback(request, optionsOrCallback, callback) {\r\n        var _a;\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\r\n            });\r\n        this.initialize();\r\n        return this.innerApiCalls.rollback(request, options, callback);\r\n    }\r\n    batchWrite(request, optionsOrCallback, callback) {\r\n        var _a;\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\r\n            });\r\n        this.initialize();\r\n        return this.innerApiCalls.batchWrite(request, options, callback);\r\n    }\r\n    createDocument(request, optionsOrCallback, callback) {\r\n        var _a, _b;\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\r\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\r\n            });\r\n        this.initialize();\r\n        return this.innerApiCalls.createDocument(request, options, callback);\r\n    }\r\n    /**\r\n     * Gets multiple documents.\r\n     *\r\n     * Documents returned by this method are not guaranteed to be returned in the\r\n     * same order that they were requested.\r\n     *\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.database\r\n     *   Required. The database name. In the format:\r\n     *   `projects/{project_id}/databases/{database_id}`.\r\n     * @param {string[]} request.documents\r\n     *   The names of the documents to retrieve. In the format:\r\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\r\n     *   The request will fail if any of the document is not a child resource of the\r\n     *   given `database`. Duplicate names will be elided.\r\n     * @param {google.firestore.v1.DocumentMask} request.mask\r\n     *   The fields to return. If not set, returns all fields.\r\n     *\r\n     *   If a document has a field that is not present in this mask, that field will\r\n     *   not be returned in the response.\r\n     * @param {Buffer} request.transaction\r\n     *   Reads documents in a transaction.\r\n     * @param {google.firestore.v1.TransactionOptions} request.newTransaction\r\n     *   Starts a new transaction and reads the documents.\r\n     *   Defaults to a read-only transaction.\r\n     *   The new transaction ID will be returned as the first response in the\r\n     *   stream.\r\n     * @param {google.protobuf.Timestamp} request.readTime\r\n     *   Reads documents as they were at the given time.\r\n     *\r\n     *   This must be a microsecond precision timestamp within the past one hour,\r\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\r\n     *   minute timestamp within the past 7 days.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Stream}\r\n     *   An object stream which emits {@link protos.google.firestore.v1.BatchGetDocumentsResponse|BatchGetDocumentsResponse} on 'data' event.\r\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }\r\n     *   for more details and examples.\r\n     * @example <caption>include:samples/generated/v1/firestore.batch_get_documents.js</caption>\r\n     * region_tag:firestore_v1_generated_Firestore_BatchGetDocuments_async\r\n     */\r\n    batchGetDocuments(request, options) {\r\n        var _a;\r\n        request = request || {};\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\r\n            });\r\n        this.initialize();\r\n        return this.innerApiCalls.batchGetDocuments(request, options);\r\n    }\r\n    /**\r\n     * Runs a query.\r\n     *\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.parent\r\n     *   Required. The parent resource name. In the format:\r\n     *   `projects/{project_id}/databases/{database_id}/documents` or\r\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\r\n     *   For example:\r\n     *   `projects/my-project/databases/my-database/documents` or\r\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\r\n     * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\r\n     *   A structured query.\r\n     * @param {Buffer} request.transaction\r\n     *   Run the query within an already active transaction.\r\n     *\r\n     *   The value here is the opaque transaction ID to execute the query in.\r\n     * @param {google.firestore.v1.TransactionOptions} request.newTransaction\r\n     *   Starts a new transaction and reads the documents.\r\n     *   Defaults to a read-only transaction.\r\n     *   The new transaction ID will be returned as the first response in the\r\n     *   stream.\r\n     * @param {google.protobuf.Timestamp} request.readTime\r\n     *   Reads documents as they were at the given time.\r\n     *\r\n     *   This must be a microsecond precision timestamp within the past one hour,\r\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\r\n     *   minute timestamp within the past 7 days.\r\n     * @param {google.firestore.v1.ExplainOptions} [request.explainOptions]\r\n     *   Optional. Explain options for the query. If set, additional query\r\n     *   statistics will be returned. If not, only query results will be returned.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Stream}\r\n     *   An object stream which emits {@link protos.google.firestore.v1.RunQueryResponse|RunQueryResponse} on 'data' event.\r\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }\r\n     *   for more details and examples.\r\n     * @example <caption>include:samples/generated/v1/firestore.run_query.js</caption>\r\n     * region_tag:firestore_v1_generated_Firestore_RunQuery_async\r\n     */\r\n    runQuery(request, options) {\r\n        var _a;\r\n        request = request || {};\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\r\n            });\r\n        this.initialize();\r\n        return this.innerApiCalls.runQuery(request, options);\r\n    }\r\n    /**\r\n     * Runs an aggregation query.\r\n     *\r\n     * Rather than producing {@link protos.google.firestore.v1.Document|Document} results like\r\n     * {@link protos.google.firestore.v1.Firestore.RunQuery|Firestore.RunQuery}, this API\r\n     * allows running an aggregation to produce a series of\r\n     * {@link protos.google.firestore.v1.AggregationResult|AggregationResult} server-side.\r\n     *\r\n     * High-Level Example:\r\n     *\r\n     * ```\r\n     * -- Return the number of documents in table given a filter.\r\n     * SELECT COUNT(*) FROM ( SELECT * FROM k where a = true );\r\n     * ```\r\n     *\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.parent\r\n     *   Required. The parent resource name. In the format:\r\n     *   `projects/{project_id}/databases/{database_id}/documents` or\r\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\r\n     *   For example:\r\n     *   `projects/my-project/databases/my-database/documents` or\r\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\r\n     * @param {google.firestore.v1.StructuredAggregationQuery} request.structuredAggregationQuery\r\n     *   An aggregation query.\r\n     * @param {Buffer} request.transaction\r\n     *   Run the aggregation within an already active transaction.\r\n     *\r\n     *   The value here is the opaque transaction ID to execute the query in.\r\n     * @param {google.firestore.v1.TransactionOptions} request.newTransaction\r\n     *   Starts a new transaction as part of the query, defaulting to read-only.\r\n     *\r\n     *   The new transaction ID will be returned as the first response in the\r\n     *   stream.\r\n     * @param {google.protobuf.Timestamp} request.readTime\r\n     *   Executes the query at the given timestamp.\r\n     *\r\n     *   This must be a microsecond precision timestamp within the past one hour,\r\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\r\n     *   minute timestamp within the past 7 days.\r\n     * @param {google.firestore.v1.ExplainOptions} [request.explainOptions]\r\n     *   Optional. Explain options for the query. If set, additional query\r\n     *   statistics will be returned. If not, only query results will be returned.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Stream}\r\n     *   An object stream which emits {@link protos.google.firestore.v1.RunAggregationQueryResponse|RunAggregationQueryResponse} on 'data' event.\r\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }\r\n     *   for more details and examples.\r\n     * @example <caption>include:samples/generated/v1/firestore.run_aggregation_query.js</caption>\r\n     * region_tag:firestore_v1_generated_Firestore_RunAggregationQuery_async\r\n     */\r\n    runAggregationQuery(request, options) {\r\n        var _a;\r\n        request = request || {};\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\r\n            });\r\n        this.initialize();\r\n        return this.innerApiCalls.runAggregationQuery(request, options);\r\n    }\r\n    /**\r\n     * Streams batches of document updates and deletes, in order. This method is\r\n     * only available via gRPC or WebChannel (not REST).\r\n     *\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Stream}\r\n     *   An object stream which is both readable and writable. It accepts objects\r\n     *   representing {@link protos.google.firestore.v1.WriteRequest|WriteRequest} for write() method, and\r\n     *   will emit objects representing {@link protos.google.firestore.v1.WriteResponse|WriteResponse} on 'data' event asynchronously.\r\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming | documentation }\r\n     *   for more details and examples.\r\n     * @example <caption>include:samples/generated/v1/firestore.write.js</caption>\r\n     * region_tag:firestore_v1_generated_Firestore_Write_async\r\n     */\r\n    write(options) {\r\n        this.initialize();\r\n        return this.innerApiCalls.write(null, options);\r\n    }\r\n    /**\r\n     * Listens to changes. This method is only available via gRPC or WebChannel\r\n     * (not REST).\r\n     *\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Stream}\r\n     *   An object stream which is both readable and writable. It accepts objects\r\n     *   representing {@link protos.google.firestore.v1.ListenRequest|ListenRequest} for write() method, and\r\n     *   will emit objects representing {@link protos.google.firestore.v1.ListenResponse|ListenResponse} on 'data' event asynchronously.\r\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming | documentation }\r\n     *   for more details and examples.\r\n     * @example <caption>include:samples/generated/v1/firestore.listen.js</caption>\r\n     * region_tag:firestore_v1_generated_Firestore_Listen_async\r\n     */\r\n    listen(options) {\r\n        this.initialize();\r\n        return this.innerApiCalls.listen(null, options);\r\n    }\r\n    listDocuments(request, optionsOrCallback, callback) {\r\n        var _a, _b;\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\r\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\r\n            });\r\n        this.initialize();\r\n        return this.innerApiCalls.listDocuments(request, options, callback);\r\n    }\r\n    /**\r\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.parent\r\n     *   Required. The parent resource name. In the format:\r\n     *   `projects/{project_id}/databases/{database_id}/documents` or\r\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\r\n     *\r\n     *   For example:\r\n     *   `projects/my-project/databases/my-database/documents` or\r\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\r\n     * @param {string} [request.collectionId]\r\n     *   Optional. The collection ID, relative to `parent`, to list.\r\n     *\r\n     *   For example: `chatrooms` or `messages`.\r\n     *\r\n     *   This is optional, and when not provided, Firestore will list documents\r\n     *   from all collections under the provided `parent`.\r\n     * @param {number} [request.pageSize]\r\n     *   Optional. The maximum number of documents to return in a single response.\r\n     *\r\n     *   Firestore may return fewer than this value.\r\n     * @param {string} [request.pageToken]\r\n     *   Optional. A page token, received from a previous `ListDocuments` response.\r\n     *\r\n     *   Provide this to retrieve the subsequent page. When paginating, all other\r\n     *   parameters (with the exception of `page_size`) must match the values set\r\n     *   in the request that generated the page token.\r\n     * @param {string} [request.orderBy]\r\n     *   Optional. The optional ordering of the documents to return.\r\n     *\r\n     *   For example: `priority desc, __name__ desc`.\r\n     *\r\n     *   This mirrors the {@link protos.google.firestore.v1.StructuredQuery.order_by|`ORDER BY`}\r\n     *   used in Firestore queries but in a string representation. When absent,\r\n     *   documents are ordered based on `__name__ ASC`.\r\n     * @param {google.firestore.v1.DocumentMask} [request.mask]\r\n     *   Optional. The fields to return. If not set, returns all fields.\r\n     *\r\n     *   If a document has a field that is not present in this mask, that field\r\n     *   will not be returned in the response.\r\n     * @param {Buffer} request.transaction\r\n     *   Perform the read as part of an already active transaction.\r\n     * @param {google.protobuf.Timestamp} request.readTime\r\n     *   Perform the read at the provided time.\r\n     *\r\n     *   This must be a microsecond precision timestamp within the past one hour,\r\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\r\n     *   minute timestamp within the past 7 days.\r\n     * @param {boolean} request.showMissing\r\n     *   If the list should show missing documents.\r\n     *\r\n     *   A document is missing if it does not exist, but there are sub-documents\r\n     *   nested underneath it. When true, such missing documents will be returned\r\n     *   with a key but will not have fields,\r\n     *   {@link protos.google.firestore.v1.Document.create_time|`create_time`}, or\r\n     *   {@link protos.google.firestore.v1.Document.update_time|`update_time`} set.\r\n     *\r\n     *   Requests with `show_missing` may not specify `where` or `order_by`.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Stream}\r\n     *   An object stream which emits an object representing {@link protos.google.firestore.v1.Document|Document} on 'data' event.\r\n     *   The client library will perform auto-pagination by default: it will call the API as many\r\n     *   times as needed. Note that it can affect your quota.\r\n     *   We recommend using `listDocumentsAsync()`\r\n     *   method described below for async iteration which you can stop as needed.\r\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\r\n     *   for more details and examples.\r\n     */\r\n    listDocumentsStream(request, options) {\r\n        var _a, _b;\r\n        request = request || {};\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\r\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\r\n            });\r\n        const defaultCallSettings = this._defaults['listDocuments'];\r\n        const callSettings = defaultCallSettings.merge(options);\r\n        this.initialize();\r\n        return this.descriptors.page.listDocuments.createStream(this.innerApiCalls.listDocuments, request, callSettings);\r\n    }\r\n    /**\r\n     * Equivalent to `listDocuments`, but returns an iterable object.\r\n     *\r\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.parent\r\n     *   Required. The parent resource name. In the format:\r\n     *   `projects/{project_id}/databases/{database_id}/documents` or\r\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\r\n     *\r\n     *   For example:\r\n     *   `projects/my-project/databases/my-database/documents` or\r\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\r\n     * @param {string} [request.collectionId]\r\n     *   Optional. The collection ID, relative to `parent`, to list.\r\n     *\r\n     *   For example: `chatrooms` or `messages`.\r\n     *\r\n     *   This is optional, and when not provided, Firestore will list documents\r\n     *   from all collections under the provided `parent`.\r\n     * @param {number} [request.pageSize]\r\n     *   Optional. The maximum number of documents to return in a single response.\r\n     *\r\n     *   Firestore may return fewer than this value.\r\n     * @param {string} [request.pageToken]\r\n     *   Optional. A page token, received from a previous `ListDocuments` response.\r\n     *\r\n     *   Provide this to retrieve the subsequent page. When paginating, all other\r\n     *   parameters (with the exception of `page_size`) must match the values set\r\n     *   in the request that generated the page token.\r\n     * @param {string} [request.orderBy]\r\n     *   Optional. The optional ordering of the documents to return.\r\n     *\r\n     *   For example: `priority desc, __name__ desc`.\r\n     *\r\n     *   This mirrors the {@link protos.google.firestore.v1.StructuredQuery.order_by|`ORDER BY`}\r\n     *   used in Firestore queries but in a string representation. When absent,\r\n     *   documents are ordered based on `__name__ ASC`.\r\n     * @param {google.firestore.v1.DocumentMask} [request.mask]\r\n     *   Optional. The fields to return. If not set, returns all fields.\r\n     *\r\n     *   If a document has a field that is not present in this mask, that field\r\n     *   will not be returned in the response.\r\n     * @param {Buffer} request.transaction\r\n     *   Perform the read as part of an already active transaction.\r\n     * @param {google.protobuf.Timestamp} request.readTime\r\n     *   Perform the read at the provided time.\r\n     *\r\n     *   This must be a microsecond precision timestamp within the past one hour,\r\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\r\n     *   minute timestamp within the past 7 days.\r\n     * @param {boolean} request.showMissing\r\n     *   If the list should show missing documents.\r\n     *\r\n     *   A document is missing if it does not exist, but there are sub-documents\r\n     *   nested underneath it. When true, such missing documents will be returned\r\n     *   with a key but will not have fields,\r\n     *   {@link protos.google.firestore.v1.Document.create_time|`create_time`}, or\r\n     *   {@link protos.google.firestore.v1.Document.update_time|`update_time`} set.\r\n     *\r\n     *   Requests with `show_missing` may not specify `where` or `order_by`.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Object}\r\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\r\n     *   When you iterate the returned iterable, each element will be an object representing\r\n     *   {@link protos.google.firestore.v1.Document|Document}. The API will be called under the hood as needed, once per the page,\r\n     *   so you can stop the iteration when you don't need more results.\r\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\r\n     *   for more details and examples.\r\n     * @example <caption>include:samples/generated/v1/firestore.list_documents.js</caption>\r\n     * region_tag:firestore_v1_generated_Firestore_ListDocuments_async\r\n     */\r\n    listDocumentsAsync(request, options) {\r\n        var _a, _b;\r\n        request = request || {};\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\r\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\r\n            });\r\n        const defaultCallSettings = this._defaults['listDocuments'];\r\n        const callSettings = defaultCallSettings.merge(options);\r\n        this.initialize();\r\n        return this.descriptors.page.listDocuments.asyncIterate(this.innerApiCalls['listDocuments'], request, callSettings);\r\n    }\r\n    partitionQuery(request, optionsOrCallback, callback) {\r\n        var _a;\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\r\n            });\r\n        this.initialize();\r\n        return this.innerApiCalls.partitionQuery(request, options, callback);\r\n    }\r\n    /**\r\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.parent\r\n     *   Required. The parent resource name. In the format:\r\n     *   `projects/{project_id}/databases/{database_id}/documents`.\r\n     *   Document resource names are not supported; only database resource names\r\n     *   can be specified.\r\n     * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\r\n     *   A structured query.\r\n     *   Query must specify collection with all descendants and be ordered by name\r\n     *   ascending. Other filters, order bys, limits, offsets, and start/end\r\n     *   cursors are not supported.\r\n     * @param {number} request.partitionCount\r\n     *   The desired maximum number of partition points.\r\n     *   The partitions may be returned across multiple pages of results.\r\n     *   The number must be positive. The actual number of partitions\r\n     *   returned may be fewer.\r\n     *\r\n     *   For example, this may be set to one fewer than the number of parallel\r\n     *   queries to be run, or in running a data pipeline job, one fewer than the\r\n     *   number of workers or compute instances available.\r\n     * @param {string} request.pageToken\r\n     *   The `next_page_token` value returned from a previous call to\r\n     *   PartitionQuery that may be used to get an additional set of results.\r\n     *   There are no ordering guarantees between sets of results. Thus, using\r\n     *   multiple sets of results will require merging the different result sets.\r\n     *\r\n     *   For example, two subsequent calls using a page_token may return:\r\n     *\r\n     *    * cursor B, cursor M, cursor Q\r\n     *    * cursor A, cursor U, cursor W\r\n     *\r\n     *   To obtain a complete result set ordered with respect to the results of the\r\n     *   query supplied to PartitionQuery, the results sets should be merged:\r\n     *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W\r\n     * @param {number} request.pageSize\r\n     *   The maximum number of partitions to return in this call, subject to\r\n     *   `partition_count`.\r\n     *\r\n     *   For example, if `partition_count` = 10 and `page_size` = 8, the first call\r\n     *   to PartitionQuery will return up to 8 partitions and a `next_page_token`\r\n     *   if more results exist. A second call to PartitionQuery will return up to\r\n     *   2 partitions, to complete the total of 10 specified in `partition_count`.\r\n     * @param {google.protobuf.Timestamp} request.readTime\r\n     *   Reads documents as they were at the given time.\r\n     *\r\n     *   This must be a microsecond precision timestamp within the past one hour,\r\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\r\n     *   minute timestamp within the past 7 days.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Stream}\r\n     *   An object stream which emits an object representing {@link protos.google.firestore.v1.Cursor|Cursor} on 'data' event.\r\n     *   The client library will perform auto-pagination by default: it will call the API as many\r\n     *   times as needed. Note that it can affect your quota.\r\n     *   We recommend using `partitionQueryAsync()`\r\n     *   method described below for async iteration which you can stop as needed.\r\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\r\n     *   for more details and examples.\r\n     */\r\n    partitionQueryStream(request, options) {\r\n        var _a;\r\n        request = request || {};\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\r\n            });\r\n        const defaultCallSettings = this._defaults['partitionQuery'];\r\n        const callSettings = defaultCallSettings.merge(options);\r\n        this.initialize();\r\n        return this.descriptors.page.partitionQuery.createStream(this.innerApiCalls.partitionQuery, request, callSettings);\r\n    }\r\n    /**\r\n     * Equivalent to `partitionQuery`, but returns an iterable object.\r\n     *\r\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.parent\r\n     *   Required. The parent resource name. In the format:\r\n     *   `projects/{project_id}/databases/{database_id}/documents`.\r\n     *   Document resource names are not supported; only database resource names\r\n     *   can be specified.\r\n     * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\r\n     *   A structured query.\r\n     *   Query must specify collection with all descendants and be ordered by name\r\n     *   ascending. Other filters, order bys, limits, offsets, and start/end\r\n     *   cursors are not supported.\r\n     * @param {number} request.partitionCount\r\n     *   The desired maximum number of partition points.\r\n     *   The partitions may be returned across multiple pages of results.\r\n     *   The number must be positive. The actual number of partitions\r\n     *   returned may be fewer.\r\n     *\r\n     *   For example, this may be set to one fewer than the number of parallel\r\n     *   queries to be run, or in running a data pipeline job, one fewer than the\r\n     *   number of workers or compute instances available.\r\n     * @param {string} request.pageToken\r\n     *   The `next_page_token` value returned from a previous call to\r\n     *   PartitionQuery that may be used to get an additional set of results.\r\n     *   There are no ordering guarantees between sets of results. Thus, using\r\n     *   multiple sets of results will require merging the different result sets.\r\n     *\r\n     *   For example, two subsequent calls using a page_token may return:\r\n     *\r\n     *    * cursor B, cursor M, cursor Q\r\n     *    * cursor A, cursor U, cursor W\r\n     *\r\n     *   To obtain a complete result set ordered with respect to the results of the\r\n     *   query supplied to PartitionQuery, the results sets should be merged:\r\n     *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W\r\n     * @param {number} request.pageSize\r\n     *   The maximum number of partitions to return in this call, subject to\r\n     *   `partition_count`.\r\n     *\r\n     *   For example, if `partition_count` = 10 and `page_size` = 8, the first call\r\n     *   to PartitionQuery will return up to 8 partitions and a `next_page_token`\r\n     *   if more results exist. A second call to PartitionQuery will return up to\r\n     *   2 partitions, to complete the total of 10 specified in `partition_count`.\r\n     * @param {google.protobuf.Timestamp} request.readTime\r\n     *   Reads documents as they were at the given time.\r\n     *\r\n     *   This must be a microsecond precision timestamp within the past one hour,\r\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\r\n     *   minute timestamp within the past 7 days.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Object}\r\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\r\n     *   When you iterate the returned iterable, each element will be an object representing\r\n     *   {@link protos.google.firestore.v1.Cursor|Cursor}. The API will be called under the hood as needed, once per the page,\r\n     *   so you can stop the iteration when you don't need more results.\r\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\r\n     *   for more details and examples.\r\n     * @example <caption>include:samples/generated/v1/firestore.partition_query.js</caption>\r\n     * region_tag:firestore_v1_generated_Firestore_PartitionQuery_async\r\n     */\r\n    partitionQueryAsync(request, options) {\r\n        var _a;\r\n        request = request || {};\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\r\n            });\r\n        const defaultCallSettings = this._defaults['partitionQuery'];\r\n        const callSettings = defaultCallSettings.merge(options);\r\n        this.initialize();\r\n        return this.descriptors.page.partitionQuery.asyncIterate(this.innerApiCalls['partitionQuery'], request, callSettings);\r\n    }\r\n    listCollectionIds(request, optionsOrCallback, callback) {\r\n        var _a;\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\r\n            });\r\n        this.initialize();\r\n        return this.innerApiCalls.listCollectionIds(request, options, callback);\r\n    }\r\n    /**\r\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.parent\r\n     *   Required. The parent document. In the format:\r\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\r\n     *   For example:\r\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\r\n     * @param {number} request.pageSize\r\n     *   The maximum number of results to return.\r\n     * @param {string} request.pageToken\r\n     *   A page token. Must be a value from\r\n     *   {@link protos.google.firestore.v1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\r\n     * @param {google.protobuf.Timestamp} request.readTime\r\n     *   Reads documents as they were at the given time.\r\n     *\r\n     *   This must be a microsecond precision timestamp within the past one hour,\r\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\r\n     *   minute timestamp within the past 7 days.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Stream}\r\n     *   An object stream which emits an object representing string on 'data' event.\r\n     *   The client library will perform auto-pagination by default: it will call the API as many\r\n     *   times as needed. Note that it can affect your quota.\r\n     *   We recommend using `listCollectionIdsAsync()`\r\n     *   method described below for async iteration which you can stop as needed.\r\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\r\n     *   for more details and examples.\r\n     */\r\n    listCollectionIdsStream(request, options) {\r\n        var _a;\r\n        request = request || {};\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\r\n            });\r\n        const defaultCallSettings = this._defaults['listCollectionIds'];\r\n        const callSettings = defaultCallSettings.merge(options);\r\n        this.initialize();\r\n        return this.descriptors.page.listCollectionIds.createStream(this.innerApiCalls.listCollectionIds, request, callSettings);\r\n    }\r\n    /**\r\n     * Equivalent to `listCollectionIds`, but returns an iterable object.\r\n     *\r\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.parent\r\n     *   Required. The parent document. In the format:\r\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\r\n     *   For example:\r\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\r\n     * @param {number} request.pageSize\r\n     *   The maximum number of results to return.\r\n     * @param {string} request.pageToken\r\n     *   A page token. Must be a value from\r\n     *   {@link protos.google.firestore.v1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\r\n     * @param {google.protobuf.Timestamp} request.readTime\r\n     *   Reads documents as they were at the given time.\r\n     *\r\n     *   This must be a microsecond precision timestamp within the past one hour,\r\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\r\n     *   minute timestamp within the past 7 days.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Object}\r\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\r\n     *   When you iterate the returned iterable, each element will be an object representing\r\n     *   string. The API will be called under the hood as needed, once per the page,\r\n     *   so you can stop the iteration when you don't need more results.\r\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\r\n     *   for more details and examples.\r\n     * @example <caption>include:samples/generated/v1/firestore.list_collection_ids.js</caption>\r\n     * region_tag:firestore_v1_generated_Firestore_ListCollectionIds_async\r\n     */\r\n    listCollectionIdsAsync(request, options) {\r\n        var _a;\r\n        request = request || {};\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            this._gaxModule.routingHeader.fromParams({\r\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\r\n            });\r\n        const defaultCallSettings = this._defaults['listCollectionIds'];\r\n        const callSettings = defaultCallSettings.merge(options);\r\n        this.initialize();\r\n        return this.descriptors.page.listCollectionIds.asyncIterate(this.innerApiCalls['listCollectionIds'], request, callSettings);\r\n    }\r\n    /**\r\n     * Gets information about a location.\r\n     *\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.name\r\n     *   Resource name for the location.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.\r\n     * @returns {Promise} - The promise which resolves to an array.\r\n     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.\r\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }\r\n     *   for more details and examples.\r\n     * @example\r\n     * ```\r\n     * const [response] = await client.getLocation(request);\r\n     * ```\r\n     */\r\n    getLocation(request, options, callback) {\r\n        return this.locationsClient.getLocation(request, options, callback);\r\n    }\r\n    /**\r\n     * Lists information about the supported locations for this service. Returns an iterable object.\r\n     *\r\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.name\r\n     *   The resource that owns the locations collection, if applicable.\r\n     * @param {string} request.filter\r\n     *   The standard list filter.\r\n     * @param {number} request.pageSize\r\n     *   The standard list page size.\r\n     * @param {string} request.pageToken\r\n     *   The standard list page token.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Object}\r\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\r\n     *   When you iterate the returned iterable, each element will be an object representing\r\n     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,\r\n     *   so you can stop the iteration when you don't need more results.\r\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\r\n     *   for more details and examples.\r\n     * @example\r\n     * ```\r\n     * const iterable = client.listLocationsAsync(request);\r\n     * for await (const response of iterable) {\r\n     *   // process response\r\n     * }\r\n     * ```\r\n     */\r\n    listLocationsAsync(request, options) {\r\n        return this.locationsClient.listLocationsAsync(request, options);\r\n    }\r\n    /**\r\n     * Terminate the gRPC channel and close the client.\r\n     *\r\n     * The client will no longer be usable and all future behavior is undefined.\r\n     * @returns {Promise} A promise that resolves when the client is closed.\r\n     */\r\n    close() {\r\n        if (this.firestoreStub && !this._terminated) {\r\n            return this.firestoreStub.then(stub => {\r\n                this._terminated = true;\r\n                stub.close();\r\n                this.locationsClient.close();\r\n            });\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n}\r\nexports.FirestoreClient = FirestoreClient;\r\n//# sourceMappingURL=firestore_client.js.map"],"mappings":"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IACvD,IAAI,CAAChC,UAAU,CAAC,CAAC;IACjB,OAAO,IAAI,CAAChE,WAAW,CAACC,IAAI,CAAC4C,aAAa,CAACyE,YAAY,CAAC,IAAI,CAACxD,aAAa,CAACjB,aAAa,EAAEiD,OAAO,EAAEsB,YAAY,CAAC;EACpH;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,kBAAkBA,CAACzB,OAAO,EAAEE,OAAO,EAAE;IACjC,IAAItG,EAAE,EAAEC,EAAE;IACVmG,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvBE,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvBA,OAAO,CAACC,SAAS,GAAGD,OAAO,CAACC,SAAS,IAAI,CAAC,CAAC;IAC3CD,OAAO,CAACC,SAAS,CAACC,OAAO,GAAGF,OAAO,CAACC,SAAS,CAACC,OAAO,IAAI,CAAC,CAAC;IAC3DF,OAAO,CAACC,SAAS,CAACC,OAAO,CAAC,uBAAuB,CAAC,GAC9C,IAAI,CAACxE,UAAU,CAACyE,aAAa,CAACC,UAAU,CAAC;MACrCW,MAAM,EAAE,CAACrH,EAAE,GAAGoG,OAAO,CAACiB,MAAM,MAAM,IAAI,IAAIrH,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,EAAE;MACjEsH,aAAa,EAAE,CAACrH,EAAE,GAAGmG,OAAO,CAACmB,YAAY,MAAM,IAAI,IAAItH,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG;IAChF,CAAC,CAAC;IACN,MAAMwH,mBAAmB,GAAG,IAAI,CAACxD,SAAS,CAAC,eAAe,CAAC;IAC3D,MAAMyD,YAAY,GAAGD,mBAAmB,CAACE,KAAK,CAACrB,OAAO,CAAC;IACvD,IAAI,CAAChC,UAAU,CAAC,CAAC;IACjB,OAAO,IAAI,CAAChE,WAAW,CAACC,IAAI,CAAC4C,aAAa,CAAC2E,YAAY,CAAC,IAAI,CAAC1D,aAAa,CAAC,eAAe,CAAC,EAAEgC,OAAO,EAAEsB,YAAY,CAAC;EACvH;EACArE,cAAcA,CAAC+C,OAAO,EAAEC,iBAAiB,EAAEH,QAAQ,EAAE;IACjD,IAAIlG,EAAE;IACNoG,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,IAAIE,OAAO;IACX,IAAI,OAAOD,iBAAiB,KAAK,UAAU,IAAIH,QAAQ,KAAKhF,SAAS,EAAE;MACnEgF,QAAQ,GAAGG,iBAAiB;MAC5BC,OAAO,GAAG,CAAC,CAAC;IAChB,CAAC,MACI;MACDA,OAAO,GAAGD,iBAAiB;IAC/B;IACAC,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvBA,OAAO,CAACC,SAAS,GAAGD,OAAO,CAACC,SAAS,IAAI,CAAC,CAAC;IAC3CD,OAAO,CAACC,SAAS,CAACC,OAAO,GAAGF,OAAO,CAACC,SAAS,CAACC,OAAO,IAAI,CAAC,CAAC;IAC3DF,OAAO,CAACC,SAAS,CAACC,OAAO,CAAC,uBAAuB,CAAC,GAC9C,IAAI,CAACxE,UAAU,CAACyE,aAAa,CAACC,UAAU,CAAC;MACrCW,MAAM,EAAE,CAACrH,EAAE,GAAGoG,OAAO,CAACiB,MAAM,MAAM,IAAI,IAAIrH,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG;IACnE,CAAC,CAAC;IACN,IAAI,CAACsE,UAAU,CAAC,CAAC;IACjB,OAAO,IAAI,CAACF,aAAa,CAACf,cAAc,CAAC+C,OAAO,EAAEE,OAAO,EAAEJ,QAAQ,CAAC;EACxE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI6B,oBAAoBA,CAAC3B,OAAO,EAAEE,OAAO,EAAE;IACnC,IAAItG,EAAE;IACNoG,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvBE,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvBA,OAAO,CAACC,SAAS,GAAGD,OAAO,CAACC,SAAS,IAAI,CAAC,CAAC;IAC3CD,OAAO,CAACC,SAAS,CAACC,OAAO,GAAGF,OAAO,CAACC,SAAS,CAACC,OAAO,IAAI,CAAC,CAAC;IAC3DF,OAAO,CAACC,SAAS,CAACC,OAAO,CAAC,uBAAuB,CAAC,GAC9C,IAAI,CAACxE,UAAU,CAACyE,aAAa,CAACC,UAAU,CAAC;MACrCW,MAAM,EAAE,CAACrH,EAAE,GAAGoG,OAAO,CAACiB,MAAM,MAAM,IAAI,IAAIrH,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG;IACnE,CAAC,CAAC;IACN,MAAMyH,mBAAmB,GAAG,IAAI,CAACxD,SAAS,CAAC,gBAAgB,CAAC;IAC5D,MAAMyD,YAAY,GAAGD,mBAAmB,CAACE,KAAK,CAACrB,OAAO,CAAC;IACvD,IAAI,CAAChC,UAAU,CAAC,CAAC;IACjB,OAAO,IAAI,CAAChE,WAAW,CAACC,IAAI,CAAC8C,cAAc,CAACuE,YAAY,CAAC,IAAI,CAACxD,aAAa,CAACf,cAAc,EAAE+C,OAAO,EAAEsB,YAAY,CAAC;EACtH;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}