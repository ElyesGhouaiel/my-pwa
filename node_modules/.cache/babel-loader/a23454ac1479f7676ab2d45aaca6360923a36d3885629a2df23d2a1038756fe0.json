{"ast":null,"code":"\"use strict\";\n\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UrlSubjectTokenSupplier = void 0;\n/**\r\n * Internal subject token supplier implementation used when a URL\r\n * is configured in the credential configuration used to build an {@link IdentityPoolClient}\r\n */\nclass UrlSubjectTokenSupplier {\n  /**\r\n   * Instantiates a URL subject token supplier.\r\n   * @param opts The URL subject token supplier options to build the supplier with.\r\n   */\n  constructor(opts) {\n    this.url = opts.url;\n    this.formatType = opts.formatType;\n    this.subjectTokenFieldName = opts.subjectTokenFieldName;\n    this.headers = opts.headers;\n    this.additionalGaxiosOptions = opts.additionalGaxiosOptions;\n  }\n  /**\r\n   * Sends a GET request to the URL provided in the constructor and resolves\r\n   * with the returned external subject token.\r\n   * @param context {@link ExternalAccountSupplierContext} from the calling\r\n   *   {@link IdentityPoolClient}, contains the requested audience and subject\r\n   *   token type for the external account identity. Not used.\r\n   */\n  async getSubjectToken(context) {\n    const opts = {\n      ...this.additionalGaxiosOptions,\n      url: this.url,\n      method: 'GET',\n      headers: this.headers,\n      responseType: this.formatType\n    };\n    let subjectToken;\n    if (this.formatType === 'text') {\n      const response = await context.transporter.request(opts);\n      subjectToken = response.data;\n    } else if (this.formatType === 'json' && this.subjectTokenFieldName) {\n      const response = await context.transporter.request(opts);\n      subjectToken = response.data[this.subjectTokenFieldName];\n    }\n    if (!subjectToken) {\n      throw new Error('Unable to parse the subject_token from the credential_source URL');\n    }\n    return subjectToken;\n  }\n}\nexports.UrlSubjectTokenSupplier = UrlSubjectTokenSupplier;","map":{"version":3,"names":["Object","defineProperty","exports","value","UrlSubjectTokenSupplier","constructor","opts","url","formatType","subjectTokenFieldName","headers","additionalGaxiosOptions","getSubjectToken","context","method","responseType","subjectToken","response","transporter","request","data","Error"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/google-auth-library/build/src/auth/urlsubjecttokensupplier.js"],"sourcesContent":["\"use strict\";\r\n// Copyright 2024 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UrlSubjectTokenSupplier = void 0;\r\n/**\r\n * Internal subject token supplier implementation used when a URL\r\n * is configured in the credential configuration used to build an {@link IdentityPoolClient}\r\n */\r\nclass UrlSubjectTokenSupplier {\r\n    /**\r\n     * Instantiates a URL subject token supplier.\r\n     * @param opts The URL subject token supplier options to build the supplier with.\r\n     */\r\n    constructor(opts) {\r\n        this.url = opts.url;\r\n        this.formatType = opts.formatType;\r\n        this.subjectTokenFieldName = opts.subjectTokenFieldName;\r\n        this.headers = opts.headers;\r\n        this.additionalGaxiosOptions = opts.additionalGaxiosOptions;\r\n    }\r\n    /**\r\n     * Sends a GET request to the URL provided in the constructor and resolves\r\n     * with the returned external subject token.\r\n     * @param context {@link ExternalAccountSupplierContext} from the calling\r\n     *   {@link IdentityPoolClient}, contains the requested audience and subject\r\n     *   token type for the external account identity. Not used.\r\n     */\r\n    async getSubjectToken(context) {\r\n        const opts = {\r\n            ...this.additionalGaxiosOptions,\r\n            url: this.url,\r\n            method: 'GET',\r\n            headers: this.headers,\r\n            responseType: this.formatType,\r\n        };\r\n        let subjectToken;\r\n        if (this.formatType === 'text') {\r\n            const response = await context.transporter.request(opts);\r\n            subjectToken = response.data;\r\n        }\r\n        else if (this.formatType === 'json' && this.subjectTokenFieldName) {\r\n            const response = await context.transporter.request(opts);\r\n            subjectToken = response.data[this.subjectTokenFieldName];\r\n        }\r\n        if (!subjectToken) {\r\n            throw new Error('Unable to parse the subject_token from the credential_source URL');\r\n        }\r\n        return subjectToken;\r\n    }\r\n}\r\nexports.UrlSubjectTokenSupplier = UrlSubjectTokenSupplier;\r\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,uBAAuB,GAAG,KAAK,CAAC;AACxC;AACA;AACA;AACA;AACA,MAAMA,uBAAuB,CAAC;EAC1B;AACJ;AACA;AACA;EACIC,WAAWA,CAACC,IAAI,EAAE;IACd,IAAI,CAACC,GAAG,GAAGD,IAAI,CAACC,GAAG;IACnB,IAAI,CAACC,UAAU,GAAGF,IAAI,CAACE,UAAU;IACjC,IAAI,CAACC,qBAAqB,GAAGH,IAAI,CAACG,qBAAqB;IACvD,IAAI,CAACC,OAAO,GAAGJ,IAAI,CAACI,OAAO;IAC3B,IAAI,CAACC,uBAAuB,GAAGL,IAAI,CAACK,uBAAuB;EAC/D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,eAAeA,CAACC,OAAO,EAAE;IAC3B,MAAMP,IAAI,GAAG;MACT,GAAG,IAAI,CAACK,uBAAuB;MAC/BJ,GAAG,EAAE,IAAI,CAACA,GAAG;MACbO,MAAM,EAAE,KAAK;MACbJ,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBK,YAAY,EAAE,IAAI,CAACP;IACvB,CAAC;IACD,IAAIQ,YAAY;IAChB,IAAI,IAAI,CAACR,UAAU,KAAK,MAAM,EAAE;MAC5B,MAAMS,QAAQ,GAAG,MAAMJ,OAAO,CAACK,WAAW,CAACC,OAAO,CAACb,IAAI,CAAC;MACxDU,YAAY,GAAGC,QAAQ,CAACG,IAAI;IAChC,CAAC,MACI,IAAI,IAAI,CAACZ,UAAU,KAAK,MAAM,IAAI,IAAI,CAACC,qBAAqB,EAAE;MAC/D,MAAMQ,QAAQ,GAAG,MAAMJ,OAAO,CAACK,WAAW,CAACC,OAAO,CAACb,IAAI,CAAC;MACxDU,YAAY,GAAGC,QAAQ,CAACG,IAAI,CAAC,IAAI,CAACX,qBAAqB,CAAC;IAC5D;IACA,IAAI,CAACO,YAAY,EAAE;MACf,MAAM,IAAIK,KAAK,CAAC,kEAAkE,CAAC;IACvF;IACA,OAAOL,YAAY;EACvB;AACJ;AACAd,OAAO,CAACE,uBAAuB,GAAGA,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}