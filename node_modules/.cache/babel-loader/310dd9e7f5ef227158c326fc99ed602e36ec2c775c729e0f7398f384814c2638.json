{"ast":null,"code":"\"use strict\";\n\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Storage = exports.RETRYABLE_ERR_FN_DEFAULT = exports.MAX_RETRY_DELAY_DEFAULT = exports.TOTAL_TIMEOUT_DEFAULT = exports.RETRY_DELAY_MULTIPLIER_DEFAULT = exports.MAX_RETRY_DEFAULT = exports.AUTO_RETRY_DEFAULT = exports.PROTOCOL_REGEX = exports.StorageExceptionMessages = exports.ExceptionMessages = exports.IdempotencyStrategy = void 0;\nconst index_js_1 = require(\"./nodejs-common/index.js\");\nconst paginator_1 = require(\"@google-cloud/paginator\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst stream_1 = require(\"stream\");\nconst bucket_js_1 = require(\"./bucket.js\");\nconst channel_js_1 = require(\"./channel.js\");\nconst file_js_1 = require(\"./file.js\");\nconst util_js_1 = require(\"./util.js\");\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst package_json_helper_cjs_1 = require(\"./package-json-helper.cjs\");\nconst hmacKey_js_1 = require(\"./hmacKey.js\");\nconst crc32c_js_1 = require(\"./crc32c.js\");\nconst google_auth_library_1 = require(\"google-auth-library\");\nvar IdempotencyStrategy;\n(function (IdempotencyStrategy) {\n  IdempotencyStrategy[IdempotencyStrategy[\"RetryAlways\"] = 0] = \"RetryAlways\";\n  IdempotencyStrategy[IdempotencyStrategy[\"RetryConditional\"] = 1] = \"RetryConditional\";\n  IdempotencyStrategy[IdempotencyStrategy[\"RetryNever\"] = 2] = \"RetryNever\";\n})(IdempotencyStrategy || (exports.IdempotencyStrategy = IdempotencyStrategy = {}));\nvar ExceptionMessages;\n(function (ExceptionMessages) {\n  ExceptionMessages[\"EXPIRATION_DATE_INVALID\"] = \"The expiration date provided was invalid.\";\n  ExceptionMessages[\"EXPIRATION_DATE_PAST\"] = \"An expiration date cannot be in the past.\";\n})(ExceptionMessages || (exports.ExceptionMessages = ExceptionMessages = {}));\nvar StorageExceptionMessages;\n(function (StorageExceptionMessages) {\n  StorageExceptionMessages[\"BUCKET_NAME_REQUIRED\"] = \"A bucket name is needed to use Cloud Storage.\";\n  StorageExceptionMessages[\"BUCKET_NAME_REQUIRED_CREATE\"] = \"A name is required to create a bucket.\";\n  StorageExceptionMessages[\"HMAC_SERVICE_ACCOUNT\"] = \"The first argument must be a service account email to create an HMAC key.\";\n  StorageExceptionMessages[\"HMAC_ACCESS_ID\"] = \"An access ID is needed to create an HmacKey object.\";\n})(StorageExceptionMessages || (exports.StorageExceptionMessages = StorageExceptionMessages = {}));\nexports.PROTOCOL_REGEX = /^(\\w*):\\/\\//;\n/**\r\n * Default behavior: Automatically retry retriable server errors.\r\n *\r\n * @const {boolean}\r\n */\nexports.AUTO_RETRY_DEFAULT = true;\n/**\r\n * Default behavior: Only attempt to retry retriable errors 3 times.\r\n *\r\n * @const {number}\r\n */\nexports.MAX_RETRY_DEFAULT = 3;\n/**\r\n * Default behavior: Wait twice as long as previous retry before retrying.\r\n *\r\n * @const {number}\r\n */\nexports.RETRY_DELAY_MULTIPLIER_DEFAULT = 2;\n/**\r\n * Default behavior: If the operation doesn't succeed after 600 seconds,\r\n *  stop retrying.\r\n *\r\n * @const {number}\r\n */\nexports.TOTAL_TIMEOUT_DEFAULT = 600;\n/**\r\n * Default behavior: Wait no more than 64 seconds between retries.\r\n *\r\n * @const {number}\r\n */\nexports.MAX_RETRY_DELAY_DEFAULT = 64;\n/**\r\n * Default behavior: Retry conditionally idempotent operations if correct preconditions are set.\r\n *\r\n * @const {enum}\r\n * @private\r\n */\nconst IDEMPOTENCY_STRATEGY_DEFAULT = IdempotencyStrategy.RetryConditional;\n/**\r\n * Returns true if the API request should be retried, given the error that was\r\n * given the first time the request was attempted.\r\n * @const\r\n * @param {error} err - The API error to check if it is appropriate to retry.\r\n * @return {boolean} True if the API request should be retried, false otherwise.\r\n */\nconst RETRYABLE_ERR_FN_DEFAULT = function (err) {\n  var _a;\n  const isConnectionProblem = reason => {\n    return reason.includes('eai_again') ||\n    // DNS lookup error\n    reason === 'econnreset' || reason === 'unexpected connection closure' || reason === 'epipe' || reason === 'socket connection timeout';\n  };\n  if (err) {\n    if ([408, 429, 500, 502, 503, 504].indexOf(err.code) !== -1) {\n      return true;\n    }\n    if (typeof err.code === 'string') {\n      if (['408', '429', '500', '502', '503', '504'].indexOf(err.code) !== -1) {\n        return true;\n      }\n      const reason = err.code.toLowerCase();\n      if (isConnectionProblem(reason)) {\n        return true;\n      }\n    }\n    if (err.errors) {\n      for (const e of err.errors) {\n        const reason = (_a = e === null || e === void 0 ? void 0 : e.reason) === null || _a === void 0 ? void 0 : _a.toString().toLowerCase();\n        if (reason && isConnectionProblem(reason)) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\nexports.RETRYABLE_ERR_FN_DEFAULT = RETRYABLE_ERR_FN_DEFAULT;\n/*! Developer Documentation\r\n *\r\n * Invoke this method to create a new Storage object bound with pre-determined\r\n * configuration options. For each object that can be created (e.g., a bucket),\r\n * there is an equivalent static and instance method. While they are classes,\r\n * they can be instantiated without use of the `new` keyword.\r\n */\n/**\r\n * Cloud Storage uses access control lists (ACLs) to manage object and\r\n * bucket access. ACLs are the mechanism you use to share objects with other\r\n * users and allow other users to access your buckets and objects.\r\n *\r\n * This object provides constants to refer to the three permission levels that\r\n * can be granted to an entity:\r\n *\r\n *   - `gcs.acl.OWNER_ROLE` - (\"OWNER\")\r\n *   - `gcs.acl.READER_ROLE` - (\"READER\")\r\n *   - `gcs.acl.WRITER_ROLE` - (\"WRITER\")\r\n *\r\n * See {@link https://cloud.google.com/storage/docs/access-control/lists| About Access Control Lists}\r\n *\r\n * @name Storage#acl\r\n * @type {object}\r\n * @property {string} OWNER_ROLE\r\n * @property {string} READER_ROLE\r\n * @property {string} WRITER_ROLE\r\n *\r\n * @example\r\n * ```\r\n * const {Storage} = require('@google-cloud/storage');\r\n * const storage = new Storage();\r\n * const albums = storage.bucket('albums');\r\n *\r\n * //-\r\n * // Make all of the files currently in a bucket publicly readable.\r\n * //-\r\n * const options = {\r\n *   entity: 'allUsers',\r\n *   role: storage.acl.READER_ROLE\r\n * };\r\n *\r\n * albums.acl.add(options, function(err, aclObject) {});\r\n *\r\n * //-\r\n * // Make any new objects added to a bucket publicly readable.\r\n * //-\r\n * albums.acl.default.add(options, function(err, aclObject) {});\r\n *\r\n * //-\r\n * // Grant a user ownership permissions to a bucket.\r\n * //-\r\n * albums.acl.add({\r\n *   entity: 'user-useremail@example.com',\r\n *   role: storage.acl.OWNER_ROLE\r\n * }, function(err, aclObject) {});\r\n *\r\n * //-\r\n * // If the callback is omitted, we'll return a Promise.\r\n * //-\r\n * albums.acl.add(options).then(function(data) {\r\n *   const aclObject = data[0];\r\n *   const apiResponse = data[1];\r\n * });\r\n * ```\r\n */\n/**\r\n * Get {@link Bucket} objects for all of the buckets in your project as\r\n * a readable object stream.\r\n *\r\n * @method Storage#getBucketsStream\r\n * @param {GetBucketsRequest} [query] Query object for listing buckets.\r\n * @returns {ReadableStream} A readable stream that emits {@link Bucket}\r\n *     instances.\r\n *\r\n * @example\r\n * ```\r\n * storage.getBucketsStream()\r\n *   .on('error', console.error)\r\n *   .on('data', function(bucket) {\r\n *     // bucket is a Bucket object.\r\n *   })\r\n *   .on('end', function() {\r\n *     // All buckets retrieved.\r\n *   });\r\n *\r\n * //-\r\n * // If you anticipate many results, you can end a stream early to prevent\r\n * // unnecessary processing and API requests.\r\n * //-\r\n * storage.getBucketsStream()\r\n *   .on('data', function(bucket) {\r\n *     this.end();\r\n *   });\r\n * ```\r\n */\n/**\r\n * Get {@link HmacKey} objects for all of the HMAC keys in the project in a\r\n * readable object stream.\r\n *\r\n * @method Storage#getHmacKeysStream\r\n * @param {GetHmacKeysOptions} [options] Configuration options.\r\n * @returns {ReadableStream} A readable stream that emits {@link HmacKey}\r\n *     instances.\r\n *\r\n * @example\r\n * ```\r\n * storage.getHmacKeysStream()\r\n *   .on('error', console.error)\r\n *   .on('data', function(hmacKey) {\r\n *     // hmacKey is an HmacKey object.\r\n *   })\r\n *   .on('end', function() {\r\n *     // All HmacKey retrieved.\r\n *   });\r\n *\r\n * //-\r\n * // If you anticipate many results, you can end a stream early to prevent\r\n * // unnecessary processing and API requests.\r\n * //-\r\n * storage.getHmacKeysStream()\r\n *   .on('data', function(bucket) {\r\n *     this.end();\r\n *   });\r\n * ```\r\n */\n/**\r\n * <h4>ACLs</h4>\r\n * Cloud Storage uses access control lists (ACLs) to manage object and\r\n * bucket access. ACLs are the mechanism you use to share files with other users\r\n * and allow other users to access your buckets and files.\r\n *\r\n * To learn more about ACLs, read this overview on\r\n * {@link https://cloud.google.com/storage/docs/access-control| Access Control}.\r\n *\r\n * See {@link https://cloud.google.com/storage/docs/overview| Cloud Storage overview}\r\n * See {@link https://cloud.google.com/storage/docs/access-control| Access Control}\r\n *\r\n * @class\r\n */\nclass Storage extends index_js_1.Service {\n  getBucketsStream() {\n    // placeholder body, overwritten in constructor\n    return new stream_1.Readable();\n  }\n  getHmacKeysStream() {\n    // placeholder body, overwritten in constructor\n    return new stream_1.Readable();\n  }\n  /**\r\n   * @callback Crc32cGeneratorToStringCallback\r\n   * A method returning the CRC32C as a base64-encoded string.\r\n   *\r\n   * @returns {string}\r\n   *\r\n   * @example\r\n   * Hashing the string 'data' should return 'rth90Q=='\r\n   *\r\n   * ```js\r\n   * const buffer = Buffer.from('data');\r\n   * crc32c.update(buffer);\r\n   * crc32c.toString(); // 'rth90Q=='\r\n   * ```\r\n   **/\n  /**\r\n   * @callback Crc32cGeneratorValidateCallback\r\n   * A method validating a base64-encoded CRC32C string.\r\n   *\r\n   * @param {string} [value] base64-encoded CRC32C string to validate\r\n   * @returns {boolean}\r\n   *\r\n   * @example\r\n   * Should return `true` if the value matches, `false` otherwise\r\n   *\r\n   * ```js\r\n   * const buffer = Buffer.from('data');\r\n   * crc32c.update(buffer);\r\n   * crc32c.validate('DkjKuA=='); // false\r\n   * crc32c.validate('rth90Q=='); // true\r\n   * ```\r\n   **/\n  /**\r\n   * @callback Crc32cGeneratorUpdateCallback\r\n   * A method for passing `Buffer`s for CRC32C generation.\r\n   *\r\n   * @param {Buffer} [data] data to update CRC32C value with\r\n   * @returns {undefined}\r\n   *\r\n   * @example\r\n   * Hashing buffers from 'some ' and 'text\\n'\r\n   *\r\n   * ```js\r\n   * const buffer1 = Buffer.from('some ');\r\n   * crc32c.update(buffer1);\r\n   *\r\n   * const buffer2 = Buffer.from('text\\n');\r\n   * crc32c.update(buffer2);\r\n   *\r\n   * crc32c.toString(); // 'DkjKuA=='\r\n   * ```\r\n   **/\n  /**\r\n   * @typedef {object} CRC32CValidator\r\n   * @property {Crc32cGeneratorToStringCallback}\r\n   * @property {Crc32cGeneratorValidateCallback}\r\n   * @property {Crc32cGeneratorUpdateCallback}\r\n   */\n  /**\r\n   * @callback Crc32cGeneratorCallback\r\n   * @returns {CRC32CValidator}\r\n   */\n  /**\r\n   * @typedef {object} StorageOptions\r\n   * @property {string} [projectId] The project ID from the Google Developer's\r\n   *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\r\n   *     variable `GCLOUD_PROJECT` for your project ID. If your app is running\r\n   * in an environment which supports {@link\r\n   * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\r\n   * Application Default Credentials}, your project ID will be detected\r\n   * automatically.\r\n   * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\r\n   *     downloaded from the Google Developers Console. If you provide a path to\r\n   * a JSON file, the `projectId` option above is not necessary. NOTE: .pem and\r\n   *     .p12 require you to specify the `email` option as well.\r\n   * @property {string} [email] Account email address. Required when using a .pem\r\n   *     or .p12 keyFilename.\r\n   * @property {object} [credentials] Credentials object.\r\n   * @property {string} [credentials.client_email]\r\n   * @property {string} [credentials.private_key]\r\n   * @property {object} [retryOptions] Options for customizing retries. Retriable server errors\r\n   *     will be retried with exponential delay between them dictated by the formula\r\n   *     max(maxRetryDelay, retryDelayMultiplier*retryNumber) until maxRetries or totalTimeout\r\n   *     has been reached. Retries will only happen if autoRetry is set to true.\r\n   * @property {boolean} [retryOptions.autoRetry=true] Automatically retry requests if the\r\n   *     response is related to rate limits or certain intermittent server\r\n   * errors. We will exponentially backoff subsequent requests by default.\r\n   * @property {number} [retryOptions.retryDelayMultiplier = 2] the multiplier by which to\r\n   *   increase the delay time between the completion of failed requests, and the\r\n   *   initiation of the subsequent retrying request.\r\n   * @property {number} [retryOptions.totalTimeout = 600] The total time, starting from\r\n   *  when the initial request is sent, after which an error will\r\n   *   be returned, regardless of the retrying attempts made meanwhile.\r\n   * @property {number} [retryOptions.maxRetryDelay = 64] The maximum delay time between requests.\r\n   *   When this value is reached, ``retryDelayMultiplier`` will no longer be used to\r\n   *   increase delay time.\r\n   * @property {number} [retryOptions.maxRetries=3] Maximum number of automatic retries\r\n   *     attempted before returning the error.\r\n   * @property {function} [retryOptions.retryableErrorFn] Function that returns true if a given\r\n   *     error should be retried and false otherwise.\r\n   * @property {enum} [retryOptions.idempotencyStrategy=IdempotencyStrategy.RetryConditional] Enumeration\r\n   *     controls how conditionally idempotent operations are retried. Possible values are: RetryAlways -\r\n   *     will respect other retry settings and attempt to retry conditionally idempotent operations. RetryConditional -\r\n   *     will retry conditionally idempotent operations if the correct preconditions are set. RetryNever - never\r\n   *     retry a conditionally idempotent operation.\r\n   * @property {string} [userAgent] The value to be prepended to the User-Agent\r\n   *     header in API requests.\r\n   * @property {object} [authClient] `AuthClient` or `GoogleAuth` client to reuse instead of creating a new one.\r\n   * @property {number} [timeout] The amount of time in milliseconds to wait per http request before timing out.\r\n   * @property {object[]} [interceptors_] Array of custom request interceptors to be returned in the order they were assigned.\r\n   * @property {string} [apiEndpoint = storage.google.com] The API endpoint of the service used to make requests.\r\n   * @property {boolean} [useAuthWithCustomEndpoint = false] Controls whether or not to use authentication when using a custom endpoint.\r\n   * @property {Crc32cGeneratorCallback} [callback] A function that generates a CRC32C Validator. Defaults to {@link CRC32C}\r\n   */\n  /**\r\n   * Constructs the Storage client.\r\n   *\r\n   * @example\r\n   * Create a client that uses Application Default Credentials\r\n   * (ADC)\r\n   * ```\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * ```\r\n   *\r\n   * @example\r\n   * Create a client with explicit credentials\r\n   * ```\r\n   * const storage = new Storage({\r\n   *   projectId: 'your-project-id',\r\n   *   keyFilename: '/path/to/keyfile.json'\r\n   * });\r\n   * ```\r\n   *\r\n   * @example\r\n   * Create a client with credentials passed\r\n   * by value as a JavaScript object\r\n   * ```\r\n   * const storage = new Storage({\r\n   *   projectId: 'your-project-id',\r\n   *   credentials: {\r\n   *     type: 'service_account',\r\n   *     project_id: 'xxxxxxx',\r\n   *     private_key_id: 'xxxx',\r\n   *     private_key:'-----BEGIN PRIVATE KEY-----xxxxxxx\\n-----END PRIVATE KEY-----\\n',\r\n   *     client_email: 'xxxx',\r\n   *     client_id: 'xxx',\r\n   *     auth_uri: 'https://accounts.google.com/o/oauth2/auth',\r\n   *     token_uri: 'https://oauth2.googleapis.com/token',\r\n   *     auth_provider_x509_cert_url: 'https://www.googleapis.com/oauth2/v1/certs',\r\n   *     client_x509_cert_url: 'xxx',\r\n   *     }\r\n   * });\r\n   * ```\r\n   *\r\n   * @example\r\n   * Create a client with credentials passed\r\n   * by loading a JSON file directly from disk\r\n   * ```\r\n   * const storage = new Storage({\r\n   *   projectId: 'your-project-id',\r\n   *   credentials: require('/path/to-keyfile.json')\r\n   * });\r\n   * ```\r\n   *\r\n   * @example\r\n   * Create a client with an `AuthClient` (e.g. `DownscopedClient`)\r\n   * ```\r\n   * const {DownscopedClient} = require('google-auth-library');\r\n   * const authClient = new DownscopedClient({...});\r\n   *\r\n   * const storage = new Storage({authClient});\r\n   * ```\r\n   *\r\n   * Additional samples:\r\n   * - https://github.com/googleapis/google-auth-library-nodejs#sample-usage-1\r\n   * - https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/downscopedclient.js\r\n   *\r\n   * @param {StorageOptions} [options] Configuration options.\r\n   */\n  constructor(options = {}) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n    const universe = options.universeDomain || google_auth_library_1.DEFAULT_UNIVERSE;\n    let apiEndpoint = `https://storage.${universe}`;\n    let customEndpoint = false;\n    // Note: EMULATOR_HOST is an experimental configuration variable. Use apiEndpoint instead.\n    const EMULATOR_HOST = process.env.STORAGE_EMULATOR_HOST;\n    if (typeof EMULATOR_HOST === 'string') {\n      apiEndpoint = Storage.sanitizeEndpoint(EMULATOR_HOST);\n      customEndpoint = true;\n    }\n    if (options.apiEndpoint && options.apiEndpoint !== apiEndpoint) {\n      apiEndpoint = Storage.sanitizeEndpoint(options.apiEndpoint);\n      customEndpoint = true;\n    }\n    options = Object.assign({}, options, {\n      apiEndpoint\n    });\n    // Note: EMULATOR_HOST is an experimental configuration variable. Use apiEndpoint instead.\n    const baseUrl = EMULATOR_HOST || `${options.apiEndpoint}/storage/v1`;\n    const config = {\n      apiEndpoint: options.apiEndpoint,\n      retryOptions: {\n        autoRetry: ((_a = options.retryOptions) === null || _a === void 0 ? void 0 : _a.autoRetry) !== undefined ? (_b = options.retryOptions) === null || _b === void 0 ? void 0 : _b.autoRetry : exports.AUTO_RETRY_DEFAULT,\n        maxRetries: ((_c = options.retryOptions) === null || _c === void 0 ? void 0 : _c.maxRetries) ? (_d = options.retryOptions) === null || _d === void 0 ? void 0 : _d.maxRetries : exports.MAX_RETRY_DEFAULT,\n        retryDelayMultiplier: ((_e = options.retryOptions) === null || _e === void 0 ? void 0 : _e.retryDelayMultiplier) ? (_f = options.retryOptions) === null || _f === void 0 ? void 0 : _f.retryDelayMultiplier : exports.RETRY_DELAY_MULTIPLIER_DEFAULT,\n        totalTimeout: ((_g = options.retryOptions) === null || _g === void 0 ? void 0 : _g.totalTimeout) ? (_h = options.retryOptions) === null || _h === void 0 ? void 0 : _h.totalTimeout : exports.TOTAL_TIMEOUT_DEFAULT,\n        maxRetryDelay: ((_j = options.retryOptions) === null || _j === void 0 ? void 0 : _j.maxRetryDelay) ? (_k = options.retryOptions) === null || _k === void 0 ? void 0 : _k.maxRetryDelay : exports.MAX_RETRY_DELAY_DEFAULT,\n        retryableErrorFn: ((_l = options.retryOptions) === null || _l === void 0 ? void 0 : _l.retryableErrorFn) ? (_m = options.retryOptions) === null || _m === void 0 ? void 0 : _m.retryableErrorFn : exports.RETRYABLE_ERR_FN_DEFAULT,\n        idempotencyStrategy: ((_o = options.retryOptions) === null || _o === void 0 ? void 0 : _o.idempotencyStrategy) !== undefined ? (_p = options.retryOptions) === null || _p === void 0 ? void 0 : _p.idempotencyStrategy : IDEMPOTENCY_STRATEGY_DEFAULT\n      },\n      baseUrl,\n      customEndpoint,\n      useAuthWithCustomEndpoint: options === null || options === void 0 ? void 0 : options.useAuthWithCustomEndpoint,\n      projectIdRequired: false,\n      scopes: ['https://www.googleapis.com/auth/iam', 'https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/devstorage.full_control'],\n      packageJson: (0, package_json_helper_cjs_1.getPackageJSON)()\n    };\n    super(config, options);\n    /**\r\n     * Reference to {@link Storage.acl}.\r\n     *\r\n     * @name Storage#acl\r\n     * @see Storage.acl\r\n     */\n    this.acl = Storage.acl;\n    this.crc32cGenerator = options.crc32cGenerator || crc32c_js_1.CRC32C_DEFAULT_VALIDATOR_GENERATOR;\n    this.retryOptions = config.retryOptions;\n    this.getBucketsStream = paginator_1.paginator.streamify('getBuckets');\n    this.getHmacKeysStream = paginator_1.paginator.streamify('getHmacKeys');\n  }\n  static sanitizeEndpoint(url) {\n    if (!exports.PROTOCOL_REGEX.test(url)) {\n      url = `https://${url}`;\n    }\n    return url.replace(/\\/+$/, ''); // Remove trailing slashes\n  }\n  /**\r\n   * Get a reference to a Cloud Storage bucket.\r\n   *\r\n   * @param {string} name Name of the bucket.\r\n   * @param {object} [options] Configuration object.\r\n   * @param {string} [options.kmsKeyName] A Cloud KMS key that will be used to\r\n   *     encrypt objects inserted into this bucket, if no encryption method is\r\n   *     specified.\r\n   * @param {string} [options.userProject] User project to be billed for all\r\n   *     requests made from this Bucket object.\r\n   * @returns {Bucket}\r\n   * @see Bucket\r\n   *\r\n   * @example\r\n   * ```\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const albums = storage.bucket('albums');\r\n   * const photos = storage.bucket('photos');\r\n   * ```\r\n   */\n  bucket(name, options) {\n    if (!name) {\n      throw new Error(StorageExceptionMessages.BUCKET_NAME_REQUIRED);\n    }\n    return new bucket_js_1.Bucket(this, name, options);\n  }\n  /**\r\n   * Reference a channel to receive notifications about changes to your bucket.\r\n   *\r\n   * @param {string} id The ID of the channel.\r\n   * @param {string} resourceId The resource ID of the channel.\r\n   * @returns {Channel}\r\n   * @see Channel\r\n   *\r\n   * @example\r\n   * ```\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const channel = storage.channel('id', 'resource-id');\r\n   * ```\r\n   */\n  channel(id, resourceId) {\n    return new channel_js_1.Channel(this, id, resourceId);\n  }\n  /**\r\n   * @typedef {array} CreateBucketResponse\r\n   * @property {Bucket} 0 The new {@link Bucket}.\r\n   * @property {object} 1 The full API response.\r\n   */\n  /**\r\n   * @callback CreateBucketCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {Bucket} bucket The new {@link Bucket}.\r\n   * @param {object} apiResponse The full API response.\r\n   */\n  /**\r\n   * Metadata to set for the bucket.\r\n   *\r\n   * @typedef {object} CreateBucketRequest\r\n   * @property {boolean} [archive=false] Specify the storage class as Archive.\r\n   * @property {object} [autoclass.enabled=false] Specify whether Autoclass is\r\n   *     enabled for the bucket.\r\n   * @property {object} [autoclass.terminalStorageClass='NEARLINE'] The storage class that objects in an Autoclass bucket eventually transition to if\r\n   *     they are not read for a certain length of time. Valid values are NEARLINE and ARCHIVE.\r\n   * @property {boolean} [coldline=false] Specify the storage class as Coldline.\r\n   * @property {Cors[]} [cors=[]] Specify the CORS configuration to use.\r\n   * @property {CustomPlacementConfig} [customPlacementConfig={}] Specify the bucket's regions for dual-region buckets.\r\n   *     For more information, see {@link https://cloud.google.com/storage/docs/locations| Bucket Locations}.\r\n   * @property {boolean} [dra=false] Specify the storage class as Durable Reduced\r\n   *     Availability.\r\n   * @property {boolean} [enableObjectRetention=false] Specifiy whether or not object retention should be enabled on this bucket.\r\n   * @property {object} [hierarchicalNamespace.enabled=false] Specify whether or not to enable hierarchical namespace on this bucket.\r\n   * @property {string} [location] Specify the bucket's location. If specifying\r\n   *     a dual-region, the `customPlacementConfig` property should be set in conjunction.\r\n   *     For more information, see {@link https://cloud.google.com/storage/docs/locations| Bucket Locations}.\r\n   * @property {boolean} [multiRegional=false] Specify the storage class as\r\n   *     Multi-Regional.\r\n   * @property {boolean} [nearline=false] Specify the storage class as Nearline.\r\n   * @property {boolean} [regional=false] Specify the storage class as Regional.\r\n   * @property {boolean} [requesterPays=false] Force the use of the User Project metadata field to assign operational\r\n   *     costs when an operation is made on a Bucket and its objects.\r\n   * @property {string} [rpo] For dual-region buckets, controls whether turbo\r\n   *      replication is enabled (`ASYNC_TURBO`) or disabled (`DEFAULT`).\r\n   * @property {boolean} [standard=true] Specify the storage class as Standard.\r\n   * @property {string} [storageClass] The new storage class. (`standard`,\r\n   *     `nearline`, `coldline`, or `archive`).\r\n   *     **Note:** The storage classes `multi_regional`, `regional`, and\r\n   *     `durable_reduced_availability` are now legacy and will be deprecated in\r\n   *     the future.\r\n   * @property {Versioning} [versioning=undefined] Specify the versioning status.\r\n   * @property {string} [userProject] The ID of the project which will be billed\r\n   *     for the request.\r\n   */\n  /**\r\n   * Create a bucket.\r\n   *\r\n   * Cloud Storage uses a flat namespace, so you can't create a bucket with\r\n   * a name that is already in use. For more information, see\r\n   * {@link https://cloud.google.com/storage/docs/bucketnaming.html#requirements| Bucket Naming Guidelines}.\r\n   *\r\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/insert| Buckets: insert API Documentation}\r\n   * See {@link https://cloud.google.com/storage/docs/storage-classes| Storage Classes}\r\n   *\r\n   * @param {string} name Name of the bucket to create.\r\n   * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\r\n   * @param {CreateBucketCallback} [callback] Callback function.\r\n   * @returns {Promise<CreateBucketResponse>}\r\n   * @throws {Error} If a name is not provided.\r\n   * @see Bucket#create\r\n   *\r\n   * @example\r\n   * ```\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const callback = function(err, bucket, apiResponse) {\r\n   *   // `bucket` is a Bucket object.\r\n   * };\r\n   *\r\n   * storage.createBucket('new-bucket', callback);\r\n   *\r\n   * //-\r\n   * // Create a bucket in a specific location and region. <em>See the <a\r\n   * // href=\"https://cloud.google.com/storage/docs/json_api/v1/buckets/insert\">\r\n   * // Official JSON API docs</a> for complete details on the `location`\r\n   * option.\r\n   * // </em>\r\n   * //-\r\n   * const metadata = {\r\n   *   location: 'US-CENTRAL1',\r\n   *   regional: true\r\n   * };\r\n   *\r\n   * storage.createBucket('new-bucket', metadata, callback);\r\n   *\r\n   * //-\r\n   * // Create a bucket with a retention policy of 6 months.\r\n   * //-\r\n   * const metadata = {\r\n   *   retentionPolicy: {\r\n   *     retentionPeriod: 15780000 // 6 months in seconds.\r\n   *   }\r\n   * };\r\n   *\r\n   * storage.createBucket('new-bucket', metadata, callback);\r\n   *\r\n   * //-\r\n   * // Enable versioning on a new bucket.\r\n   * //-\r\n   * const metadata = {\r\n   *   versioning: {\r\n   *     enabled: true\r\n   *   }\r\n   * };\r\n   *\r\n   * storage.createBucket('new-bucket', metadata, callback);\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * storage.createBucket('new-bucket').then(function(data) {\r\n   *   const bucket = data[0];\r\n   *   const apiResponse = data[1];\r\n   * });\r\n   *\r\n   * ```\r\n   * @example <caption>include:samples/buckets.js</caption>\r\n   * region_tag:storage_create_bucket\r\n   * Another example:\r\n   */\n  createBucket(name, metadataOrCallback, callback) {\n    if (!name) {\n      throw new Error(StorageExceptionMessages.BUCKET_NAME_REQUIRED_CREATE);\n    }\n    let metadata;\n    if (!callback) {\n      callback = metadataOrCallback;\n      metadata = {};\n    } else {\n      metadata = metadataOrCallback;\n    }\n    const body = {\n      ...metadata,\n      name\n    };\n    const storageClasses = {\n      archive: 'ARCHIVE',\n      coldline: 'COLDLINE',\n      dra: 'DURABLE_REDUCED_AVAILABILITY',\n      multiRegional: 'MULTI_REGIONAL',\n      nearline: 'NEARLINE',\n      regional: 'REGIONAL',\n      standard: 'STANDARD'\n    };\n    const storageClassKeys = Object.keys(storageClasses);\n    for (const storageClass of storageClassKeys) {\n      if (body[storageClass]) {\n        if (metadata.storageClass && metadata.storageClass !== storageClass) {\n          throw new Error(`Both \\`${storageClass}\\` and \\`storageClass\\` were provided.`);\n        }\n        body.storageClass = storageClasses[storageClass];\n        delete body[storageClass];\n      }\n    }\n    if (body.requesterPays) {\n      body.billing = {\n        requesterPays: body.requesterPays\n      };\n      delete body.requesterPays;\n    }\n    const query = {\n      project: this.projectId\n    };\n    if (body.userProject) {\n      query.userProject = body.userProject;\n      delete body.userProject;\n    }\n    if (body.enableObjectRetention) {\n      query.enableObjectRetention = body.enableObjectRetention;\n      delete body.enableObjectRetention;\n    }\n    if (body.predefinedAcl) {\n      query.predefinedAcl = body.predefinedAcl;\n      delete body.predefinedAcl;\n    }\n    if (body.predefinedDefaultObjectAcl) {\n      query.predefinedDefaultObjectAcl = body.predefinedDefaultObjectAcl;\n      delete body.predefinedDefaultObjectAcl;\n    }\n    if (body.projection) {\n      query.projection = body.projection;\n      delete body.projection;\n    }\n    this.request({\n      method: 'POST',\n      uri: '/b',\n      qs: query,\n      json: body\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n      const bucket = this.bucket(name);\n      bucket.metadata = resp;\n      callback(null, bucket, resp);\n    });\n  }\n  /**\r\n   * @typedef {object} CreateHmacKeyOptions\r\n   * @property {string} [projectId] The project ID of the project that owns\r\n   *     the service account of the requested HMAC key. If not provided,\r\n   *     the project ID used to instantiate the Storage client will be used.\r\n   * @property {string} [userProject] This parameter is currently ignored.\r\n   */\n  /**\r\n   * @typedef {object} HmacKeyMetadata\r\n   * @property {string} accessId The access id identifies which HMAC key was\r\n   *     used to sign a request when authenticating with HMAC.\r\n   * @property {string} etag Used to perform a read-modify-write of the key.\r\n   * @property {string} id The resource name of the HMAC key.\r\n   * @property {string} projectId The project ID.\r\n   * @property {string} serviceAccountEmail The service account's email this\r\n   *     HMAC key is created for.\r\n   * @property {string} state The state of this HMAC key. One of \"ACTIVE\",\r\n   *     \"INACTIVE\" or \"DELETED\".\r\n   * @property {string} timeCreated The creation time of the HMAC key in\r\n   *     RFC 3339 format.\r\n   * @property {string} [updated] The time this HMAC key was last updated in\r\n   *     RFC 3339 format.\r\n   */\n  /**\r\n   * @typedef {array} CreateHmacKeyResponse\r\n   * @property {HmacKey} 0 The HmacKey instance created from API response.\r\n   * @property {string} 1 The HMAC key's secret used to access the XML API.\r\n   * @property {object} 3 The raw API response.\r\n   */\n  /**\r\n   * @callback CreateHmacKeyCallback Callback function.\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {HmacKey} hmacKey The HmacKey instance created from API response.\r\n   * @param {string} secret The HMAC key's secret used to access the XML API.\r\n   * @param {object} apiResponse The raw API response.\r\n   */\n  /**\r\n   * Create an HMAC key associated with an service account to authenticate\r\n   * requests to the Cloud Storage XML API.\r\n   *\r\n   * See {@link https://cloud.google.com/storage/docs/authentication/hmackeys| HMAC keys documentation}\r\n   *\r\n   * @param {string} serviceAccountEmail The service account's email address\r\n   *     with which the HMAC key is created for.\r\n   * @param {CreateHmacKeyCallback} [callback] Callback function.\r\n   * @return {Promise<CreateHmacKeyResponse>}\r\n   *\r\n   * @example\r\n   * ```\r\n   * const {Storage} = require('google-cloud/storage');\r\n   * const storage = new Storage();\r\n   *\r\n   * // Replace with your service account's email address\r\n   * const serviceAccountEmail =\r\n   *   'my-service-account@appspot.gserviceaccount.com';\r\n   *\r\n   * storage.createHmacKey(serviceAccountEmail, function(err, hmacKey, secret) {\r\n   *   if (!err) {\r\n   *     // Securely store the secret for use with the XML API.\r\n   *   }\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * storage.createHmacKey(serviceAccountEmail)\r\n   *   .then((response) => {\r\n   *     const hmacKey = response[0];\r\n   *     const secret = response[1];\r\n   *     // Securely store the secret for use with the XML API.\r\n   *   });\r\n   * ```\r\n   */\n  createHmacKey(serviceAccountEmail, optionsOrCb, cb) {\n    if (typeof serviceAccountEmail !== 'string') {\n      throw new Error(StorageExceptionMessages.HMAC_SERVICE_ACCOUNT);\n    }\n    const {\n      options,\n      callback\n    } = (0, util_js_1.normalize)(optionsOrCb, cb);\n    const query = Object.assign({}, options, {\n      serviceAccountEmail\n    });\n    const projectId = query.projectId || this.projectId;\n    delete query.projectId;\n    this.request({\n      method: 'POST',\n      uri: `/projects/${projectId}/hmacKeys`,\n      qs: query,\n      maxRetries: 0 //explicitly set this value since this is a non-idempotent function\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, null, resp);\n        return;\n      }\n      const metadata = resp.metadata;\n      const hmacKey = this.hmacKey(metadata.accessId, {\n        projectId: metadata.projectId\n      });\n      hmacKey.metadata = resp.metadata;\n      callback(null, hmacKey, resp.secret, resp);\n    });\n  }\n  /**\r\n   * Query object for listing buckets.\r\n   *\r\n   * @typedef {object} GetBucketsRequest\r\n   * @property {boolean} [autoPaginate=true] Have pagination handled\r\n   *     automatically.\r\n   * @property {number} [maxApiCalls] Maximum number of API calls to make.\r\n   * @property {number} [maxResults] Maximum number of items plus prefixes to\r\n   *     return per call.\r\n   *     Note: By default will handle pagination automatically\r\n   *     if more than 1 page worth of results are requested per call.\r\n   *     When `autoPaginate` is set to `false` the smaller of `maxResults`\r\n   *     or 1 page of results will be returned per call.\r\n   * @property {string} [pageToken] A previously-returned page token\r\n   *     representing part of the larger set of results to view.\r\n   * @property {string} [userProject] The ID of the project which will be billed\r\n   *     for the request.\r\n   */\n  /**\r\n   * @typedef {array} GetBucketsResponse\r\n   * @property {Bucket[]} 0 Array of {@link Bucket} instances.\r\n   * @property {object} 1 nextQuery A query object to receive more results.\r\n   * @property {object} 2 The full API response.\r\n   */\n  /**\r\n   * @callback GetBucketsCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {Bucket[]} buckets Array of {@link Bucket} instances.\r\n   * @param {object} nextQuery A query object to receive more results.\r\n   * @param {object} apiResponse The full API response.\r\n   */\n  /**\r\n   * Get Bucket objects for all of the buckets in your project.\r\n   *\r\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/list| Buckets: list API Documentation}\r\n   *\r\n   * @param {GetBucketsRequest} [query] Query object for listing buckets.\r\n   * @param {GetBucketsCallback} [callback] Callback function.\r\n   * @returns {Promise<GetBucketsResponse>}\r\n   *\r\n   * @example\r\n   * ```\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * storage.getBuckets(function(err, buckets) {\r\n   *   if (!err) {\r\n   *     // buckets is an array of Bucket objects.\r\n   *   }\r\n   * });\r\n   *\r\n   * //-\r\n   * // To control how many API requests are made and page through the results\r\n   * // manually, set `autoPaginate` to `false`.\r\n   * //-\r\n   * const callback = function(err, buckets, nextQuery, apiResponse) {\r\n   *   if (nextQuery) {\r\n   *     // More results exist.\r\n   *     storage.getBuckets(nextQuery, callback);\r\n   *   }\r\n   *\r\n   *   // The `metadata` property is populated for you with the metadata at the\r\n   *   // time of fetching.\r\n   *   buckets[0].metadata;\r\n   *\r\n   *   // However, in cases where you are concerned the metadata could have\r\n   *   // changed, use the `getMetadata` method.\r\n   *   buckets[0].getMetadata(function(err, metadata, apiResponse) {});\r\n   * };\r\n   *\r\n   * storage.getBuckets({\r\n   *   autoPaginate: false\r\n   * }, callback);\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * storage.getBuckets().then(function(data) {\r\n   *   const buckets = data[0];\r\n   * });\r\n   *\r\n   * ```\r\n   * @example <caption>include:samples/buckets.js</caption>\r\n   * region_tag:storage_list_buckets\r\n   * Another example:\r\n   */\n  getBuckets(optionsOrCallback, cb) {\n    const {\n      options,\n      callback\n    } = (0, util_js_1.normalize)(optionsOrCallback, cb);\n    options.project = options.project || this.projectId;\n    this.request({\n      uri: '/b',\n      qs: options\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, null, resp);\n        return;\n      }\n      const itemsArray = resp.items ? resp.items : [];\n      const buckets = itemsArray.map(bucket => {\n        const bucketInstance = this.bucket(bucket.id);\n        bucketInstance.metadata = bucket;\n        return bucketInstance;\n      });\n      const nextQuery = resp.nextPageToken ? Object.assign({}, options, {\n        pageToken: resp.nextPageToken\n      }) : null;\n      callback(null, buckets, nextQuery, resp);\n    });\n  }\n  getHmacKeys(optionsOrCb, cb) {\n    const {\n      options,\n      callback\n    } = (0, util_js_1.normalize)(optionsOrCb, cb);\n    const query = Object.assign({}, options);\n    const projectId = query.projectId || this.projectId;\n    delete query.projectId;\n    this.request({\n      uri: `/projects/${projectId}/hmacKeys`,\n      qs: query\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, null, resp);\n        return;\n      }\n      const itemsArray = resp.items ? resp.items : [];\n      const hmacKeys = itemsArray.map(hmacKey => {\n        const hmacKeyInstance = this.hmacKey(hmacKey.accessId, {\n          projectId: hmacKey.projectId\n        });\n        hmacKeyInstance.metadata = hmacKey;\n        return hmacKeyInstance;\n      });\n      const nextQuery = resp.nextPageToken ? Object.assign({}, options, {\n        pageToken: resp.nextPageToken\n      }) : null;\n      callback(null, hmacKeys, nextQuery, resp);\n    });\n  }\n  /**\r\n   * @typedef {array} GetServiceAccountResponse\r\n   * @property {object} 0 The service account resource.\r\n   * @property {object} 1 The full\r\n   * {@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource| API response}.\r\n   */\n  /**\r\n   * @callback GetServiceAccountCallback\r\n   * @param {?Error} err Request error, if any.\r\n   * @param {object} serviceAccount The serviceAccount resource.\r\n   * @param {string} serviceAccount.emailAddress The service account email\r\n   *     address.\r\n   * @param {object} apiResponse The full\r\n   * {@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource| API response}.\r\n   */\n  /**\r\n   * Get the email address of this project's Google Cloud Storage service\r\n   * account.\r\n   *\r\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get| Projects.serviceAccount: get API Documentation}\r\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource| Projects.serviceAccount Resource}\r\n   *\r\n   * @param {object} [options] Configuration object.\r\n   * @param {string} [options.userProject] User project to be billed for this\r\n   *     request.\r\n   * @param {GetServiceAccountCallback} [callback] Callback function.\r\n   * @returns {Promise<GetServiceAccountResponse>}\r\n   *\r\n   * @example\r\n   * ```\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   *\r\n   * storage.getServiceAccount(function(err, serviceAccount, apiResponse) {\r\n   *   if (!err) {\r\n   *     const serviceAccountEmail = serviceAccount.emailAddress;\r\n   *   }\r\n   * });\r\n   *\r\n   * //-\r\n   * // If the callback is omitted, we'll return a Promise.\r\n   * //-\r\n   * storage.getServiceAccount().then(function(data) {\r\n   *   const serviceAccountEmail = data[0].emailAddress;\r\n   *   const apiResponse = data[1];\r\n   * });\r\n   * ```\r\n   */\n  getServiceAccount(optionsOrCallback, cb) {\n    const {\n      options,\n      callback\n    } = (0, util_js_1.normalize)(optionsOrCallback, cb);\n    this.request({\n      uri: `/projects/${this.projectId}/serviceAccount`,\n      qs: options\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n      const camelCaseResponse = {};\n      for (const prop in resp) {\n        // eslint-disable-next-line no-prototype-builtins\n        if (resp.hasOwnProperty(prop)) {\n          const camelCaseProp = prop.replace(/_(\\w)/g, (_, match) => match.toUpperCase());\n          camelCaseResponse[camelCaseProp] = resp[prop];\n        }\n      }\n      callback(null, camelCaseResponse, resp);\n    });\n  }\n  /**\r\n   * Get a reference to an HmacKey object.\r\n   * Note: this does not fetch the HMAC key's metadata. Use HmacKey#get() to\r\n   * retrieve and populate the metadata.\r\n   *\r\n   * To get a reference to an HMAC key that's not created for a service\r\n   * account in the same project used to instantiate the Storage client,\r\n   * supply the project's ID as `projectId` in the `options` argument.\r\n   *\r\n   * @param {string} accessId The HMAC key's access ID.\r\n   * @param {HmacKeyOptions} options HmacKey constructor options.\r\n   * @returns {HmacKey}\r\n   * @see HmacKey\r\n   *\r\n   * @example\r\n   * ```\r\n   * const {Storage} = require('@google-cloud/storage');\r\n   * const storage = new Storage();\r\n   * const hmacKey = storage.hmacKey('ACCESS_ID');\r\n   * ```\r\n   */\n  hmacKey(accessId, options) {\n    if (!accessId) {\n      throw new Error(StorageExceptionMessages.HMAC_ACCESS_ID);\n    }\n    return new hmacKey_js_1.HmacKey(this, accessId, options);\n  }\n}\nexports.Storage = Storage;\n/**\r\n * {@link Bucket} class.\r\n *\r\n * @name Storage.Bucket\r\n * @see Bucket\r\n * @type {Constructor}\r\n */\nStorage.Bucket = bucket_js_1.Bucket;\n/**\r\n * {@link Channel} class.\r\n *\r\n * @name Storage.Channel\r\n * @see Channel\r\n * @type {Constructor}\r\n */\nStorage.Channel = channel_js_1.Channel;\n/**\r\n * {@link File} class.\r\n *\r\n * @name Storage.File\r\n * @see File\r\n * @type {Constructor}\r\n */\nStorage.File = file_js_1.File;\n/**\r\n * {@link HmacKey} class.\r\n *\r\n * @name Storage.HmacKey\r\n * @see HmacKey\r\n * @type {Constructor}\r\n */\nStorage.HmacKey = hmacKey_js_1.HmacKey;\nStorage.acl = {\n  OWNER_ROLE: 'OWNER',\n  READER_ROLE: 'READER',\n  WRITER_ROLE: 'WRITER'\n};\n/*! Developer Documentation\r\n *\r\n * These methods can be auto-paginated.\r\n */\npaginator_1.paginator.extend(Storage, ['getBuckets', 'getHmacKeys']);\n/*! Developer Documentation\r\n *\r\n * All async methods (except for streams) will return a Promise in the event\r\n * that a callback is omitted.\r\n */\n(0, promisify_1.promisifyAll)(Storage, {\n  exclude: ['bucket', 'channel', 'hmacKey']\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","Storage","RETRYABLE_ERR_FN_DEFAULT","MAX_RETRY_DELAY_DEFAULT","TOTAL_TIMEOUT_DEFAULT","RETRY_DELAY_MULTIPLIER_DEFAULT","MAX_RETRY_DEFAULT","AUTO_RETRY_DEFAULT","PROTOCOL_REGEX","StorageExceptionMessages","ExceptionMessages","IdempotencyStrategy","index_js_1","require","paginator_1","promisify_1","stream_1","bucket_js_1","channel_js_1","file_js_1","util_js_1","package_json_helper_cjs_1","hmacKey_js_1","crc32c_js_1","google_auth_library_1","IDEMPOTENCY_STRATEGY_DEFAULT","RetryConditional","err","_a","isConnectionProblem","reason","includes","indexOf","code","toLowerCase","errors","e","toString","Service","getBucketsStream","Readable","getHmacKeysStream","constructor","options","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","universe","universeDomain","DEFAULT_UNIVERSE","apiEndpoint","customEndpoint","EMULATOR_HOST","process","env","STORAGE_EMULATOR_HOST","sanitizeEndpoint","assign","baseUrl","config","retryOptions","autoRetry","undefined","maxRetries","retryDelayMultiplier","totalTimeout","maxRetryDelay","retryableErrorFn","idempotencyStrategy","useAuthWithCustomEndpoint","projectIdRequired","scopes","packageJson","getPackageJSON","acl","crc32cGenerator","CRC32C_DEFAULT_VALIDATOR_GENERATOR","paginator","streamify","url","test","replace","bucket","name","Error","BUCKET_NAME_REQUIRED","Bucket","channel","id","resourceId","Channel","createBucket","metadataOrCallback","callback","BUCKET_NAME_REQUIRED_CREATE","metadata","body","storageClasses","archive","coldline","dra","multiRegional","nearline","regional","standard","storageClassKeys","keys","storageClass","requesterPays","billing","query","project","projectId","userProject","enableObjectRetention","predefinedAcl","predefinedDefaultObjectAcl","projection","request","method","uri","qs","json","resp","createHmacKey","serviceAccountEmail","optionsOrCb","cb","HMAC_SERVICE_ACCOUNT","normalize","hmacKey","accessId","secret","getBuckets","optionsOrCallback","itemsArray","items","buckets","map","bucketInstance","nextQuery","nextPageToken","pageToken","getHmacKeys","hmacKeys","hmacKeyInstance","getServiceAccount","camelCaseResponse","prop","hasOwnProperty","camelCaseProp","_","match","toUpperCase","HMAC_ACCESS_ID","HmacKey","File","OWNER_ROLE","READER_ROLE","WRITER_ROLE","extend","promisifyAll","exclude"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/@google-cloud/storage/build/cjs/src/storage.js"],"sourcesContent":["\"use strict\";\r\n// Copyright 2019 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Storage = exports.RETRYABLE_ERR_FN_DEFAULT = exports.MAX_RETRY_DELAY_DEFAULT = exports.TOTAL_TIMEOUT_DEFAULT = exports.RETRY_DELAY_MULTIPLIER_DEFAULT = exports.MAX_RETRY_DEFAULT = exports.AUTO_RETRY_DEFAULT = exports.PROTOCOL_REGEX = exports.StorageExceptionMessages = exports.ExceptionMessages = exports.IdempotencyStrategy = void 0;\r\nconst index_js_1 = require(\"./nodejs-common/index.js\");\r\nconst paginator_1 = require(\"@google-cloud/paginator\");\r\nconst promisify_1 = require(\"@google-cloud/promisify\");\r\nconst stream_1 = require(\"stream\");\r\nconst bucket_js_1 = require(\"./bucket.js\");\r\nconst channel_js_1 = require(\"./channel.js\");\r\nconst file_js_1 = require(\"./file.js\");\r\nconst util_js_1 = require(\"./util.js\");\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-ignore\r\nconst package_json_helper_cjs_1 = require(\"./package-json-helper.cjs\");\r\nconst hmacKey_js_1 = require(\"./hmacKey.js\");\r\nconst crc32c_js_1 = require(\"./crc32c.js\");\r\nconst google_auth_library_1 = require(\"google-auth-library\");\r\nvar IdempotencyStrategy;\r\n(function (IdempotencyStrategy) {\r\n    IdempotencyStrategy[IdempotencyStrategy[\"RetryAlways\"] = 0] = \"RetryAlways\";\r\n    IdempotencyStrategy[IdempotencyStrategy[\"RetryConditional\"] = 1] = \"RetryConditional\";\r\n    IdempotencyStrategy[IdempotencyStrategy[\"RetryNever\"] = 2] = \"RetryNever\";\r\n})(IdempotencyStrategy || (exports.IdempotencyStrategy = IdempotencyStrategy = {}));\r\nvar ExceptionMessages;\r\n(function (ExceptionMessages) {\r\n    ExceptionMessages[\"EXPIRATION_DATE_INVALID\"] = \"The expiration date provided was invalid.\";\r\n    ExceptionMessages[\"EXPIRATION_DATE_PAST\"] = \"An expiration date cannot be in the past.\";\r\n})(ExceptionMessages || (exports.ExceptionMessages = ExceptionMessages = {}));\r\nvar StorageExceptionMessages;\r\n(function (StorageExceptionMessages) {\r\n    StorageExceptionMessages[\"BUCKET_NAME_REQUIRED\"] = \"A bucket name is needed to use Cloud Storage.\";\r\n    StorageExceptionMessages[\"BUCKET_NAME_REQUIRED_CREATE\"] = \"A name is required to create a bucket.\";\r\n    StorageExceptionMessages[\"HMAC_SERVICE_ACCOUNT\"] = \"The first argument must be a service account email to create an HMAC key.\";\r\n    StorageExceptionMessages[\"HMAC_ACCESS_ID\"] = \"An access ID is needed to create an HmacKey object.\";\r\n})(StorageExceptionMessages || (exports.StorageExceptionMessages = StorageExceptionMessages = {}));\r\nexports.PROTOCOL_REGEX = /^(\\w*):\\/\\//;\r\n/**\r\n * Default behavior: Automatically retry retriable server errors.\r\n *\r\n * @const {boolean}\r\n */\r\nexports.AUTO_RETRY_DEFAULT = true;\r\n/**\r\n * Default behavior: Only attempt to retry retriable errors 3 times.\r\n *\r\n * @const {number}\r\n */\r\nexports.MAX_RETRY_DEFAULT = 3;\r\n/**\r\n * Default behavior: Wait twice as long as previous retry before retrying.\r\n *\r\n * @const {number}\r\n */\r\nexports.RETRY_DELAY_MULTIPLIER_DEFAULT = 2;\r\n/**\r\n * Default behavior: If the operation doesn't succeed after 600 seconds,\r\n *  stop retrying.\r\n *\r\n * @const {number}\r\n */\r\nexports.TOTAL_TIMEOUT_DEFAULT = 600;\r\n/**\r\n * Default behavior: Wait no more than 64 seconds between retries.\r\n *\r\n * @const {number}\r\n */\r\nexports.MAX_RETRY_DELAY_DEFAULT = 64;\r\n/**\r\n * Default behavior: Retry conditionally idempotent operations if correct preconditions are set.\r\n *\r\n * @const {enum}\r\n * @private\r\n */\r\nconst IDEMPOTENCY_STRATEGY_DEFAULT = IdempotencyStrategy.RetryConditional;\r\n/**\r\n * Returns true if the API request should be retried, given the error that was\r\n * given the first time the request was attempted.\r\n * @const\r\n * @param {error} err - The API error to check if it is appropriate to retry.\r\n * @return {boolean} True if the API request should be retried, false otherwise.\r\n */\r\nconst RETRYABLE_ERR_FN_DEFAULT = function (err) {\r\n    var _a;\r\n    const isConnectionProblem = (reason) => {\r\n        return (reason.includes('eai_again') || // DNS lookup error\r\n            reason === 'econnreset' ||\r\n            reason === 'unexpected connection closure' ||\r\n            reason === 'epipe' ||\r\n            reason === 'socket connection timeout');\r\n    };\r\n    if (err) {\r\n        if ([408, 429, 500, 502, 503, 504].indexOf(err.code) !== -1) {\r\n            return true;\r\n        }\r\n        if (typeof err.code === 'string') {\r\n            if (['408', '429', '500', '502', '503', '504'].indexOf(err.code) !== -1) {\r\n                return true;\r\n            }\r\n            const reason = err.code.toLowerCase();\r\n            if (isConnectionProblem(reason)) {\r\n                return true;\r\n            }\r\n        }\r\n        if (err.errors) {\r\n            for (const e of err.errors) {\r\n                const reason = (_a = e === null || e === void 0 ? void 0 : e.reason) === null || _a === void 0 ? void 0 : _a.toString().toLowerCase();\r\n                if (reason && isConnectionProblem(reason)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n};\r\nexports.RETRYABLE_ERR_FN_DEFAULT = RETRYABLE_ERR_FN_DEFAULT;\r\n/*! Developer Documentation\r\n *\r\n * Invoke this method to create a new Storage object bound with pre-determined\r\n * configuration options. For each object that can be created (e.g., a bucket),\r\n * there is an equivalent static and instance method. While they are classes,\r\n * they can be instantiated without use of the `new` keyword.\r\n */\r\n/**\r\n * Cloud Storage uses access control lists (ACLs) to manage object and\r\n * bucket access. ACLs are the mechanism you use to share objects with other\r\n * users and allow other users to access your buckets and objects.\r\n *\r\n * This object provides constants to refer to the three permission levels that\r\n * can be granted to an entity:\r\n *\r\n *   - `gcs.acl.OWNER_ROLE` - (\"OWNER\")\r\n *   - `gcs.acl.READER_ROLE` - (\"READER\")\r\n *   - `gcs.acl.WRITER_ROLE` - (\"WRITER\")\r\n *\r\n * See {@link https://cloud.google.com/storage/docs/access-control/lists| About Access Control Lists}\r\n *\r\n * @name Storage#acl\r\n * @type {object}\r\n * @property {string} OWNER_ROLE\r\n * @property {string} READER_ROLE\r\n * @property {string} WRITER_ROLE\r\n *\r\n * @example\r\n * ```\r\n * const {Storage} = require('@google-cloud/storage');\r\n * const storage = new Storage();\r\n * const albums = storage.bucket('albums');\r\n *\r\n * //-\r\n * // Make all of the files currently in a bucket publicly readable.\r\n * //-\r\n * const options = {\r\n *   entity: 'allUsers',\r\n *   role: storage.acl.READER_ROLE\r\n * };\r\n *\r\n * albums.acl.add(options, function(err, aclObject) {});\r\n *\r\n * //-\r\n * // Make any new objects added to a bucket publicly readable.\r\n * //-\r\n * albums.acl.default.add(options, function(err, aclObject) {});\r\n *\r\n * //-\r\n * // Grant a user ownership permissions to a bucket.\r\n * //-\r\n * albums.acl.add({\r\n *   entity: 'user-useremail@example.com',\r\n *   role: storage.acl.OWNER_ROLE\r\n * }, function(err, aclObject) {});\r\n *\r\n * //-\r\n * // If the callback is omitted, we'll return a Promise.\r\n * //-\r\n * albums.acl.add(options).then(function(data) {\r\n *   const aclObject = data[0];\r\n *   const apiResponse = data[1];\r\n * });\r\n * ```\r\n */\r\n/**\r\n * Get {@link Bucket} objects for all of the buckets in your project as\r\n * a readable object stream.\r\n *\r\n * @method Storage#getBucketsStream\r\n * @param {GetBucketsRequest} [query] Query object for listing buckets.\r\n * @returns {ReadableStream} A readable stream that emits {@link Bucket}\r\n *     instances.\r\n *\r\n * @example\r\n * ```\r\n * storage.getBucketsStream()\r\n *   .on('error', console.error)\r\n *   .on('data', function(bucket) {\r\n *     // bucket is a Bucket object.\r\n *   })\r\n *   .on('end', function() {\r\n *     // All buckets retrieved.\r\n *   });\r\n *\r\n * //-\r\n * // If you anticipate many results, you can end a stream early to prevent\r\n * // unnecessary processing and API requests.\r\n * //-\r\n * storage.getBucketsStream()\r\n *   .on('data', function(bucket) {\r\n *     this.end();\r\n *   });\r\n * ```\r\n */\r\n/**\r\n * Get {@link HmacKey} objects for all of the HMAC keys in the project in a\r\n * readable object stream.\r\n *\r\n * @method Storage#getHmacKeysStream\r\n * @param {GetHmacKeysOptions} [options] Configuration options.\r\n * @returns {ReadableStream} A readable stream that emits {@link HmacKey}\r\n *     instances.\r\n *\r\n * @example\r\n * ```\r\n * storage.getHmacKeysStream()\r\n *   .on('error', console.error)\r\n *   .on('data', function(hmacKey) {\r\n *     // hmacKey is an HmacKey object.\r\n *   })\r\n *   .on('end', function() {\r\n *     // All HmacKey retrieved.\r\n *   });\r\n *\r\n * //-\r\n * // If you anticipate many results, you can end a stream early to prevent\r\n * // unnecessary processing and API requests.\r\n * //-\r\n * storage.getHmacKeysStream()\r\n *   .on('data', function(bucket) {\r\n *     this.end();\r\n *   });\r\n * ```\r\n */\r\n/**\r\n * <h4>ACLs</h4>\r\n * Cloud Storage uses access control lists (ACLs) to manage object and\r\n * bucket access. ACLs are the mechanism you use to share files with other users\r\n * and allow other users to access your buckets and files.\r\n *\r\n * To learn more about ACLs, read this overview on\r\n * {@link https://cloud.google.com/storage/docs/access-control| Access Control}.\r\n *\r\n * See {@link https://cloud.google.com/storage/docs/overview| Cloud Storage overview}\r\n * See {@link https://cloud.google.com/storage/docs/access-control| Access Control}\r\n *\r\n * @class\r\n */\r\nclass Storage extends index_js_1.Service {\r\n    getBucketsStream() {\r\n        // placeholder body, overwritten in constructor\r\n        return new stream_1.Readable();\r\n    }\r\n    getHmacKeysStream() {\r\n        // placeholder body, overwritten in constructor\r\n        return new stream_1.Readable();\r\n    }\r\n    /**\r\n     * @callback Crc32cGeneratorToStringCallback\r\n     * A method returning the CRC32C as a base64-encoded string.\r\n     *\r\n     * @returns {string}\r\n     *\r\n     * @example\r\n     * Hashing the string 'data' should return 'rth90Q=='\r\n     *\r\n     * ```js\r\n     * const buffer = Buffer.from('data');\r\n     * crc32c.update(buffer);\r\n     * crc32c.toString(); // 'rth90Q=='\r\n     * ```\r\n     **/\r\n    /**\r\n     * @callback Crc32cGeneratorValidateCallback\r\n     * A method validating a base64-encoded CRC32C string.\r\n     *\r\n     * @param {string} [value] base64-encoded CRC32C string to validate\r\n     * @returns {boolean}\r\n     *\r\n     * @example\r\n     * Should return `true` if the value matches, `false` otherwise\r\n     *\r\n     * ```js\r\n     * const buffer = Buffer.from('data');\r\n     * crc32c.update(buffer);\r\n     * crc32c.validate('DkjKuA=='); // false\r\n     * crc32c.validate('rth90Q=='); // true\r\n     * ```\r\n     **/\r\n    /**\r\n     * @callback Crc32cGeneratorUpdateCallback\r\n     * A method for passing `Buffer`s for CRC32C generation.\r\n     *\r\n     * @param {Buffer} [data] data to update CRC32C value with\r\n     * @returns {undefined}\r\n     *\r\n     * @example\r\n     * Hashing buffers from 'some ' and 'text\\n'\r\n     *\r\n     * ```js\r\n     * const buffer1 = Buffer.from('some ');\r\n     * crc32c.update(buffer1);\r\n     *\r\n     * const buffer2 = Buffer.from('text\\n');\r\n     * crc32c.update(buffer2);\r\n     *\r\n     * crc32c.toString(); // 'DkjKuA=='\r\n     * ```\r\n     **/\r\n    /**\r\n     * @typedef {object} CRC32CValidator\r\n     * @property {Crc32cGeneratorToStringCallback}\r\n     * @property {Crc32cGeneratorValidateCallback}\r\n     * @property {Crc32cGeneratorUpdateCallback}\r\n     */\r\n    /**\r\n     * @callback Crc32cGeneratorCallback\r\n     * @returns {CRC32CValidator}\r\n     */\r\n    /**\r\n     * @typedef {object} StorageOptions\r\n     * @property {string} [projectId] The project ID from the Google Developer's\r\n     *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\r\n     *     variable `GCLOUD_PROJECT` for your project ID. If your app is running\r\n     * in an environment which supports {@link\r\n     * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\r\n     * Application Default Credentials}, your project ID will be detected\r\n     * automatically.\r\n     * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\r\n     *     downloaded from the Google Developers Console. If you provide a path to\r\n     * a JSON file, the `projectId` option above is not necessary. NOTE: .pem and\r\n     *     .p12 require you to specify the `email` option as well.\r\n     * @property {string} [email] Account email address. Required when using a .pem\r\n     *     or .p12 keyFilename.\r\n     * @property {object} [credentials] Credentials object.\r\n     * @property {string} [credentials.client_email]\r\n     * @property {string} [credentials.private_key]\r\n     * @property {object} [retryOptions] Options for customizing retries. Retriable server errors\r\n     *     will be retried with exponential delay between them dictated by the formula\r\n     *     max(maxRetryDelay, retryDelayMultiplier*retryNumber) until maxRetries or totalTimeout\r\n     *     has been reached. Retries will only happen if autoRetry is set to true.\r\n     * @property {boolean} [retryOptions.autoRetry=true] Automatically retry requests if the\r\n     *     response is related to rate limits or certain intermittent server\r\n     * errors. We will exponentially backoff subsequent requests by default.\r\n     * @property {number} [retryOptions.retryDelayMultiplier = 2] the multiplier by which to\r\n     *   increase the delay time between the completion of failed requests, and the\r\n     *   initiation of the subsequent retrying request.\r\n     * @property {number} [retryOptions.totalTimeout = 600] The total time, starting from\r\n     *  when the initial request is sent, after which an error will\r\n     *   be returned, regardless of the retrying attempts made meanwhile.\r\n     * @property {number} [retryOptions.maxRetryDelay = 64] The maximum delay time between requests.\r\n     *   When this value is reached, ``retryDelayMultiplier`` will no longer be used to\r\n     *   increase delay time.\r\n     * @property {number} [retryOptions.maxRetries=3] Maximum number of automatic retries\r\n     *     attempted before returning the error.\r\n     * @property {function} [retryOptions.retryableErrorFn] Function that returns true if a given\r\n     *     error should be retried and false otherwise.\r\n     * @property {enum} [retryOptions.idempotencyStrategy=IdempotencyStrategy.RetryConditional] Enumeration\r\n     *     controls how conditionally idempotent operations are retried. Possible values are: RetryAlways -\r\n     *     will respect other retry settings and attempt to retry conditionally idempotent operations. RetryConditional -\r\n     *     will retry conditionally idempotent operations if the correct preconditions are set. RetryNever - never\r\n     *     retry a conditionally idempotent operation.\r\n     * @property {string} [userAgent] The value to be prepended to the User-Agent\r\n     *     header in API requests.\r\n     * @property {object} [authClient] `AuthClient` or `GoogleAuth` client to reuse instead of creating a new one.\r\n     * @property {number} [timeout] The amount of time in milliseconds to wait per http request before timing out.\r\n     * @property {object[]} [interceptors_] Array of custom request interceptors to be returned in the order they were assigned.\r\n     * @property {string} [apiEndpoint = storage.google.com] The API endpoint of the service used to make requests.\r\n     * @property {boolean} [useAuthWithCustomEndpoint = false] Controls whether or not to use authentication when using a custom endpoint.\r\n     * @property {Crc32cGeneratorCallback} [callback] A function that generates a CRC32C Validator. Defaults to {@link CRC32C}\r\n     */\r\n    /**\r\n     * Constructs the Storage client.\r\n     *\r\n     * @example\r\n     * Create a client that uses Application Default Credentials\r\n     * (ADC)\r\n     * ```\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * ```\r\n     *\r\n     * @example\r\n     * Create a client with explicit credentials\r\n     * ```\r\n     * const storage = new Storage({\r\n     *   projectId: 'your-project-id',\r\n     *   keyFilename: '/path/to/keyfile.json'\r\n     * });\r\n     * ```\r\n     *\r\n     * @example\r\n     * Create a client with credentials passed\r\n     * by value as a JavaScript object\r\n     * ```\r\n     * const storage = new Storage({\r\n     *   projectId: 'your-project-id',\r\n     *   credentials: {\r\n     *     type: 'service_account',\r\n     *     project_id: 'xxxxxxx',\r\n     *     private_key_id: 'xxxx',\r\n     *     private_key:'-----BEGIN PRIVATE KEY-----xxxxxxx\\n-----END PRIVATE KEY-----\\n',\r\n     *     client_email: 'xxxx',\r\n     *     client_id: 'xxx',\r\n     *     auth_uri: 'https://accounts.google.com/o/oauth2/auth',\r\n     *     token_uri: 'https://oauth2.googleapis.com/token',\r\n     *     auth_provider_x509_cert_url: 'https://www.googleapis.com/oauth2/v1/certs',\r\n     *     client_x509_cert_url: 'xxx',\r\n     *     }\r\n     * });\r\n     * ```\r\n     *\r\n     * @example\r\n     * Create a client with credentials passed\r\n     * by loading a JSON file directly from disk\r\n     * ```\r\n     * const storage = new Storage({\r\n     *   projectId: 'your-project-id',\r\n     *   credentials: require('/path/to-keyfile.json')\r\n     * });\r\n     * ```\r\n     *\r\n     * @example\r\n     * Create a client with an `AuthClient` (e.g. `DownscopedClient`)\r\n     * ```\r\n     * const {DownscopedClient} = require('google-auth-library');\r\n     * const authClient = new DownscopedClient({...});\r\n     *\r\n     * const storage = new Storage({authClient});\r\n     * ```\r\n     *\r\n     * Additional samples:\r\n     * - https://github.com/googleapis/google-auth-library-nodejs#sample-usage-1\r\n     * - https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/downscopedclient.js\r\n     *\r\n     * @param {StorageOptions} [options] Configuration options.\r\n     */\r\n    constructor(options = {}) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\r\n        const universe = options.universeDomain || google_auth_library_1.DEFAULT_UNIVERSE;\r\n        let apiEndpoint = `https://storage.${universe}`;\r\n        let customEndpoint = false;\r\n        // Note: EMULATOR_HOST is an experimental configuration variable. Use apiEndpoint instead.\r\n        const EMULATOR_HOST = process.env.STORAGE_EMULATOR_HOST;\r\n        if (typeof EMULATOR_HOST === 'string') {\r\n            apiEndpoint = Storage.sanitizeEndpoint(EMULATOR_HOST);\r\n            customEndpoint = true;\r\n        }\r\n        if (options.apiEndpoint && options.apiEndpoint !== apiEndpoint) {\r\n            apiEndpoint = Storage.sanitizeEndpoint(options.apiEndpoint);\r\n            customEndpoint = true;\r\n        }\r\n        options = Object.assign({}, options, { apiEndpoint });\r\n        // Note: EMULATOR_HOST is an experimental configuration variable. Use apiEndpoint instead.\r\n        const baseUrl = EMULATOR_HOST || `${options.apiEndpoint}/storage/v1`;\r\n        const config = {\r\n            apiEndpoint: options.apiEndpoint,\r\n            retryOptions: {\r\n                autoRetry: ((_a = options.retryOptions) === null || _a === void 0 ? void 0 : _a.autoRetry) !== undefined\r\n                    ? (_b = options.retryOptions) === null || _b === void 0 ? void 0 : _b.autoRetry\r\n                    : exports.AUTO_RETRY_DEFAULT,\r\n                maxRetries: ((_c = options.retryOptions) === null || _c === void 0 ? void 0 : _c.maxRetries)\r\n                    ? (_d = options.retryOptions) === null || _d === void 0 ? void 0 : _d.maxRetries\r\n                    : exports.MAX_RETRY_DEFAULT,\r\n                retryDelayMultiplier: ((_e = options.retryOptions) === null || _e === void 0 ? void 0 : _e.retryDelayMultiplier)\r\n                    ? (_f = options.retryOptions) === null || _f === void 0 ? void 0 : _f.retryDelayMultiplier\r\n                    : exports.RETRY_DELAY_MULTIPLIER_DEFAULT,\r\n                totalTimeout: ((_g = options.retryOptions) === null || _g === void 0 ? void 0 : _g.totalTimeout)\r\n                    ? (_h = options.retryOptions) === null || _h === void 0 ? void 0 : _h.totalTimeout\r\n                    : exports.TOTAL_TIMEOUT_DEFAULT,\r\n                maxRetryDelay: ((_j = options.retryOptions) === null || _j === void 0 ? void 0 : _j.maxRetryDelay)\r\n                    ? (_k = options.retryOptions) === null || _k === void 0 ? void 0 : _k.maxRetryDelay\r\n                    : exports.MAX_RETRY_DELAY_DEFAULT,\r\n                retryableErrorFn: ((_l = options.retryOptions) === null || _l === void 0 ? void 0 : _l.retryableErrorFn)\r\n                    ? (_m = options.retryOptions) === null || _m === void 0 ? void 0 : _m.retryableErrorFn\r\n                    : exports.RETRYABLE_ERR_FN_DEFAULT,\r\n                idempotencyStrategy: ((_o = options.retryOptions) === null || _o === void 0 ? void 0 : _o.idempotencyStrategy) !== undefined\r\n                    ? (_p = options.retryOptions) === null || _p === void 0 ? void 0 : _p.idempotencyStrategy\r\n                    : IDEMPOTENCY_STRATEGY_DEFAULT,\r\n            },\r\n            baseUrl,\r\n            customEndpoint,\r\n            useAuthWithCustomEndpoint: options === null || options === void 0 ? void 0 : options.useAuthWithCustomEndpoint,\r\n            projectIdRequired: false,\r\n            scopes: [\r\n                'https://www.googleapis.com/auth/iam',\r\n                'https://www.googleapis.com/auth/cloud-platform',\r\n                'https://www.googleapis.com/auth/devstorage.full_control',\r\n            ],\r\n            packageJson: (0, package_json_helper_cjs_1.getPackageJSON)(),\r\n        };\r\n        super(config, options);\r\n        /**\r\n         * Reference to {@link Storage.acl}.\r\n         *\r\n         * @name Storage#acl\r\n         * @see Storage.acl\r\n         */\r\n        this.acl = Storage.acl;\r\n        this.crc32cGenerator =\r\n            options.crc32cGenerator || crc32c_js_1.CRC32C_DEFAULT_VALIDATOR_GENERATOR;\r\n        this.retryOptions = config.retryOptions;\r\n        this.getBucketsStream = paginator_1.paginator.streamify('getBuckets');\r\n        this.getHmacKeysStream = paginator_1.paginator.streamify('getHmacKeys');\r\n    }\r\n    static sanitizeEndpoint(url) {\r\n        if (!exports.PROTOCOL_REGEX.test(url)) {\r\n            url = `https://${url}`;\r\n        }\r\n        return url.replace(/\\/+$/, ''); // Remove trailing slashes\r\n    }\r\n    /**\r\n     * Get a reference to a Cloud Storage bucket.\r\n     *\r\n     * @param {string} name Name of the bucket.\r\n     * @param {object} [options] Configuration object.\r\n     * @param {string} [options.kmsKeyName] A Cloud KMS key that will be used to\r\n     *     encrypt objects inserted into this bucket, if no encryption method is\r\n     *     specified.\r\n     * @param {string} [options.userProject] User project to be billed for all\r\n     *     requests made from this Bucket object.\r\n     * @returns {Bucket}\r\n     * @see Bucket\r\n     *\r\n     * @example\r\n     * ```\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const albums = storage.bucket('albums');\r\n     * const photos = storage.bucket('photos');\r\n     * ```\r\n     */\r\n    bucket(name, options) {\r\n        if (!name) {\r\n            throw new Error(StorageExceptionMessages.BUCKET_NAME_REQUIRED);\r\n        }\r\n        return new bucket_js_1.Bucket(this, name, options);\r\n    }\r\n    /**\r\n     * Reference a channel to receive notifications about changes to your bucket.\r\n     *\r\n     * @param {string} id The ID of the channel.\r\n     * @param {string} resourceId The resource ID of the channel.\r\n     * @returns {Channel}\r\n     * @see Channel\r\n     *\r\n     * @example\r\n     * ```\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const channel = storage.channel('id', 'resource-id');\r\n     * ```\r\n     */\r\n    channel(id, resourceId) {\r\n        return new channel_js_1.Channel(this, id, resourceId);\r\n    }\r\n    /**\r\n     * @typedef {array} CreateBucketResponse\r\n     * @property {Bucket} 0 The new {@link Bucket}.\r\n     * @property {object} 1 The full API response.\r\n     */\r\n    /**\r\n     * @callback CreateBucketCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {Bucket} bucket The new {@link Bucket}.\r\n     * @param {object} apiResponse The full API response.\r\n     */\r\n    /**\r\n     * Metadata to set for the bucket.\r\n     *\r\n     * @typedef {object} CreateBucketRequest\r\n     * @property {boolean} [archive=false] Specify the storage class as Archive.\r\n     * @property {object} [autoclass.enabled=false] Specify whether Autoclass is\r\n     *     enabled for the bucket.\r\n     * @property {object} [autoclass.terminalStorageClass='NEARLINE'] The storage class that objects in an Autoclass bucket eventually transition to if\r\n     *     they are not read for a certain length of time. Valid values are NEARLINE and ARCHIVE.\r\n     * @property {boolean} [coldline=false] Specify the storage class as Coldline.\r\n     * @property {Cors[]} [cors=[]] Specify the CORS configuration to use.\r\n     * @property {CustomPlacementConfig} [customPlacementConfig={}] Specify the bucket's regions for dual-region buckets.\r\n     *     For more information, see {@link https://cloud.google.com/storage/docs/locations| Bucket Locations}.\r\n     * @property {boolean} [dra=false] Specify the storage class as Durable Reduced\r\n     *     Availability.\r\n     * @property {boolean} [enableObjectRetention=false] Specifiy whether or not object retention should be enabled on this bucket.\r\n     * @property {object} [hierarchicalNamespace.enabled=false] Specify whether or not to enable hierarchical namespace on this bucket.\r\n     * @property {string} [location] Specify the bucket's location. If specifying\r\n     *     a dual-region, the `customPlacementConfig` property should be set in conjunction.\r\n     *     For more information, see {@link https://cloud.google.com/storage/docs/locations| Bucket Locations}.\r\n     * @property {boolean} [multiRegional=false] Specify the storage class as\r\n     *     Multi-Regional.\r\n     * @property {boolean} [nearline=false] Specify the storage class as Nearline.\r\n     * @property {boolean} [regional=false] Specify the storage class as Regional.\r\n     * @property {boolean} [requesterPays=false] Force the use of the User Project metadata field to assign operational\r\n     *     costs when an operation is made on a Bucket and its objects.\r\n     * @property {string} [rpo] For dual-region buckets, controls whether turbo\r\n     *      replication is enabled (`ASYNC_TURBO`) or disabled (`DEFAULT`).\r\n     * @property {boolean} [standard=true] Specify the storage class as Standard.\r\n     * @property {string} [storageClass] The new storage class. (`standard`,\r\n     *     `nearline`, `coldline`, or `archive`).\r\n     *     **Note:** The storage classes `multi_regional`, `regional`, and\r\n     *     `durable_reduced_availability` are now legacy and will be deprecated in\r\n     *     the future.\r\n     * @property {Versioning} [versioning=undefined] Specify the versioning status.\r\n     * @property {string} [userProject] The ID of the project which will be billed\r\n     *     for the request.\r\n     */\r\n    /**\r\n     * Create a bucket.\r\n     *\r\n     * Cloud Storage uses a flat namespace, so you can't create a bucket with\r\n     * a name that is already in use. For more information, see\r\n     * {@link https://cloud.google.com/storage/docs/bucketnaming.html#requirements| Bucket Naming Guidelines}.\r\n     *\r\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/insert| Buckets: insert API Documentation}\r\n     * See {@link https://cloud.google.com/storage/docs/storage-classes| Storage Classes}\r\n     *\r\n     * @param {string} name Name of the bucket to create.\r\n     * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\r\n     * @param {CreateBucketCallback} [callback] Callback function.\r\n     * @returns {Promise<CreateBucketResponse>}\r\n     * @throws {Error} If a name is not provided.\r\n     * @see Bucket#create\r\n     *\r\n     * @example\r\n     * ```\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const callback = function(err, bucket, apiResponse) {\r\n     *   // `bucket` is a Bucket object.\r\n     * };\r\n     *\r\n     * storage.createBucket('new-bucket', callback);\r\n     *\r\n     * //-\r\n     * // Create a bucket in a specific location and region. <em>See the <a\r\n     * // href=\"https://cloud.google.com/storage/docs/json_api/v1/buckets/insert\">\r\n     * // Official JSON API docs</a> for complete details on the `location`\r\n     * option.\r\n     * // </em>\r\n     * //-\r\n     * const metadata = {\r\n     *   location: 'US-CENTRAL1',\r\n     *   regional: true\r\n     * };\r\n     *\r\n     * storage.createBucket('new-bucket', metadata, callback);\r\n     *\r\n     * //-\r\n     * // Create a bucket with a retention policy of 6 months.\r\n     * //-\r\n     * const metadata = {\r\n     *   retentionPolicy: {\r\n     *     retentionPeriod: 15780000 // 6 months in seconds.\r\n     *   }\r\n     * };\r\n     *\r\n     * storage.createBucket('new-bucket', metadata, callback);\r\n     *\r\n     * //-\r\n     * // Enable versioning on a new bucket.\r\n     * //-\r\n     * const metadata = {\r\n     *   versioning: {\r\n     *     enabled: true\r\n     *   }\r\n     * };\r\n     *\r\n     * storage.createBucket('new-bucket', metadata, callback);\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * storage.createBucket('new-bucket').then(function(data) {\r\n     *   const bucket = data[0];\r\n     *   const apiResponse = data[1];\r\n     * });\r\n     *\r\n     * ```\r\n     * @example <caption>include:samples/buckets.js</caption>\r\n     * region_tag:storage_create_bucket\r\n     * Another example:\r\n     */\r\n    createBucket(name, metadataOrCallback, callback) {\r\n        if (!name) {\r\n            throw new Error(StorageExceptionMessages.BUCKET_NAME_REQUIRED_CREATE);\r\n        }\r\n        let metadata;\r\n        if (!callback) {\r\n            callback = metadataOrCallback;\r\n            metadata = {};\r\n        }\r\n        else {\r\n            metadata = metadataOrCallback;\r\n        }\r\n        const body = {\r\n            ...metadata,\r\n            name,\r\n        };\r\n        const storageClasses = {\r\n            archive: 'ARCHIVE',\r\n            coldline: 'COLDLINE',\r\n            dra: 'DURABLE_REDUCED_AVAILABILITY',\r\n            multiRegional: 'MULTI_REGIONAL',\r\n            nearline: 'NEARLINE',\r\n            regional: 'REGIONAL',\r\n            standard: 'STANDARD',\r\n        };\r\n        const storageClassKeys = Object.keys(storageClasses);\r\n        for (const storageClass of storageClassKeys) {\r\n            if (body[storageClass]) {\r\n                if (metadata.storageClass && metadata.storageClass !== storageClass) {\r\n                    throw new Error(`Both \\`${storageClass}\\` and \\`storageClass\\` were provided.`);\r\n                }\r\n                body.storageClass = storageClasses[storageClass];\r\n                delete body[storageClass];\r\n            }\r\n        }\r\n        if (body.requesterPays) {\r\n            body.billing = {\r\n                requesterPays: body.requesterPays,\r\n            };\r\n            delete body.requesterPays;\r\n        }\r\n        const query = {\r\n            project: this.projectId,\r\n        };\r\n        if (body.userProject) {\r\n            query.userProject = body.userProject;\r\n            delete body.userProject;\r\n        }\r\n        if (body.enableObjectRetention) {\r\n            query.enableObjectRetention = body.enableObjectRetention;\r\n            delete body.enableObjectRetention;\r\n        }\r\n        if (body.predefinedAcl) {\r\n            query.predefinedAcl = body.predefinedAcl;\r\n            delete body.predefinedAcl;\r\n        }\r\n        if (body.predefinedDefaultObjectAcl) {\r\n            query.predefinedDefaultObjectAcl = body.predefinedDefaultObjectAcl;\r\n            delete body.predefinedDefaultObjectAcl;\r\n        }\r\n        if (body.projection) {\r\n            query.projection = body.projection;\r\n            delete body.projection;\r\n        }\r\n        this.request({\r\n            method: 'POST',\r\n            uri: '/b',\r\n            qs: query,\r\n            json: body,\r\n        }, (err, resp) => {\r\n            if (err) {\r\n                callback(err, null, resp);\r\n                return;\r\n            }\r\n            const bucket = this.bucket(name);\r\n            bucket.metadata = resp;\r\n            callback(null, bucket, resp);\r\n        });\r\n    }\r\n    /**\r\n     * @typedef {object} CreateHmacKeyOptions\r\n     * @property {string} [projectId] The project ID of the project that owns\r\n     *     the service account of the requested HMAC key. If not provided,\r\n     *     the project ID used to instantiate the Storage client will be used.\r\n     * @property {string} [userProject] This parameter is currently ignored.\r\n     */\r\n    /**\r\n     * @typedef {object} HmacKeyMetadata\r\n     * @property {string} accessId The access id identifies which HMAC key was\r\n     *     used to sign a request when authenticating with HMAC.\r\n     * @property {string} etag Used to perform a read-modify-write of the key.\r\n     * @property {string} id The resource name of the HMAC key.\r\n     * @property {string} projectId The project ID.\r\n     * @property {string} serviceAccountEmail The service account's email this\r\n     *     HMAC key is created for.\r\n     * @property {string} state The state of this HMAC key. One of \"ACTIVE\",\r\n     *     \"INACTIVE\" or \"DELETED\".\r\n     * @property {string} timeCreated The creation time of the HMAC key in\r\n     *     RFC 3339 format.\r\n     * @property {string} [updated] The time this HMAC key was last updated in\r\n     *     RFC 3339 format.\r\n     */\r\n    /**\r\n     * @typedef {array} CreateHmacKeyResponse\r\n     * @property {HmacKey} 0 The HmacKey instance created from API response.\r\n     * @property {string} 1 The HMAC key's secret used to access the XML API.\r\n     * @property {object} 3 The raw API response.\r\n     */\r\n    /**\r\n     * @callback CreateHmacKeyCallback Callback function.\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {HmacKey} hmacKey The HmacKey instance created from API response.\r\n     * @param {string} secret The HMAC key's secret used to access the XML API.\r\n     * @param {object} apiResponse The raw API response.\r\n     */\r\n    /**\r\n     * Create an HMAC key associated with an service account to authenticate\r\n     * requests to the Cloud Storage XML API.\r\n     *\r\n     * See {@link https://cloud.google.com/storage/docs/authentication/hmackeys| HMAC keys documentation}\r\n     *\r\n     * @param {string} serviceAccountEmail The service account's email address\r\n     *     with which the HMAC key is created for.\r\n     * @param {CreateHmacKeyCallback} [callback] Callback function.\r\n     * @return {Promise<CreateHmacKeyResponse>}\r\n     *\r\n     * @example\r\n     * ```\r\n     * const {Storage} = require('google-cloud/storage');\r\n     * const storage = new Storage();\r\n     *\r\n     * // Replace with your service account's email address\r\n     * const serviceAccountEmail =\r\n     *   'my-service-account@appspot.gserviceaccount.com';\r\n     *\r\n     * storage.createHmacKey(serviceAccountEmail, function(err, hmacKey, secret) {\r\n     *   if (!err) {\r\n     *     // Securely store the secret for use with the XML API.\r\n     *   }\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * storage.createHmacKey(serviceAccountEmail)\r\n     *   .then((response) => {\r\n     *     const hmacKey = response[0];\r\n     *     const secret = response[1];\r\n     *     // Securely store the secret for use with the XML API.\r\n     *   });\r\n     * ```\r\n     */\r\n    createHmacKey(serviceAccountEmail, optionsOrCb, cb) {\r\n        if (typeof serviceAccountEmail !== 'string') {\r\n            throw new Error(StorageExceptionMessages.HMAC_SERVICE_ACCOUNT);\r\n        }\r\n        const { options, callback } = (0, util_js_1.normalize)(optionsOrCb, cb);\r\n        const query = Object.assign({}, options, { serviceAccountEmail });\r\n        const projectId = query.projectId || this.projectId;\r\n        delete query.projectId;\r\n        this.request({\r\n            method: 'POST',\r\n            uri: `/projects/${projectId}/hmacKeys`,\r\n            qs: query,\r\n            maxRetries: 0, //explicitly set this value since this is a non-idempotent function\r\n        }, (err, resp) => {\r\n            if (err) {\r\n                callback(err, null, null, resp);\r\n                return;\r\n            }\r\n            const metadata = resp.metadata;\r\n            const hmacKey = this.hmacKey(metadata.accessId, {\r\n                projectId: metadata.projectId,\r\n            });\r\n            hmacKey.metadata = resp.metadata;\r\n            callback(null, hmacKey, resp.secret, resp);\r\n        });\r\n    }\r\n    /**\r\n     * Query object for listing buckets.\r\n     *\r\n     * @typedef {object} GetBucketsRequest\r\n     * @property {boolean} [autoPaginate=true] Have pagination handled\r\n     *     automatically.\r\n     * @property {number} [maxApiCalls] Maximum number of API calls to make.\r\n     * @property {number} [maxResults] Maximum number of items plus prefixes to\r\n     *     return per call.\r\n     *     Note: By default will handle pagination automatically\r\n     *     if more than 1 page worth of results are requested per call.\r\n     *     When `autoPaginate` is set to `false` the smaller of `maxResults`\r\n     *     or 1 page of results will be returned per call.\r\n     * @property {string} [pageToken] A previously-returned page token\r\n     *     representing part of the larger set of results to view.\r\n     * @property {string} [userProject] The ID of the project which will be billed\r\n     *     for the request.\r\n     */\r\n    /**\r\n     * @typedef {array} GetBucketsResponse\r\n     * @property {Bucket[]} 0 Array of {@link Bucket} instances.\r\n     * @property {object} 1 nextQuery A query object to receive more results.\r\n     * @property {object} 2 The full API response.\r\n     */\r\n    /**\r\n     * @callback GetBucketsCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {Bucket[]} buckets Array of {@link Bucket} instances.\r\n     * @param {object} nextQuery A query object to receive more results.\r\n     * @param {object} apiResponse The full API response.\r\n     */\r\n    /**\r\n     * Get Bucket objects for all of the buckets in your project.\r\n     *\r\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/list| Buckets: list API Documentation}\r\n     *\r\n     * @param {GetBucketsRequest} [query] Query object for listing buckets.\r\n     * @param {GetBucketsCallback} [callback] Callback function.\r\n     * @returns {Promise<GetBucketsResponse>}\r\n     *\r\n     * @example\r\n     * ```\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * storage.getBuckets(function(err, buckets) {\r\n     *   if (!err) {\r\n     *     // buckets is an array of Bucket objects.\r\n     *   }\r\n     * });\r\n     *\r\n     * //-\r\n     * // To control how many API requests are made and page through the results\r\n     * // manually, set `autoPaginate` to `false`.\r\n     * //-\r\n     * const callback = function(err, buckets, nextQuery, apiResponse) {\r\n     *   if (nextQuery) {\r\n     *     // More results exist.\r\n     *     storage.getBuckets(nextQuery, callback);\r\n     *   }\r\n     *\r\n     *   // The `metadata` property is populated for you with the metadata at the\r\n     *   // time of fetching.\r\n     *   buckets[0].metadata;\r\n     *\r\n     *   // However, in cases where you are concerned the metadata could have\r\n     *   // changed, use the `getMetadata` method.\r\n     *   buckets[0].getMetadata(function(err, metadata, apiResponse) {});\r\n     * };\r\n     *\r\n     * storage.getBuckets({\r\n     *   autoPaginate: false\r\n     * }, callback);\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * storage.getBuckets().then(function(data) {\r\n     *   const buckets = data[0];\r\n     * });\r\n     *\r\n     * ```\r\n     * @example <caption>include:samples/buckets.js</caption>\r\n     * region_tag:storage_list_buckets\r\n     * Another example:\r\n     */\r\n    getBuckets(optionsOrCallback, cb) {\r\n        const { options, callback } = (0, util_js_1.normalize)(optionsOrCallback, cb);\r\n        options.project = options.project || this.projectId;\r\n        this.request({\r\n            uri: '/b',\r\n            qs: options,\r\n        }, (err, resp) => {\r\n            if (err) {\r\n                callback(err, null, null, resp);\r\n                return;\r\n            }\r\n            const itemsArray = resp.items ? resp.items : [];\r\n            const buckets = itemsArray.map((bucket) => {\r\n                const bucketInstance = this.bucket(bucket.id);\r\n                bucketInstance.metadata = bucket;\r\n                return bucketInstance;\r\n            });\r\n            const nextQuery = resp.nextPageToken\r\n                ? Object.assign({}, options, { pageToken: resp.nextPageToken })\r\n                : null;\r\n            callback(null, buckets, nextQuery, resp);\r\n        });\r\n    }\r\n    getHmacKeys(optionsOrCb, cb) {\r\n        const { options, callback } = (0, util_js_1.normalize)(optionsOrCb, cb);\r\n        const query = Object.assign({}, options);\r\n        const projectId = query.projectId || this.projectId;\r\n        delete query.projectId;\r\n        this.request({\r\n            uri: `/projects/${projectId}/hmacKeys`,\r\n            qs: query,\r\n        }, (err, resp) => {\r\n            if (err) {\r\n                callback(err, null, null, resp);\r\n                return;\r\n            }\r\n            const itemsArray = resp.items ? resp.items : [];\r\n            const hmacKeys = itemsArray.map((hmacKey) => {\r\n                const hmacKeyInstance = this.hmacKey(hmacKey.accessId, {\r\n                    projectId: hmacKey.projectId,\r\n                });\r\n                hmacKeyInstance.metadata = hmacKey;\r\n                return hmacKeyInstance;\r\n            });\r\n            const nextQuery = resp.nextPageToken\r\n                ? Object.assign({}, options, { pageToken: resp.nextPageToken })\r\n                : null;\r\n            callback(null, hmacKeys, nextQuery, resp);\r\n        });\r\n    }\r\n    /**\r\n     * @typedef {array} GetServiceAccountResponse\r\n     * @property {object} 0 The service account resource.\r\n     * @property {object} 1 The full\r\n     * {@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource| API response}.\r\n     */\r\n    /**\r\n     * @callback GetServiceAccountCallback\r\n     * @param {?Error} err Request error, if any.\r\n     * @param {object} serviceAccount The serviceAccount resource.\r\n     * @param {string} serviceAccount.emailAddress The service account email\r\n     *     address.\r\n     * @param {object} apiResponse The full\r\n     * {@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource| API response}.\r\n     */\r\n    /**\r\n     * Get the email address of this project's Google Cloud Storage service\r\n     * account.\r\n     *\r\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get| Projects.serviceAccount: get API Documentation}\r\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource| Projects.serviceAccount Resource}\r\n     *\r\n     * @param {object} [options] Configuration object.\r\n     * @param {string} [options.userProject] User project to be billed for this\r\n     *     request.\r\n     * @param {GetServiceAccountCallback} [callback] Callback function.\r\n     * @returns {Promise<GetServiceAccountResponse>}\r\n     *\r\n     * @example\r\n     * ```\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     *\r\n     * storage.getServiceAccount(function(err, serviceAccount, apiResponse) {\r\n     *   if (!err) {\r\n     *     const serviceAccountEmail = serviceAccount.emailAddress;\r\n     *   }\r\n     * });\r\n     *\r\n     * //-\r\n     * // If the callback is omitted, we'll return a Promise.\r\n     * //-\r\n     * storage.getServiceAccount().then(function(data) {\r\n     *   const serviceAccountEmail = data[0].emailAddress;\r\n     *   const apiResponse = data[1];\r\n     * });\r\n     * ```\r\n     */\r\n    getServiceAccount(optionsOrCallback, cb) {\r\n        const { options, callback } = (0, util_js_1.normalize)(optionsOrCallback, cb);\r\n        this.request({\r\n            uri: `/projects/${this.projectId}/serviceAccount`,\r\n            qs: options,\r\n        }, (err, resp) => {\r\n            if (err) {\r\n                callback(err, null, resp);\r\n                return;\r\n            }\r\n            const camelCaseResponse = {};\r\n            for (const prop in resp) {\r\n                // eslint-disable-next-line no-prototype-builtins\r\n                if (resp.hasOwnProperty(prop)) {\r\n                    const camelCaseProp = prop.replace(/_(\\w)/g, (_, match) => match.toUpperCase());\r\n                    camelCaseResponse[camelCaseProp] = resp[prop];\r\n                }\r\n            }\r\n            callback(null, camelCaseResponse, resp);\r\n        });\r\n    }\r\n    /**\r\n     * Get a reference to an HmacKey object.\r\n     * Note: this does not fetch the HMAC key's metadata. Use HmacKey#get() to\r\n     * retrieve and populate the metadata.\r\n     *\r\n     * To get a reference to an HMAC key that's not created for a service\r\n     * account in the same project used to instantiate the Storage client,\r\n     * supply the project's ID as `projectId` in the `options` argument.\r\n     *\r\n     * @param {string} accessId The HMAC key's access ID.\r\n     * @param {HmacKeyOptions} options HmacKey constructor options.\r\n     * @returns {HmacKey}\r\n     * @see HmacKey\r\n     *\r\n     * @example\r\n     * ```\r\n     * const {Storage} = require('@google-cloud/storage');\r\n     * const storage = new Storage();\r\n     * const hmacKey = storage.hmacKey('ACCESS_ID');\r\n     * ```\r\n     */\r\n    hmacKey(accessId, options) {\r\n        if (!accessId) {\r\n            throw new Error(StorageExceptionMessages.HMAC_ACCESS_ID);\r\n        }\r\n        return new hmacKey_js_1.HmacKey(this, accessId, options);\r\n    }\r\n}\r\nexports.Storage = Storage;\r\n/**\r\n * {@link Bucket} class.\r\n *\r\n * @name Storage.Bucket\r\n * @see Bucket\r\n * @type {Constructor}\r\n */\r\nStorage.Bucket = bucket_js_1.Bucket;\r\n/**\r\n * {@link Channel} class.\r\n *\r\n * @name Storage.Channel\r\n * @see Channel\r\n * @type {Constructor}\r\n */\r\nStorage.Channel = channel_js_1.Channel;\r\n/**\r\n * {@link File} class.\r\n *\r\n * @name Storage.File\r\n * @see File\r\n * @type {Constructor}\r\n */\r\nStorage.File = file_js_1.File;\r\n/**\r\n * {@link HmacKey} class.\r\n *\r\n * @name Storage.HmacKey\r\n * @see HmacKey\r\n * @type {Constructor}\r\n */\r\nStorage.HmacKey = hmacKey_js_1.HmacKey;\r\nStorage.acl = {\r\n    OWNER_ROLE: 'OWNER',\r\n    READER_ROLE: 'READER',\r\n    WRITER_ROLE: 'WRITER',\r\n};\r\n/*! Developer Documentation\r\n *\r\n * These methods can be auto-paginated.\r\n */\r\npaginator_1.paginator.extend(Storage, ['getBuckets', 'getHmacKeys']);\r\n/*! Developer Documentation\r\n *\r\n * All async methods (except for streams) will return a Promise in the event\r\n * that a callback is omitted.\r\n */\r\n(0, promisify_1.promisifyAll)(Storage, {\r\n    exclude: ['bucket', 'channel', 'hmacKey'],\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}