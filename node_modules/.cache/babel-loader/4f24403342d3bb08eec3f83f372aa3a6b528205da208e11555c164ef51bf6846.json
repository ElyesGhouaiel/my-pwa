{"ast":null,"code":"\"use strict\";\n\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamingApiCaller = void 0;\nconst warnings_1 = require(\"../warnings\");\nconst streaming_1 = require(\"./streaming\");\nclass StreamingApiCaller {\n  /**\r\n   * An API caller for methods of gRPC streaming.\r\n   * @private\r\n   * @constructor\r\n   * @param {StreamDescriptor} descriptor - the descriptor of the method structure.\r\n   */\n  constructor(descriptor) {\n    this.descriptor = descriptor;\n  }\n  init(callback) {\n    return new streaming_1.StreamProxy(this.descriptor.type, callback, this.descriptor.rest, this.descriptor.gaxStreamingRetries);\n  }\n  wrap(func) {\n    switch (this.descriptor.type) {\n      case streaming_1.StreamType.SERVER_STREAMING:\n        return (argument, metadata, options) => {\n          return func(argument, metadata, options);\n        };\n      case streaming_1.StreamType.CLIENT_STREAMING:\n        return (argument, metadata, options, callback) => {\n          return func(metadata, options, callback);\n        };\n      case streaming_1.StreamType.BIDI_STREAMING:\n        return (argument, metadata, options) => {\n          return func(metadata, options);\n        };\n      default:\n        (0, warnings_1.warn)('streaming_wrap_unknown_stream_type', `Unknown stream type: ${this.descriptor.type}`);\n    }\n    return func;\n  }\n  call(apiCall, argument, settings, stream) {\n    stream.setStream(apiCall, argument, settings.retryRequestOptions, settings.retry);\n  }\n  fail(stream, err) {\n    stream.emit('error', err);\n  }\n  result(stream) {\n    return stream;\n  }\n}\nexports.StreamingApiCaller = StreamingApiCaller;","map":{"version":3,"names":["Object","defineProperty","exports","value","StreamingApiCaller","warnings_1","require","streaming_1","constructor","descriptor","init","callback","StreamProxy","type","rest","gaxStreamingRetries","wrap","func","StreamType","SERVER_STREAMING","argument","metadata","options","CLIENT_STREAMING","BIDI_STREAMING","warn","call","apiCall","settings","stream","setStream","retryRequestOptions","retry","fail","err","emit","result"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js"],"sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StreamingApiCaller = void 0;\r\nconst warnings_1 = require(\"../warnings\");\r\nconst streaming_1 = require(\"./streaming\");\r\nclass StreamingApiCaller {\r\n    /**\r\n     * An API caller for methods of gRPC streaming.\r\n     * @private\r\n     * @constructor\r\n     * @param {StreamDescriptor} descriptor - the descriptor of the method structure.\r\n     */\r\n    constructor(descriptor) {\r\n        this.descriptor = descriptor;\r\n    }\r\n    init(callback) {\r\n        return new streaming_1.StreamProxy(this.descriptor.type, callback, this.descriptor.rest, this.descriptor.gaxStreamingRetries);\r\n    }\r\n    wrap(func) {\r\n        switch (this.descriptor.type) {\r\n            case streaming_1.StreamType.SERVER_STREAMING:\r\n                return (argument, metadata, options) => {\r\n                    return func(argument, metadata, options);\r\n                };\r\n            case streaming_1.StreamType.CLIENT_STREAMING:\r\n                return (argument, metadata, options, callback) => {\r\n                    return func(metadata, options, callback);\r\n                };\r\n            case streaming_1.StreamType.BIDI_STREAMING:\r\n                return (argument, metadata, options) => {\r\n                    return func(metadata, options);\r\n                };\r\n            default:\r\n                (0, warnings_1.warn)('streaming_wrap_unknown_stream_type', `Unknown stream type: ${this.descriptor.type}`);\r\n        }\r\n        return func;\r\n    }\r\n    call(apiCall, argument, settings, stream) {\r\n        stream.setStream(apiCall, argument, settings.retryRequestOptions, settings.retry);\r\n    }\r\n    fail(stream, err) {\r\n        stream.emit('error', err);\r\n    }\r\n    result(stream) {\r\n        return stream;\r\n    }\r\n}\r\nexports.StreamingApiCaller = StreamingApiCaller;\r\n//# sourceMappingURL=streamingApiCaller.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAG,KAAK,CAAC;AACnC,MAAMC,UAAU,GAAGC,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAMF,kBAAkB,CAAC;EACrB;AACJ;AACA;AACA;AACA;AACA;EACII,WAAWA,CAACC,UAAU,EAAE;IACpB,IAAI,CAACA,UAAU,GAAGA,UAAU;EAChC;EACAC,IAAIA,CAACC,QAAQ,EAAE;IACX,OAAO,IAAIJ,WAAW,CAACK,WAAW,CAAC,IAAI,CAACH,UAAU,CAACI,IAAI,EAAEF,QAAQ,EAAE,IAAI,CAACF,UAAU,CAACK,IAAI,EAAE,IAAI,CAACL,UAAU,CAACM,mBAAmB,CAAC;EACjI;EACAC,IAAIA,CAACC,IAAI,EAAE;IACP,QAAQ,IAAI,CAACR,UAAU,CAACI,IAAI;MACxB,KAAKN,WAAW,CAACW,UAAU,CAACC,gBAAgB;QACxC,OAAO,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,KAAK;UACpC,OAAOL,IAAI,CAACG,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,CAAC;QAC5C,CAAC;MACL,KAAKf,WAAW,CAACW,UAAU,CAACK,gBAAgB;QACxC,OAAO,CAACH,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,EAAEX,QAAQ,KAAK;UAC9C,OAAOM,IAAI,CAACI,QAAQ,EAAEC,OAAO,EAAEX,QAAQ,CAAC;QAC5C,CAAC;MACL,KAAKJ,WAAW,CAACW,UAAU,CAACM,cAAc;QACtC,OAAO,CAACJ,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,KAAK;UACpC,OAAOL,IAAI,CAACI,QAAQ,EAAEC,OAAO,CAAC;QAClC,CAAC;MACL;QACI,CAAC,CAAC,EAAEjB,UAAU,CAACoB,IAAI,EAAE,oCAAoC,EAAE,wBAAwB,IAAI,CAAChB,UAAU,CAACI,IAAI,EAAE,CAAC;IAClH;IACA,OAAOI,IAAI;EACf;EACAS,IAAIA,CAACC,OAAO,EAAEP,QAAQ,EAAEQ,QAAQ,EAAEC,MAAM,EAAE;IACtCA,MAAM,CAACC,SAAS,CAACH,OAAO,EAAEP,QAAQ,EAAEQ,QAAQ,CAACG,mBAAmB,EAAEH,QAAQ,CAACI,KAAK,CAAC;EACrF;EACAC,IAAIA,CAACJ,MAAM,EAAEK,GAAG,EAAE;IACdL,MAAM,CAACM,IAAI,CAAC,OAAO,EAAED,GAAG,CAAC;EAC7B;EACAE,MAAMA,CAACP,MAAM,EAAE;IACX,OAAOA,MAAM;EACjB;AACJ;AACA3B,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}