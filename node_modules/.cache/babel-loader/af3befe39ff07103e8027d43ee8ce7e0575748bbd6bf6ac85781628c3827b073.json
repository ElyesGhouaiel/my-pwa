{"ast":null,"code":"\"use strict\";\n\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LongRunningDescriptor = void 0;\nconst longRunningApiCaller_1 = require(\"./longRunningApiCaller\");\n/**\r\n * A descriptor for long-running operations.\r\n */\nclass LongRunningDescriptor {\n  constructor(operationsClient, responseDecoder, metadataDecoder) {\n    this.operationsClient = operationsClient;\n    this.responseDecoder = responseDecoder;\n    this.metadataDecoder = metadataDecoder;\n  }\n  getApiCaller() {\n    return new longRunningApiCaller_1.LongrunningApiCaller(this);\n  }\n}\nexports.LongRunningDescriptor = LongRunningDescriptor;","map":{"version":3,"names":["Object","defineProperty","exports","value","LongRunningDescriptor","longRunningApiCaller_1","require","constructor","operationsClient","responseDecoder","metadataDecoder","getApiCaller","LongrunningApiCaller"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js"],"sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LongRunningDescriptor = void 0;\r\nconst longRunningApiCaller_1 = require(\"./longRunningApiCaller\");\r\n/**\r\n * A descriptor for long-running operations.\r\n */\r\nclass LongRunningDescriptor {\r\n    constructor(operationsClient, responseDecoder, metadataDecoder) {\r\n        this.operationsClient = operationsClient;\r\n        this.responseDecoder = responseDecoder;\r\n        this.metadataDecoder = metadataDecoder;\r\n    }\r\n    getApiCaller() {\r\n        return new longRunningApiCaller_1.LongrunningApiCaller(this);\r\n    }\r\n}\r\nexports.LongRunningDescriptor = LongRunningDescriptor;\r\n//# sourceMappingURL=longRunningDescriptor.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,qBAAqB,GAAG,KAAK,CAAC;AACtC,MAAMC,sBAAsB,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAChE;AACA;AACA;AACA,MAAMF,qBAAqB,CAAC;EACxBG,WAAWA,CAACC,gBAAgB,EAAEC,eAAe,EAAEC,eAAe,EAAE;IAC5D,IAAI,CAACF,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACC,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,eAAe,GAAGA,eAAe;EAC1C;EACAC,YAAYA,CAAA,EAAG;IACX,OAAO,IAAIN,sBAAsB,CAACO,oBAAoB,CAAC,IAAI,CAAC;EAChE;AACJ;AACAV,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}