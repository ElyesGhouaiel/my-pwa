{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OAuthClientAuthHandler = void 0;\nexports.getErrorFromOAuthErrorResponse = getErrorFromOAuthErrorResponse;\nconst querystring = require(\"querystring\");\nconst crypto_1 = require(\"../crypto/crypto\");\n/** List of HTTP methods that accept request bodies. */\nconst METHODS_SUPPORTING_REQUEST_BODY = ['PUT', 'POST', 'PATCH'];\n/**\r\n * Abstract class for handling client authentication in OAuth-based\r\n * operations.\r\n * When request-body client authentication is used, only application/json and\r\n * application/x-www-form-urlencoded content types for HTTP methods that support\r\n * request bodies are supported.\r\n */\nclass OAuthClientAuthHandler {\n  /**\r\n   * Instantiates an OAuth client authentication handler.\r\n   * @param clientAuthentication The client auth credentials.\r\n   */\n  constructor(clientAuthentication) {\n    this.clientAuthentication = clientAuthentication;\n    this.crypto = (0, crypto_1.createCrypto)();\n  }\n  /**\r\n   * Applies client authentication on the OAuth request's headers or POST\r\n   * body but does not process the request.\r\n   * @param opts The GaxiosOptions whose headers or data are to be modified\r\n   *   depending on the client authentication mechanism to be used.\r\n   * @param bearerToken The optional bearer token to use for authentication.\r\n   *   When this is used, no client authentication credentials are needed.\r\n   */\n  applyClientAuthenticationOptions(opts, bearerToken) {\n    // Inject authenticated header.\n    this.injectAuthenticatedHeaders(opts, bearerToken);\n    // Inject authenticated request body.\n    if (!bearerToken) {\n      this.injectAuthenticatedRequestBody(opts);\n    }\n  }\n  /**\r\n   * Applies client authentication on the request's header if either\r\n   * basic authentication or bearer token authentication is selected.\r\n   *\r\n   * @param opts The GaxiosOptions whose headers or data are to be modified\r\n   *   depending on the client authentication mechanism to be used.\r\n   * @param bearerToken The optional bearer token to use for authentication.\r\n   *   When this is used, no client authentication credentials are needed.\r\n   */\n  injectAuthenticatedHeaders(opts, bearerToken) {\n    var _a;\n    // Bearer token prioritized higher than basic Auth.\n    if (bearerToken) {\n      opts.headers = opts.headers || {};\n      Object.assign(opts.headers, {\n        Authorization: `Bearer ${bearerToken}}`\n      });\n    } else if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === 'basic') {\n      opts.headers = opts.headers || {};\n      const clientId = this.clientAuthentication.clientId;\n      const clientSecret = this.clientAuthentication.clientSecret || '';\n      const base64EncodedCreds = this.crypto.encodeBase64StringUtf8(`${clientId}:${clientSecret}`);\n      Object.assign(opts.headers, {\n        Authorization: `Basic ${base64EncodedCreds}`\n      });\n    }\n  }\n  /**\r\n   * Applies client authentication on the request's body if request-body\r\n   * client authentication is selected.\r\n   *\r\n   * @param opts The GaxiosOptions whose headers or data are to be modified\r\n   *   depending on the client authentication mechanism to be used.\r\n   */\n  injectAuthenticatedRequestBody(opts) {\n    var _a;\n    if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === 'request-body') {\n      const method = (opts.method || 'GET').toUpperCase();\n      // Inject authenticated request body.\n      if (METHODS_SUPPORTING_REQUEST_BODY.indexOf(method) !== -1) {\n        // Get content-type.\n        let contentType;\n        const headers = opts.headers || {};\n        for (const key in headers) {\n          if (key.toLowerCase() === 'content-type' && headers[key]) {\n            contentType = headers[key].toLowerCase();\n            break;\n          }\n        }\n        if (contentType === 'application/x-www-form-urlencoded') {\n          opts.data = opts.data || '';\n          const data = querystring.parse(opts.data);\n          Object.assign(data, {\n            client_id: this.clientAuthentication.clientId,\n            client_secret: this.clientAuthentication.clientSecret || ''\n          });\n          opts.data = querystring.stringify(data);\n        } else if (contentType === 'application/json') {\n          opts.data = opts.data || {};\n          Object.assign(opts.data, {\n            client_id: this.clientAuthentication.clientId,\n            client_secret: this.clientAuthentication.clientSecret || ''\n          });\n        } else {\n          throw new Error(`${contentType} content-types are not supported with ` + `${this.clientAuthentication.confidentialClientType} ` + 'client authentication');\n        }\n      } else {\n        throw new Error(`${method} HTTP method does not support ` + `${this.clientAuthentication.confidentialClientType} ` + 'client authentication');\n      }\n    }\n  }\n  /**\r\n   * Retry config for Auth-related requests.\r\n   *\r\n   * @remarks\r\n   *\r\n   * This is not a part of the default {@link AuthClient.transporter transporter/gaxios}\r\n   * config as some downstream APIs would prefer if customers explicitly enable retries,\r\n   * such as GCS.\r\n   */\n  static get RETRY_CONFIG() {\n    return {\n      retry: true,\n      retryConfig: {\n        httpMethodsToRetry: ['GET', 'PUT', 'POST', 'HEAD', 'OPTIONS', 'DELETE']\n      }\n    };\n  }\n}\nexports.OAuthClientAuthHandler = OAuthClientAuthHandler;\n/**\r\n * Converts an OAuth error response to a native JavaScript Error.\r\n * @param resp The OAuth error response to convert to a native Error object.\r\n * @param err The optional original error. If provided, the error properties\r\n *   will be copied to the new error.\r\n * @return The converted native Error object.\r\n */\nfunction getErrorFromOAuthErrorResponse(resp, err) {\n  // Error response.\n  const errorCode = resp.error;\n  const errorDescription = resp.error_description;\n  const errorUri = resp.error_uri;\n  let message = `Error code ${errorCode}`;\n  if (typeof errorDescription !== 'undefined') {\n    message += `: ${errorDescription}`;\n  }\n  if (typeof errorUri !== 'undefined') {\n    message += ` - ${errorUri}`;\n  }\n  const newError = new Error(message);\n  // Copy properties from original error to newly generated error.\n  if (err) {\n    const keys = Object.keys(err);\n    if (err.stack) {\n      // Copy error.stack if available.\n      keys.push('stack');\n    }\n    keys.forEach(key => {\n      // Do not overwrite the message field.\n      if (key !== 'message') {\n        Object.defineProperty(newError, key, {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          value: err[key],\n          writable: false,\n          enumerable: true\n        });\n      }\n    });\n  }\n  return newError;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","OAuthClientAuthHandler","getErrorFromOAuthErrorResponse","querystring","require","crypto_1","METHODS_SUPPORTING_REQUEST_BODY","constructor","clientAuthentication","crypto","createCrypto","applyClientAuthenticationOptions","opts","bearerToken","injectAuthenticatedHeaders","injectAuthenticatedRequestBody","_a","headers","assign","Authorization","confidentialClientType","clientId","clientSecret","base64EncodedCreds","encodeBase64StringUtf8","method","toUpperCase","indexOf","contentType","key","toLowerCase","data","parse","client_id","client_secret","stringify","Error","RETRY_CONFIG","retry","retryConfig","httpMethodsToRetry","resp","err","errorCode","error","errorDescription","error_description","errorUri","error_uri","message","newError","keys","stack","push","forEach","writable","enumerable"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/google-auth-library/build/src/auth/oauth2common.js"],"sourcesContent":["\"use strict\";\r\n// Copyright 2021 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.OAuthClientAuthHandler = void 0;\r\nexports.getErrorFromOAuthErrorResponse = getErrorFromOAuthErrorResponse;\r\nconst querystring = require(\"querystring\");\r\nconst crypto_1 = require(\"../crypto/crypto\");\r\n/** List of HTTP methods that accept request bodies. */\r\nconst METHODS_SUPPORTING_REQUEST_BODY = ['PUT', 'POST', 'PATCH'];\r\n/**\r\n * Abstract class for handling client authentication in OAuth-based\r\n * operations.\r\n * When request-body client authentication is used, only application/json and\r\n * application/x-www-form-urlencoded content types for HTTP methods that support\r\n * request bodies are supported.\r\n */\r\nclass OAuthClientAuthHandler {\r\n    /**\r\n     * Instantiates an OAuth client authentication handler.\r\n     * @param clientAuthentication The client auth credentials.\r\n     */\r\n    constructor(clientAuthentication) {\r\n        this.clientAuthentication = clientAuthentication;\r\n        this.crypto = (0, crypto_1.createCrypto)();\r\n    }\r\n    /**\r\n     * Applies client authentication on the OAuth request's headers or POST\r\n     * body but does not process the request.\r\n     * @param opts The GaxiosOptions whose headers or data are to be modified\r\n     *   depending on the client authentication mechanism to be used.\r\n     * @param bearerToken The optional bearer token to use for authentication.\r\n     *   When this is used, no client authentication credentials are needed.\r\n     */\r\n    applyClientAuthenticationOptions(opts, bearerToken) {\r\n        // Inject authenticated header.\r\n        this.injectAuthenticatedHeaders(opts, bearerToken);\r\n        // Inject authenticated request body.\r\n        if (!bearerToken) {\r\n            this.injectAuthenticatedRequestBody(opts);\r\n        }\r\n    }\r\n    /**\r\n     * Applies client authentication on the request's header if either\r\n     * basic authentication or bearer token authentication is selected.\r\n     *\r\n     * @param opts The GaxiosOptions whose headers or data are to be modified\r\n     *   depending on the client authentication mechanism to be used.\r\n     * @param bearerToken The optional bearer token to use for authentication.\r\n     *   When this is used, no client authentication credentials are needed.\r\n     */\r\n    injectAuthenticatedHeaders(opts, bearerToken) {\r\n        var _a;\r\n        // Bearer token prioritized higher than basic Auth.\r\n        if (bearerToken) {\r\n            opts.headers = opts.headers || {};\r\n            Object.assign(opts.headers, {\r\n                Authorization: `Bearer ${bearerToken}}`,\r\n            });\r\n        }\r\n        else if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === 'basic') {\r\n            opts.headers = opts.headers || {};\r\n            const clientId = this.clientAuthentication.clientId;\r\n            const clientSecret = this.clientAuthentication.clientSecret || '';\r\n            const base64EncodedCreds = this.crypto.encodeBase64StringUtf8(`${clientId}:${clientSecret}`);\r\n            Object.assign(opts.headers, {\r\n                Authorization: `Basic ${base64EncodedCreds}`,\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Applies client authentication on the request's body if request-body\r\n     * client authentication is selected.\r\n     *\r\n     * @param opts The GaxiosOptions whose headers or data are to be modified\r\n     *   depending on the client authentication mechanism to be used.\r\n     */\r\n    injectAuthenticatedRequestBody(opts) {\r\n        var _a;\r\n        if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === 'request-body') {\r\n            const method = (opts.method || 'GET').toUpperCase();\r\n            // Inject authenticated request body.\r\n            if (METHODS_SUPPORTING_REQUEST_BODY.indexOf(method) !== -1) {\r\n                // Get content-type.\r\n                let contentType;\r\n                const headers = opts.headers || {};\r\n                for (const key in headers) {\r\n                    if (key.toLowerCase() === 'content-type' && headers[key]) {\r\n                        contentType = headers[key].toLowerCase();\r\n                        break;\r\n                    }\r\n                }\r\n                if (contentType === 'application/x-www-form-urlencoded') {\r\n                    opts.data = opts.data || '';\r\n                    const data = querystring.parse(opts.data);\r\n                    Object.assign(data, {\r\n                        client_id: this.clientAuthentication.clientId,\r\n                        client_secret: this.clientAuthentication.clientSecret || '',\r\n                    });\r\n                    opts.data = querystring.stringify(data);\r\n                }\r\n                else if (contentType === 'application/json') {\r\n                    opts.data = opts.data || {};\r\n                    Object.assign(opts.data, {\r\n                        client_id: this.clientAuthentication.clientId,\r\n                        client_secret: this.clientAuthentication.clientSecret || '',\r\n                    });\r\n                }\r\n                else {\r\n                    throw new Error(`${contentType} content-types are not supported with ` +\r\n                        `${this.clientAuthentication.confidentialClientType} ` +\r\n                        'client authentication');\r\n                }\r\n            }\r\n            else {\r\n                throw new Error(`${method} HTTP method does not support ` +\r\n                    `${this.clientAuthentication.confidentialClientType} ` +\r\n                    'client authentication');\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Retry config for Auth-related requests.\r\n     *\r\n     * @remarks\r\n     *\r\n     * This is not a part of the default {@link AuthClient.transporter transporter/gaxios}\r\n     * config as some downstream APIs would prefer if customers explicitly enable retries,\r\n     * such as GCS.\r\n     */\r\n    static get RETRY_CONFIG() {\r\n        return {\r\n            retry: true,\r\n            retryConfig: {\r\n                httpMethodsToRetry: ['GET', 'PUT', 'POST', 'HEAD', 'OPTIONS', 'DELETE'],\r\n            },\r\n        };\r\n    }\r\n}\r\nexports.OAuthClientAuthHandler = OAuthClientAuthHandler;\r\n/**\r\n * Converts an OAuth error response to a native JavaScript Error.\r\n * @param resp The OAuth error response to convert to a native Error object.\r\n * @param err The optional original error. If provided, the error properties\r\n *   will be copied to the new error.\r\n * @return The converted native Error object.\r\n */\r\nfunction getErrorFromOAuthErrorResponse(resp, err) {\r\n    // Error response.\r\n    const errorCode = resp.error;\r\n    const errorDescription = resp.error_description;\r\n    const errorUri = resp.error_uri;\r\n    let message = `Error code ${errorCode}`;\r\n    if (typeof errorDescription !== 'undefined') {\r\n        message += `: ${errorDescription}`;\r\n    }\r\n    if (typeof errorUri !== 'undefined') {\r\n        message += ` - ${errorUri}`;\r\n    }\r\n    const newError = new Error(message);\r\n    // Copy properties from original error to newly generated error.\r\n    if (err) {\r\n        const keys = Object.keys(err);\r\n        if (err.stack) {\r\n            // Copy error.stack if available.\r\n            keys.push('stack');\r\n        }\r\n        keys.forEach(key => {\r\n            // Do not overwrite the message field.\r\n            if (key !== 'message') {\r\n                Object.defineProperty(newError, key, {\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    value: err[key],\r\n                    writable: false,\r\n                    enumerable: true,\r\n                });\r\n            }\r\n        });\r\n    }\r\n    return newError;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}