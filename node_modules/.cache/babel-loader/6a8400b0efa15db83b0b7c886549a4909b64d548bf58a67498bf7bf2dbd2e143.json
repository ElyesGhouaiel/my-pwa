{"ast":null,"code":"/*! firebase-admin v13.0.1 */\n\"use strict\";\n\n/*!\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ShaCertificate = exports.AndroidApp = void 0;\nconst error_1 = require(\"../utils/error\");\nconst validator = require(\"../utils/validator\");\nconst project_management_api_request_internal_1 = require(\"./project-management-api-request-internal\");\nconst app_metadata_1 = require(\"./app-metadata\");\n/**\r\n * A reference to a Firebase Android app.\r\n *\r\n * Do not call this constructor directly. Instead, use {@link ProjectManagement.androidApp}.\r\n */\nclass AndroidApp {\n  /**\r\n   * @internal\r\n   */\n  constructor(appId, requestHandler) {\n    this.appId = appId;\n    this.requestHandler = requestHandler;\n    if (!validator.isNonEmptyString(appId)) {\n      throw new error_1.FirebaseProjectManagementError('invalid-argument', 'appId must be a non-empty string.');\n    }\n    this.resourceName = `projects/-/androidApps/${appId}`;\n  }\n  /**\r\n   * Retrieves metadata about this Android app.\r\n   *\r\n   * @returns A promise that resolves to the retrieved metadata about this Android app.\r\n   */\n  getMetadata() {\n    return this.requestHandler.getResource(this.resourceName).then(responseData => {\n      (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'getMetadata()\\'s responseData must be a non-null object.');\n      const requiredFieldsList = ['name', 'appId', 'projectId', 'packageName'];\n      requiredFieldsList.forEach(requiredField => {\n        (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(responseData[requiredField]), responseData, `getMetadata()'s responseData.${requiredField} must be a non-empty string.`);\n      });\n      const metadata = {\n        platform: app_metadata_1.AppPlatform.ANDROID,\n        resourceName: responseData.name,\n        appId: responseData.appId,\n        displayName: responseData.displayName || null,\n        projectId: responseData.projectId,\n        packageName: responseData.packageName\n      };\n      return metadata;\n    });\n  }\n  /**\r\n   * Sets the optional user-assigned display name of the app.\r\n   *\r\n   * @param newDisplayName - The new display name to set.\r\n   *\r\n   * @returns A promise that resolves when the display name has been set.\r\n   */\n  setDisplayName(newDisplayName) {\n    return this.requestHandler.setDisplayName(this.resourceName, newDisplayName);\n  }\n  /**\r\n   * Gets the list of SHA certificates associated with this Android app in Firebase.\r\n   *\r\n   * @returns The list of SHA-1 and SHA-256 certificates associated with this Android app in\r\n   *     Firebase.\r\n   */\n  getShaCertificates() {\n    return this.requestHandler.getAndroidShaCertificates(this.resourceName).then(responseData => {\n      (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'getShaCertificates()\\'s responseData must be a non-null object.');\n      if (!responseData.certificates) {\n        return [];\n      }\n      (0, project_management_api_request_internal_1.assertServerResponse)(validator.isArray(responseData.certificates), responseData, '\"certificates\" field must be present in the getShaCertificates() response data.');\n      const requiredFieldsList = ['name', 'shaHash'];\n      return responseData.certificates.map(certificateJson => {\n        requiredFieldsList.forEach(requiredField => {\n          (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(certificateJson[requiredField]), responseData, `getShaCertificates()'s responseData.certificates[].${requiredField} must be a ` + 'non-empty string.');\n        });\n        return new ShaCertificate(certificateJson.shaHash, certificateJson.name);\n      });\n    });\n  }\n  /**\r\n   * Adds the given SHA certificate to this Android app.\r\n   *\r\n   * @param certificateToAdd - The SHA certificate to add.\r\n   *\r\n   * @returns A promise that resolves when the given certificate\r\n   *     has been added to the Android app.\r\n   */\n  addShaCertificate(certificateToAdd) {\n    return this.requestHandler.addAndroidShaCertificate(this.resourceName, certificateToAdd);\n  }\n  /**\r\n   * Deletes the specified SHA certificate from this Android app.\r\n   *\r\n   * @param certificateToDelete - The SHA certificate to delete.\r\n   *\r\n   * @returns A promise that resolves when the specified\r\n   *     certificate has been removed from the Android app.\r\n   */\n  deleteShaCertificate(certificateToDelete) {\n    if (!certificateToDelete.resourceName) {\n      throw new error_1.FirebaseProjectManagementError('invalid-argument', 'Specified certificate does not include a resourceName. (Use AndroidApp.getShaCertificates() to retrieve ' + 'certificates with a resourceName.');\n    }\n    return this.requestHandler.deleteResource(certificateToDelete.resourceName);\n  }\n  /**\r\n   * Gets the configuration artifact associated with this app.\r\n   *\r\n   * @returns A promise that resolves to the Android app's\r\n   *     Firebase config file, in UTF-8 string format. This string is typically\r\n   *     intended to be written to a JSON file that gets shipped with your Android\r\n   *     app.\r\n   */\n  getConfig() {\n    return this.requestHandler.getConfig(this.resourceName).then(responseData => {\n      (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'getConfig()\\'s responseData must be a non-null object.');\n      const base64ConfigFileContents = responseData.configFileContents;\n      (0, project_management_api_request_internal_1.assertServerResponse)(validator.isBase64String(base64ConfigFileContents), responseData, 'getConfig()\\'s responseData.configFileContents must be a base64 string.');\n      return Buffer.from(base64ConfigFileContents, 'base64').toString('utf8');\n    });\n  }\n}\nexports.AndroidApp = AndroidApp;\n/**\r\n * A SHA-1 or SHA-256 certificate.\r\n *\r\n * Do not call this constructor directly. Instead, use\r\n * [`projectManagement.shaCertificate()`](projectManagement.ProjectManagement#shaCertificate).\r\n */\nclass ShaCertificate {\n  /**\r\n   * Creates a ShaCertificate using the given hash. The ShaCertificate's type (eg. 'sha256') is\r\n   * automatically determined from the hash itself.\r\n   *\r\n   * @param shaHash - The sha256 or sha1 hash for this certificate.\r\n   * @example\r\n   * ```javascript\r\n   * var shaHash = shaCertificate.shaHash;\r\n   * ```\r\n   * @param resourceName - The Firebase resource name for this certificate. This does not need to be\r\n   *     set when creating a new certificate.\r\n   * @example\r\n   * ```javascript\r\n   * var resourceName = shaCertificate.resourceName;\r\n   * ```\r\n   *\r\n   * @internal\r\n   */\n  constructor(shaHash, resourceName) {\n    this.shaHash = shaHash;\n    this.resourceName = resourceName;\n    if (/^[a-fA-F0-9]{40}$/.test(shaHash)) {\n      this.certType = 'sha1';\n    } else if (/^[a-fA-F0-9]{64}$/.test(shaHash)) {\n      this.certType = 'sha256';\n    } else {\n      throw new error_1.FirebaseProjectManagementError('invalid-argument', 'shaHash must be either a sha256 hash or a sha1 hash.');\n    }\n  }\n}\nexports.ShaCertificate = ShaCertificate;","map":{"version":3,"names":["Object","defineProperty","exports","value","ShaCertificate","AndroidApp","error_1","require","validator","project_management_api_request_internal_1","app_metadata_1","constructor","appId","requestHandler","isNonEmptyString","FirebaseProjectManagementError","resourceName","getMetadata","getResource","then","responseData","assertServerResponse","isNonNullObject","requiredFieldsList","forEach","requiredField","metadata","platform","AppPlatform","ANDROID","name","displayName","projectId","packageName","setDisplayName","newDisplayName","getShaCertificates","getAndroidShaCertificates","certificates","isArray","map","certificateJson","shaHash","addShaCertificate","certificateToAdd","addAndroidShaCertificate","deleteShaCertificate","certificateToDelete","deleteResource","getConfig","base64ConfigFileContents","configFileContents","isBase64String","Buffer","from","toString","test","certType"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/firebase-admin/lib/project-management/android-app.js"],"sourcesContent":["/*! firebase-admin v13.0.1 */\r\n\"use strict\";\r\n/*!\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ShaCertificate = exports.AndroidApp = void 0;\r\nconst error_1 = require(\"../utils/error\");\r\nconst validator = require(\"../utils/validator\");\r\nconst project_management_api_request_internal_1 = require(\"./project-management-api-request-internal\");\r\nconst app_metadata_1 = require(\"./app-metadata\");\r\n/**\r\n * A reference to a Firebase Android app.\r\n *\r\n * Do not call this constructor directly. Instead, use {@link ProjectManagement.androidApp}.\r\n */\r\nclass AndroidApp {\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(appId, requestHandler) {\r\n        this.appId = appId;\r\n        this.requestHandler = requestHandler;\r\n        if (!validator.isNonEmptyString(appId)) {\r\n            throw new error_1.FirebaseProjectManagementError('invalid-argument', 'appId must be a non-empty string.');\r\n        }\r\n        this.resourceName = `projects/-/androidApps/${appId}`;\r\n    }\r\n    /**\r\n     * Retrieves metadata about this Android app.\r\n     *\r\n     * @returns A promise that resolves to the retrieved metadata about this Android app.\r\n     */\r\n    getMetadata() {\r\n        return this.requestHandler.getResource(this.resourceName)\r\n            .then((responseData) => {\r\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'getMetadata()\\'s responseData must be a non-null object.');\r\n            const requiredFieldsList = ['name', 'appId', 'projectId', 'packageName'];\r\n            requiredFieldsList.forEach((requiredField) => {\r\n                (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(responseData[requiredField]), responseData, `getMetadata()'s responseData.${requiredField} must be a non-empty string.`);\r\n            });\r\n            const metadata = {\r\n                platform: app_metadata_1.AppPlatform.ANDROID,\r\n                resourceName: responseData.name,\r\n                appId: responseData.appId,\r\n                displayName: responseData.displayName || null,\r\n                projectId: responseData.projectId,\r\n                packageName: responseData.packageName,\r\n            };\r\n            return metadata;\r\n        });\r\n    }\r\n    /**\r\n     * Sets the optional user-assigned display name of the app.\r\n     *\r\n     * @param newDisplayName - The new display name to set.\r\n     *\r\n     * @returns A promise that resolves when the display name has been set.\r\n     */\r\n    setDisplayName(newDisplayName) {\r\n        return this.requestHandler.setDisplayName(this.resourceName, newDisplayName);\r\n    }\r\n    /**\r\n     * Gets the list of SHA certificates associated with this Android app in Firebase.\r\n     *\r\n     * @returns The list of SHA-1 and SHA-256 certificates associated with this Android app in\r\n     *     Firebase.\r\n     */\r\n    getShaCertificates() {\r\n        return this.requestHandler.getAndroidShaCertificates(this.resourceName)\r\n            .then((responseData) => {\r\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'getShaCertificates()\\'s responseData must be a non-null object.');\r\n            if (!responseData.certificates) {\r\n                return [];\r\n            }\r\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isArray(responseData.certificates), responseData, '\"certificates\" field must be present in the getShaCertificates() response data.');\r\n            const requiredFieldsList = ['name', 'shaHash'];\r\n            return responseData.certificates.map((certificateJson) => {\r\n                requiredFieldsList.forEach((requiredField) => {\r\n                    (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(certificateJson[requiredField]), responseData, `getShaCertificates()'s responseData.certificates[].${requiredField} must be a `\r\n                        + 'non-empty string.');\r\n                });\r\n                return new ShaCertificate(certificateJson.shaHash, certificateJson.name);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Adds the given SHA certificate to this Android app.\r\n     *\r\n     * @param certificateToAdd - The SHA certificate to add.\r\n     *\r\n     * @returns A promise that resolves when the given certificate\r\n     *     has been added to the Android app.\r\n     */\r\n    addShaCertificate(certificateToAdd) {\r\n        return this.requestHandler.addAndroidShaCertificate(this.resourceName, certificateToAdd);\r\n    }\r\n    /**\r\n     * Deletes the specified SHA certificate from this Android app.\r\n     *\r\n     * @param certificateToDelete - The SHA certificate to delete.\r\n     *\r\n     * @returns A promise that resolves when the specified\r\n     *     certificate has been removed from the Android app.\r\n     */\r\n    deleteShaCertificate(certificateToDelete) {\r\n        if (!certificateToDelete.resourceName) {\r\n            throw new error_1.FirebaseProjectManagementError('invalid-argument', 'Specified certificate does not include a resourceName. (Use AndroidApp.getShaCertificates() to retrieve ' +\r\n                'certificates with a resourceName.');\r\n        }\r\n        return this.requestHandler.deleteResource(certificateToDelete.resourceName);\r\n    }\r\n    /**\r\n     * Gets the configuration artifact associated with this app.\r\n     *\r\n     * @returns A promise that resolves to the Android app's\r\n     *     Firebase config file, in UTF-8 string format. This string is typically\r\n     *     intended to be written to a JSON file that gets shipped with your Android\r\n     *     app.\r\n     */\r\n    getConfig() {\r\n        return this.requestHandler.getConfig(this.resourceName)\r\n            .then((responseData) => {\r\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'getConfig()\\'s responseData must be a non-null object.');\r\n            const base64ConfigFileContents = responseData.configFileContents;\r\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isBase64String(base64ConfigFileContents), responseData, 'getConfig()\\'s responseData.configFileContents must be a base64 string.');\r\n            return Buffer.from(base64ConfigFileContents, 'base64').toString('utf8');\r\n        });\r\n    }\r\n}\r\nexports.AndroidApp = AndroidApp;\r\n/**\r\n * A SHA-1 or SHA-256 certificate.\r\n *\r\n * Do not call this constructor directly. Instead, use\r\n * [`projectManagement.shaCertificate()`](projectManagement.ProjectManagement#shaCertificate).\r\n */\r\nclass ShaCertificate {\r\n    /**\r\n     * Creates a ShaCertificate using the given hash. The ShaCertificate's type (eg. 'sha256') is\r\n     * automatically determined from the hash itself.\r\n     *\r\n     * @param shaHash - The sha256 or sha1 hash for this certificate.\r\n     * @example\r\n     * ```javascript\r\n     * var shaHash = shaCertificate.shaHash;\r\n     * ```\r\n     * @param resourceName - The Firebase resource name for this certificate. This does not need to be\r\n     *     set when creating a new certificate.\r\n     * @example\r\n     * ```javascript\r\n     * var resourceName = shaCertificate.resourceName;\r\n     * ```\r\n     *\r\n     * @internal\r\n     */\r\n    constructor(shaHash, resourceName) {\r\n        this.shaHash = shaHash;\r\n        this.resourceName = resourceName;\r\n        if (/^[a-fA-F0-9]{40}$/.test(shaHash)) {\r\n            this.certType = 'sha1';\r\n        }\r\n        else if (/^[a-fA-F0-9]{64}$/.test(shaHash)) {\r\n            this.certType = 'sha256';\r\n        }\r\n        else {\r\n            throw new error_1.FirebaseProjectManagementError('invalid-argument', 'shaHash must be either a sha256 hash or a sha1 hash.');\r\n        }\r\n    }\r\n}\r\nexports.ShaCertificate = ShaCertificate;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}