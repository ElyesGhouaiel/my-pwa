{"ast":null,"code":"\"use strict\";\n\n// Copyright 2018 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GCPEnv = void 0;\nexports.clear = clear;\nexports.getEnv = getEnv;\nconst gcpMetadata = require(\"gcp-metadata\");\nvar GCPEnv;\n(function (GCPEnv) {\n  GCPEnv[\"APP_ENGINE\"] = \"APP_ENGINE\";\n  GCPEnv[\"KUBERNETES_ENGINE\"] = \"KUBERNETES_ENGINE\";\n  GCPEnv[\"CLOUD_FUNCTIONS\"] = \"CLOUD_FUNCTIONS\";\n  GCPEnv[\"COMPUTE_ENGINE\"] = \"COMPUTE_ENGINE\";\n  GCPEnv[\"CLOUD_RUN\"] = \"CLOUD_RUN\";\n  GCPEnv[\"NONE\"] = \"NONE\";\n})(GCPEnv || (exports.GCPEnv = GCPEnv = {}));\nlet envPromise;\nfunction clear() {\n  envPromise = undefined;\n}\nasync function getEnv() {\n  if (envPromise) {\n    return envPromise;\n  }\n  envPromise = getEnvMemoized();\n  return envPromise;\n}\nasync function getEnvMemoized() {\n  let env = GCPEnv.NONE;\n  if (isAppEngine()) {\n    env = GCPEnv.APP_ENGINE;\n  } else if (isCloudFunction()) {\n    env = GCPEnv.CLOUD_FUNCTIONS;\n  } else if (await isComputeEngine()) {\n    if (await isKubernetesEngine()) {\n      env = GCPEnv.KUBERNETES_ENGINE;\n    } else if (isCloudRun()) {\n      env = GCPEnv.CLOUD_RUN;\n    } else {\n      env = GCPEnv.COMPUTE_ENGINE;\n    }\n  } else {\n    env = GCPEnv.NONE;\n  }\n  return env;\n}\nfunction isAppEngine() {\n  return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);\n}\nfunction isCloudFunction() {\n  return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);\n}\n/**\r\n * This check only verifies that the environment is running knative.\r\n * This must be run *after* checking for Kubernetes, otherwise it will\r\n * return a false positive.\r\n */\nfunction isCloudRun() {\n  return !!process.env.K_CONFIGURATION;\n}\nasync function isKubernetesEngine() {\n  try {\n    await gcpMetadata.instance('attributes/cluster-name');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nasync function isComputeEngine() {\n  return gcpMetadata.isAvailable();\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","GCPEnv","clear","getEnv","gcpMetadata","require","envPromise","undefined","getEnvMemoized","env","NONE","isAppEngine","APP_ENGINE","isCloudFunction","CLOUD_FUNCTIONS","isComputeEngine","isKubernetesEngine","KUBERNETES_ENGINE","isCloudRun","CLOUD_RUN","COMPUTE_ENGINE","process","GAE_SERVICE","GAE_MODULE_NAME","FUNCTION_NAME","FUNCTION_TARGET","K_CONFIGURATION","instance","e","isAvailable"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/google-auth-library/build/src/auth/envDetect.js"],"sourcesContent":["\"use strict\";\r\n// Copyright 2018 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GCPEnv = void 0;\r\nexports.clear = clear;\r\nexports.getEnv = getEnv;\r\nconst gcpMetadata = require(\"gcp-metadata\");\r\nvar GCPEnv;\r\n(function (GCPEnv) {\r\n    GCPEnv[\"APP_ENGINE\"] = \"APP_ENGINE\";\r\n    GCPEnv[\"KUBERNETES_ENGINE\"] = \"KUBERNETES_ENGINE\";\r\n    GCPEnv[\"CLOUD_FUNCTIONS\"] = \"CLOUD_FUNCTIONS\";\r\n    GCPEnv[\"COMPUTE_ENGINE\"] = \"COMPUTE_ENGINE\";\r\n    GCPEnv[\"CLOUD_RUN\"] = \"CLOUD_RUN\";\r\n    GCPEnv[\"NONE\"] = \"NONE\";\r\n})(GCPEnv || (exports.GCPEnv = GCPEnv = {}));\r\nlet envPromise;\r\nfunction clear() {\r\n    envPromise = undefined;\r\n}\r\nasync function getEnv() {\r\n    if (envPromise) {\r\n        return envPromise;\r\n    }\r\n    envPromise = getEnvMemoized();\r\n    return envPromise;\r\n}\r\nasync function getEnvMemoized() {\r\n    let env = GCPEnv.NONE;\r\n    if (isAppEngine()) {\r\n        env = GCPEnv.APP_ENGINE;\r\n    }\r\n    else if (isCloudFunction()) {\r\n        env = GCPEnv.CLOUD_FUNCTIONS;\r\n    }\r\n    else if (await isComputeEngine()) {\r\n        if (await isKubernetesEngine()) {\r\n            env = GCPEnv.KUBERNETES_ENGINE;\r\n        }\r\n        else if (isCloudRun()) {\r\n            env = GCPEnv.CLOUD_RUN;\r\n        }\r\n        else {\r\n            env = GCPEnv.COMPUTE_ENGINE;\r\n        }\r\n    }\r\n    else {\r\n        env = GCPEnv.NONE;\r\n    }\r\n    return env;\r\n}\r\nfunction isAppEngine() {\r\n    return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);\r\n}\r\nfunction isCloudFunction() {\r\n    return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);\r\n}\r\n/**\r\n * This check only verifies that the environment is running knative.\r\n * This must be run *after* checking for Kubernetes, otherwise it will\r\n * return a false positive.\r\n */\r\nfunction isCloudRun() {\r\n    return !!process.env.K_CONFIGURATION;\r\n}\r\nasync function isKubernetesEngine() {\r\n    try {\r\n        await gcpMetadata.instance('attributes/cluster-name');\r\n        return true;\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\nasync function isComputeEngine() {\r\n    return gcpMetadata.isAvailable();\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,MAAM,GAAG,KAAK,CAAC;AACvBF,OAAO,CAACG,KAAK,GAAGA,KAAK;AACrBH,OAAO,CAACI,MAAM,GAAGA,MAAM;AACvB,MAAMC,WAAW,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC3C,IAAIJ,MAAM;AACV,CAAC,UAAUA,MAAM,EAAE;EACfA,MAAM,CAAC,YAAY,CAAC,GAAG,YAAY;EACnCA,MAAM,CAAC,mBAAmB,CAAC,GAAG,mBAAmB;EACjDA,MAAM,CAAC,iBAAiB,CAAC,GAAG,iBAAiB;EAC7CA,MAAM,CAAC,gBAAgB,CAAC,GAAG,gBAAgB;EAC3CA,MAAM,CAAC,WAAW,CAAC,GAAG,WAAW;EACjCA,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM;AAC3B,CAAC,EAAEA,MAAM,KAAKF,OAAO,CAACE,MAAM,GAAGA,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AAC5C,IAAIK,UAAU;AACd,SAASJ,KAAKA,CAAA,EAAG;EACbI,UAAU,GAAGC,SAAS;AAC1B;AACA,eAAeJ,MAAMA,CAAA,EAAG;EACpB,IAAIG,UAAU,EAAE;IACZ,OAAOA,UAAU;EACrB;EACAA,UAAU,GAAGE,cAAc,CAAC,CAAC;EAC7B,OAAOF,UAAU;AACrB;AACA,eAAeE,cAAcA,CAAA,EAAG;EAC5B,IAAIC,GAAG,GAAGR,MAAM,CAACS,IAAI;EACrB,IAAIC,WAAW,CAAC,CAAC,EAAE;IACfF,GAAG,GAAGR,MAAM,CAACW,UAAU;EAC3B,CAAC,MACI,IAAIC,eAAe,CAAC,CAAC,EAAE;IACxBJ,GAAG,GAAGR,MAAM,CAACa,eAAe;EAChC,CAAC,MACI,IAAI,MAAMC,eAAe,CAAC,CAAC,EAAE;IAC9B,IAAI,MAAMC,kBAAkB,CAAC,CAAC,EAAE;MAC5BP,GAAG,GAAGR,MAAM,CAACgB,iBAAiB;IAClC,CAAC,MACI,IAAIC,UAAU,CAAC,CAAC,EAAE;MACnBT,GAAG,GAAGR,MAAM,CAACkB,SAAS;IAC1B,CAAC,MACI;MACDV,GAAG,GAAGR,MAAM,CAACmB,cAAc;IAC/B;EACJ,CAAC,MACI;IACDX,GAAG,GAAGR,MAAM,CAACS,IAAI;EACrB;EACA,OAAOD,GAAG;AACd;AACA,SAASE,WAAWA,CAAA,EAAG;EACnB,OAAO,CAAC,EAAEU,OAAO,CAACZ,GAAG,CAACa,WAAW,IAAID,OAAO,CAACZ,GAAG,CAACc,eAAe,CAAC;AACrE;AACA,SAASV,eAAeA,CAAA,EAAG;EACvB,OAAO,CAAC,EAAEQ,OAAO,CAACZ,GAAG,CAACe,aAAa,IAAIH,OAAO,CAACZ,GAAG,CAACgB,eAAe,CAAC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,SAASP,UAAUA,CAAA,EAAG;EAClB,OAAO,CAAC,CAACG,OAAO,CAACZ,GAAG,CAACiB,eAAe;AACxC;AACA,eAAeV,kBAAkBA,CAAA,EAAG;EAChC,IAAI;IACA,MAAMZ,WAAW,CAACuB,QAAQ,CAAC,yBAAyB,CAAC;IACrD,OAAO,IAAI;EACf,CAAC,CACD,OAAOC,CAAC,EAAE;IACN,OAAO,KAAK;EAChB;AACJ;AACA,eAAeb,eAAeA,CAAA,EAAG;EAC7B,OAAOX,WAAW,CAACyB,WAAW,CAAC,CAAC;AACpC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}