{"ast":null,"code":"/*! firebase-admin v13.0.1 */\n\"use strict\";\n\n/*!\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TenantManager = exports.TenantAwareAuth = void 0;\nconst validator = require(\"../utils/validator\");\nconst utils = require(\"../utils/index\");\nconst error_1 = require(\"../utils/error\");\nconst base_auth_1 = require(\"./base-auth\");\nconst tenant_1 = require(\"./tenant\");\nconst auth_api_request_1 = require(\"./auth-api-request\");\n/**\r\n * Tenant-aware `Auth` interface used for managing users, configuring SAML/OIDC providers,\r\n * generating email links for password reset, email verification, etc for specific tenants.\r\n *\r\n * Multi-tenancy support requires Google Cloud's Identity Platform\r\n * (GCIP). To learn more about GCIP, including pricing and features,\r\n * see the {@link https://cloud.google.com/identity-platform | GCIP documentation}.\r\n *\r\n * Each tenant contains its own identity providers, settings and sets of users.\r\n * Using `TenantAwareAuth`, users for a specific tenant and corresponding OIDC/SAML\r\n * configurations can also be managed, ID tokens for users signed in to a specific tenant\r\n * can be verified, and email action links can also be generated for users belonging to the\r\n * tenant.\r\n *\r\n * `TenantAwareAuth` instances for a specific `tenantId` can be instantiated by calling\r\n * {@link TenantManager.authForTenant}.\r\n */\nclass TenantAwareAuth extends base_auth_1.BaseAuth {\n  /**\r\n   * The TenantAwareAuth class constructor.\r\n   *\r\n   * @param app - The app that created this tenant.\r\n   * @param tenantId - The corresponding tenant ID.\r\n   * @constructor\r\n   * @internal\r\n   */\n  constructor(app, tenantId) {\n    super(app, new auth_api_request_1.TenantAwareAuthRequestHandler(app, tenantId), (0, base_auth_1.createFirebaseTokenGenerator)(app, tenantId));\n    utils.addReadonlyGetter(this, 'tenantId', tenantId);\n  }\n  /**\r\n   * {@inheritdoc BaseAuth.verifyIdToken}\r\n   */\n  verifyIdToken(idToken, checkRevoked = false) {\n    return super.verifyIdToken(idToken, checkRevoked).then(decodedClaims => {\n      // Validate tenant ID.\n      if (decodedClaims.firebase.tenant !== this.tenantId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID);\n      }\n      return decodedClaims;\n    });\n  }\n  /**\r\n   * {@inheritdoc BaseAuth.createSessionCookie}\r\n   */\n  createSessionCookie(idToken, sessionCookieOptions) {\n    // Validate arguments before processing.\n    if (!validator.isNonEmptyString(idToken)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ID_TOKEN));\n    }\n    if (!validator.isNonNullObject(sessionCookieOptions) || !validator.isNumber(sessionCookieOptions.expiresIn)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_SESSION_COOKIE_DURATION));\n    }\n    // This will verify the ID token and then match the tenant ID before creating the session cookie.\n    return this.verifyIdToken(idToken).then(() => {\n      return super.createSessionCookie(idToken, sessionCookieOptions);\n    });\n  }\n  /**\r\n   * {@inheritdoc BaseAuth.verifySessionCookie}\r\n   */\n  verifySessionCookie(sessionCookie, checkRevoked = false) {\n    return super.verifySessionCookie(sessionCookie, checkRevoked).then(decodedClaims => {\n      if (decodedClaims.firebase.tenant !== this.tenantId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID);\n      }\n      return decodedClaims;\n    });\n  }\n}\nexports.TenantAwareAuth = TenantAwareAuth;\n/**\r\n * Defines the tenant manager used to help manage tenant related operations.\r\n * This includes:\r\n * <ul>\r\n * <li>The ability to create, update, list, get and delete tenants for the underlying\r\n *     project.</li>\r\n * <li>Getting a `TenantAwareAuth` instance for running Auth related operations\r\n *     (user management, provider configuration management, token verification,\r\n *     email link generation, etc) in the context of a specified tenant.</li>\r\n * </ul>\r\n */\nclass TenantManager {\n  /**\r\n   * Initializes a TenantManager instance for a specified FirebaseApp.\r\n   *\r\n   * @param app - The app for this TenantManager instance.\r\n   *\r\n   * @constructor\r\n   * @internal\r\n   */\n  constructor(app) {\n    this.app = app;\n    this.authRequestHandler = new auth_api_request_1.AuthRequestHandler(app);\n    this.tenantsMap = {};\n  }\n  /**\r\n   * Returns a `TenantAwareAuth` instance bound to the given tenant ID.\r\n   *\r\n   * @param tenantId - The tenant ID whose `TenantAwareAuth` instance is to be returned.\r\n   *\r\n   * @returns The `TenantAwareAuth` instance corresponding to this tenant identifier.\r\n   */\n  authForTenant(tenantId) {\n    if (!validator.isNonEmptyString(tenantId)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID);\n    }\n    if (typeof this.tenantsMap[tenantId] === 'undefined') {\n      this.tenantsMap[tenantId] = new TenantAwareAuth(this.app, tenantId);\n    }\n    return this.tenantsMap[tenantId];\n  }\n  /**\r\n   * Gets the tenant configuration for the tenant corresponding to a given `tenantId`.\r\n   *\r\n   * @param tenantId - The tenant identifier corresponding to the tenant whose data to fetch.\r\n   *\r\n   * @returns A promise fulfilled with the tenant configuration to the provided `tenantId`.\r\n   */\n  getTenant(tenantId) {\n    return this.authRequestHandler.getTenant(tenantId).then(response => {\n      return new tenant_1.Tenant(response);\n    });\n  }\n  /**\r\n   * Retrieves a list of tenants (single batch only) with a size of `maxResults`\r\n   * starting from the offset as specified by `pageToken`. This is used to\r\n   * retrieve all the tenants of a specified project in batches.\r\n   *\r\n   * @param maxResults - The page size, 1000 if undefined. This is also\r\n   *   the maximum allowed limit.\r\n   * @param pageToken - The next page token. If not specified, returns\r\n   *   tenants starting without any offset.\r\n   *\r\n   * @returns A promise that resolves with\r\n   *   a batch of downloaded tenants and the next page token.\r\n   */\n  listTenants(maxResults, pageToken) {\n    return this.authRequestHandler.listTenants(maxResults, pageToken).then(response => {\n      // List of tenants to return.\n      const tenants = [];\n      // Convert each user response to a Tenant.\n      response.tenants.forEach(tenantResponse => {\n        tenants.push(new tenant_1.Tenant(tenantResponse));\n      });\n      // Return list of tenants and the next page token if available.\n      const result = {\n        tenants,\n        pageToken: response.nextPageToken\n      };\n      // Delete result.pageToken if undefined.\n      if (typeof result.pageToken === 'undefined') {\n        delete result.pageToken;\n      }\n      return result;\n    });\n  }\n  /**\r\n   * Deletes an existing tenant.\r\n   *\r\n   * @param tenantId - The `tenantId` corresponding to the tenant to delete.\r\n   *\r\n   * @returns An empty promise fulfilled once the tenant has been deleted.\r\n   */\n  deleteTenant(tenantId) {\n    return this.authRequestHandler.deleteTenant(tenantId);\n  }\n  /**\r\n   * Creates a new tenant.\r\n   * When creating new tenants, tenants that use separate billing and quota will require their\r\n   * own project and must be defined as `full_service`.\r\n   *\r\n   * @param tenantOptions - The properties to set on the new tenant configuration to be created.\r\n   *\r\n   * @returns A promise fulfilled with the tenant configuration corresponding to the newly\r\n   *   created tenant.\r\n   */\n  createTenant(tenantOptions) {\n    return this.authRequestHandler.createTenant(tenantOptions).then(response => {\n      return new tenant_1.Tenant(response);\n    });\n  }\n  /**\r\n   * Updates an existing tenant configuration.\r\n   *\r\n   * @param tenantId - The `tenantId` corresponding to the tenant to delete.\r\n   * @param tenantOptions - The properties to update on the provided tenant.\r\n   *\r\n   * @returns A promise fulfilled with the update tenant data.\r\n   */\n  updateTenant(tenantId, tenantOptions) {\n    return this.authRequestHandler.updateTenant(tenantId, tenantOptions).then(response => {\n      return new tenant_1.Tenant(response);\n    });\n  }\n}\nexports.TenantManager = TenantManager;","map":{"version":3,"names":["Object","defineProperty","exports","value","TenantManager","TenantAwareAuth","validator","require","utils","error_1","base_auth_1","tenant_1","auth_api_request_1","BaseAuth","constructor","app","tenantId","TenantAwareAuthRequestHandler","createFirebaseTokenGenerator","addReadonlyGetter","verifyIdToken","idToken","checkRevoked","then","decodedClaims","firebase","tenant","FirebaseAuthError","AuthClientErrorCode","MISMATCHING_TENANT_ID","createSessionCookie","sessionCookieOptions","isNonEmptyString","Promise","reject","INVALID_ID_TOKEN","isNonNullObject","isNumber","expiresIn","INVALID_SESSION_COOKIE_DURATION","verifySessionCookie","sessionCookie","authRequestHandler","AuthRequestHandler","tenantsMap","authForTenant","INVALID_TENANT_ID","getTenant","response","Tenant","listTenants","maxResults","pageToken","tenants","forEach","tenantResponse","push","result","nextPageToken","deleteTenant","createTenant","tenantOptions","updateTenant"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/firebase-admin/lib/auth/tenant-manager.js"],"sourcesContent":["/*! firebase-admin v13.0.1 */\r\n\"use strict\";\r\n/*!\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TenantManager = exports.TenantAwareAuth = void 0;\r\nconst validator = require(\"../utils/validator\");\r\nconst utils = require(\"../utils/index\");\r\nconst error_1 = require(\"../utils/error\");\r\nconst base_auth_1 = require(\"./base-auth\");\r\nconst tenant_1 = require(\"./tenant\");\r\nconst auth_api_request_1 = require(\"./auth-api-request\");\r\n/**\r\n * Tenant-aware `Auth` interface used for managing users, configuring SAML/OIDC providers,\r\n * generating email links for password reset, email verification, etc for specific tenants.\r\n *\r\n * Multi-tenancy support requires Google Cloud's Identity Platform\r\n * (GCIP). To learn more about GCIP, including pricing and features,\r\n * see the {@link https://cloud.google.com/identity-platform | GCIP documentation}.\r\n *\r\n * Each tenant contains its own identity providers, settings and sets of users.\r\n * Using `TenantAwareAuth`, users for a specific tenant and corresponding OIDC/SAML\r\n * configurations can also be managed, ID tokens for users signed in to a specific tenant\r\n * can be verified, and email action links can also be generated for users belonging to the\r\n * tenant.\r\n *\r\n * `TenantAwareAuth` instances for a specific `tenantId` can be instantiated by calling\r\n * {@link TenantManager.authForTenant}.\r\n */\r\nclass TenantAwareAuth extends base_auth_1.BaseAuth {\r\n    /**\r\n     * The TenantAwareAuth class constructor.\r\n     *\r\n     * @param app - The app that created this tenant.\r\n     * @param tenantId - The corresponding tenant ID.\r\n     * @constructor\r\n     * @internal\r\n     */\r\n    constructor(app, tenantId) {\r\n        super(app, new auth_api_request_1.TenantAwareAuthRequestHandler(app, tenantId), (0, base_auth_1.createFirebaseTokenGenerator)(app, tenantId));\r\n        utils.addReadonlyGetter(this, 'tenantId', tenantId);\r\n    }\r\n    /**\r\n     * {@inheritdoc BaseAuth.verifyIdToken}\r\n     */\r\n    verifyIdToken(idToken, checkRevoked = false) {\r\n        return super.verifyIdToken(idToken, checkRevoked)\r\n            .then((decodedClaims) => {\r\n            // Validate tenant ID.\r\n            if (decodedClaims.firebase.tenant !== this.tenantId) {\r\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID);\r\n            }\r\n            return decodedClaims;\r\n        });\r\n    }\r\n    /**\r\n     * {@inheritdoc BaseAuth.createSessionCookie}\r\n     */\r\n    createSessionCookie(idToken, sessionCookieOptions) {\r\n        // Validate arguments before processing.\r\n        if (!validator.isNonEmptyString(idToken)) {\r\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ID_TOKEN));\r\n        }\r\n        if (!validator.isNonNullObject(sessionCookieOptions) ||\r\n            !validator.isNumber(sessionCookieOptions.expiresIn)) {\r\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_SESSION_COOKIE_DURATION));\r\n        }\r\n        // This will verify the ID token and then match the tenant ID before creating the session cookie.\r\n        return this.verifyIdToken(idToken)\r\n            .then(() => {\r\n            return super.createSessionCookie(idToken, sessionCookieOptions);\r\n        });\r\n    }\r\n    /**\r\n     * {@inheritdoc BaseAuth.verifySessionCookie}\r\n     */\r\n    verifySessionCookie(sessionCookie, checkRevoked = false) {\r\n        return super.verifySessionCookie(sessionCookie, checkRevoked)\r\n            .then((decodedClaims) => {\r\n            if (decodedClaims.firebase.tenant !== this.tenantId) {\r\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID);\r\n            }\r\n            return decodedClaims;\r\n        });\r\n    }\r\n}\r\nexports.TenantAwareAuth = TenantAwareAuth;\r\n/**\r\n * Defines the tenant manager used to help manage tenant related operations.\r\n * This includes:\r\n * <ul>\r\n * <li>The ability to create, update, list, get and delete tenants for the underlying\r\n *     project.</li>\r\n * <li>Getting a `TenantAwareAuth` instance for running Auth related operations\r\n *     (user management, provider configuration management, token verification,\r\n *     email link generation, etc) in the context of a specified tenant.</li>\r\n * </ul>\r\n */\r\nclass TenantManager {\r\n    /**\r\n     * Initializes a TenantManager instance for a specified FirebaseApp.\r\n     *\r\n     * @param app - The app for this TenantManager instance.\r\n     *\r\n     * @constructor\r\n     * @internal\r\n     */\r\n    constructor(app) {\r\n        this.app = app;\r\n        this.authRequestHandler = new auth_api_request_1.AuthRequestHandler(app);\r\n        this.tenantsMap = {};\r\n    }\r\n    /**\r\n     * Returns a `TenantAwareAuth` instance bound to the given tenant ID.\r\n     *\r\n     * @param tenantId - The tenant ID whose `TenantAwareAuth` instance is to be returned.\r\n     *\r\n     * @returns The `TenantAwareAuth` instance corresponding to this tenant identifier.\r\n     */\r\n    authForTenant(tenantId) {\r\n        if (!validator.isNonEmptyString(tenantId)) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID);\r\n        }\r\n        if (typeof this.tenantsMap[tenantId] === 'undefined') {\r\n            this.tenantsMap[tenantId] = new TenantAwareAuth(this.app, tenantId);\r\n        }\r\n        return this.tenantsMap[tenantId];\r\n    }\r\n    /**\r\n     * Gets the tenant configuration for the tenant corresponding to a given `tenantId`.\r\n     *\r\n     * @param tenantId - The tenant identifier corresponding to the tenant whose data to fetch.\r\n     *\r\n     * @returns A promise fulfilled with the tenant configuration to the provided `tenantId`.\r\n     */\r\n    getTenant(tenantId) {\r\n        return this.authRequestHandler.getTenant(tenantId)\r\n            .then((response) => {\r\n            return new tenant_1.Tenant(response);\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves a list of tenants (single batch only) with a size of `maxResults`\r\n     * starting from the offset as specified by `pageToken`. This is used to\r\n     * retrieve all the tenants of a specified project in batches.\r\n     *\r\n     * @param maxResults - The page size, 1000 if undefined. This is also\r\n     *   the maximum allowed limit.\r\n     * @param pageToken - The next page token. If not specified, returns\r\n     *   tenants starting without any offset.\r\n     *\r\n     * @returns A promise that resolves with\r\n     *   a batch of downloaded tenants and the next page token.\r\n     */\r\n    listTenants(maxResults, pageToken) {\r\n        return this.authRequestHandler.listTenants(maxResults, pageToken)\r\n            .then((response) => {\r\n            // List of tenants to return.\r\n            const tenants = [];\r\n            // Convert each user response to a Tenant.\r\n            response.tenants.forEach((tenantResponse) => {\r\n                tenants.push(new tenant_1.Tenant(tenantResponse));\r\n            });\r\n            // Return list of tenants and the next page token if available.\r\n            const result = {\r\n                tenants,\r\n                pageToken: response.nextPageToken,\r\n            };\r\n            // Delete result.pageToken if undefined.\r\n            if (typeof result.pageToken === 'undefined') {\r\n                delete result.pageToken;\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Deletes an existing tenant.\r\n     *\r\n     * @param tenantId - The `tenantId` corresponding to the tenant to delete.\r\n     *\r\n     * @returns An empty promise fulfilled once the tenant has been deleted.\r\n     */\r\n    deleteTenant(tenantId) {\r\n        return this.authRequestHandler.deleteTenant(tenantId);\r\n    }\r\n    /**\r\n     * Creates a new tenant.\r\n     * When creating new tenants, tenants that use separate billing and quota will require their\r\n     * own project and must be defined as `full_service`.\r\n     *\r\n     * @param tenantOptions - The properties to set on the new tenant configuration to be created.\r\n     *\r\n     * @returns A promise fulfilled with the tenant configuration corresponding to the newly\r\n     *   created tenant.\r\n     */\r\n    createTenant(tenantOptions) {\r\n        return this.authRequestHandler.createTenant(tenantOptions)\r\n            .then((response) => {\r\n            return new tenant_1.Tenant(response);\r\n        });\r\n    }\r\n    /**\r\n     * Updates an existing tenant configuration.\r\n     *\r\n     * @param tenantId - The `tenantId` corresponding to the tenant to delete.\r\n     * @param tenantOptions - The properties to update on the provided tenant.\r\n     *\r\n     * @returns A promise fulfilled with the update tenant data.\r\n     */\r\n    updateTenant(tenantId, tenantOptions) {\r\n        return this.authRequestHandler.updateTenant(tenantId, tenantOptions)\r\n            .then((response) => {\r\n            return new tenant_1.Tenant(response);\r\n        });\r\n    }\r\n}\r\nexports.TenantManager = TenantManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}