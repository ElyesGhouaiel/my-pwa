{"ast":null,"code":"\"use strict\";\n\n/**\r\n * Copyright 2024 Google LLC. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggregateQuerySnapshot = void 0;\nconst deepEqual = require(\"fast-deep-equal\");\n/**\r\n * The results of executing an aggregation query.\r\n */\nclass AggregateQuerySnapshot {\n  /**\r\n   * @internal\r\n   *\r\n   * @param _query The query that was executed to produce this result.\r\n   * @param _readTime The time this snapshot was read.\r\n   * @param _data The results of the aggregations performed over the underlying\r\n   * query.\r\n   */\n  constructor(_query, _readTime, _data) {\n    this._query = _query;\n    this._readTime = _readTime;\n    this._data = _data;\n  }\n  /** The query that was executed to produce this result. */\n  get query() {\n    return this._query;\n  }\n  /** The time this snapshot was read. */\n  get readTime() {\n    return this._readTime;\n  }\n  /**\r\n   * Returns the results of the aggregations performed over the underlying\r\n   * query.\r\n   *\r\n   * The keys of the returned object will be the same as those of the\r\n   * `AggregateSpec` object specified to the aggregation method, and the\r\n   * values will be the corresponding aggregation result.\r\n   *\r\n   * @returns The results of the aggregations performed over the underlying\r\n   * query.\r\n   */\n  data() {\n    return this._data;\n  }\n  /**\r\n   * Compares this object with the given object for equality.\r\n   *\r\n   * Two `AggregateQuerySnapshot` instances are considered \"equal\" if they\r\n   * have the same data and their underlying queries compare \"equal\" using\r\n   * `AggregateQuery.isEqual()`.\r\n   *\r\n   * @param other The object to compare to this object for equality.\r\n   * @return `true` if this object is \"equal\" to the given object, as\r\n   * defined above, or `false` otherwise.\r\n   */\n  isEqual(other) {\n    if (this === other) {\n      return true;\n    }\n    if (!(other instanceof AggregateQuerySnapshot)) {\n      return false;\n    }\n    // Since the read time is different on every read, we explicitly ignore all\n    // document metadata in this comparison, just like\n    // `DocumentSnapshot.isEqual()` does.\n    if (!this.query.isEqual(other.query)) {\n      return false;\n    }\n    return deepEqual(this._data, other._data);\n  }\n}\nexports.AggregateQuerySnapshot = AggregateQuerySnapshot;","map":{"version":3,"names":["Object","defineProperty","exports","value","AggregateQuerySnapshot","deepEqual","require","constructor","_query","_readTime","_data","query","readTime","data","isEqual","other"],"sources":["C:/Users/yujir/Documents/ynov/app pwa/mypwafinal/my-pwa/node_modules/@google-cloud/firestore/build/src/reference/aggregate-query-snapshot.js"],"sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright 2024 Google LLC. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AggregateQuerySnapshot = void 0;\r\nconst deepEqual = require(\"fast-deep-equal\");\r\n/**\r\n * The results of executing an aggregation query.\r\n */\r\nclass AggregateQuerySnapshot {\r\n    /**\r\n     * @internal\r\n     *\r\n     * @param _query The query that was executed to produce this result.\r\n     * @param _readTime The time this snapshot was read.\r\n     * @param _data The results of the aggregations performed over the underlying\r\n     * query.\r\n     */\r\n    constructor(_query, _readTime, _data) {\r\n        this._query = _query;\r\n        this._readTime = _readTime;\r\n        this._data = _data;\r\n    }\r\n    /** The query that was executed to produce this result. */\r\n    get query() {\r\n        return this._query;\r\n    }\r\n    /** The time this snapshot was read. */\r\n    get readTime() {\r\n        return this._readTime;\r\n    }\r\n    /**\r\n     * Returns the results of the aggregations performed over the underlying\r\n     * query.\r\n     *\r\n     * The keys of the returned object will be the same as those of the\r\n     * `AggregateSpec` object specified to the aggregation method, and the\r\n     * values will be the corresponding aggregation result.\r\n     *\r\n     * @returns The results of the aggregations performed over the underlying\r\n     * query.\r\n     */\r\n    data() {\r\n        return this._data;\r\n    }\r\n    /**\r\n     * Compares this object with the given object for equality.\r\n     *\r\n     * Two `AggregateQuerySnapshot` instances are considered \"equal\" if they\r\n     * have the same data and their underlying queries compare \"equal\" using\r\n     * `AggregateQuery.isEqual()`.\r\n     *\r\n     * @param other The object to compare to this object for equality.\r\n     * @return `true` if this object is \"equal\" to the given object, as\r\n     * defined above, or `false` otherwise.\r\n     */\r\n    isEqual(other) {\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        if (!(other instanceof AggregateQuerySnapshot)) {\r\n            return false;\r\n        }\r\n        // Since the read time is different on every read, we explicitly ignore all\r\n        // document metadata in this comparison, just like\r\n        // `DocumentSnapshot.isEqual()` does.\r\n        if (!this.query.isEqual(other.query)) {\r\n            return false;\r\n        }\r\n        return deepEqual(this._data, other._data);\r\n    }\r\n}\r\nexports.AggregateQuerySnapshot = AggregateQuerySnapshot;\r\n//# sourceMappingURL=aggregate-query-snapshot.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,sBAAsB,GAAG,KAAK,CAAC;AACvC,MAAMC,SAAS,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC5C;AACA;AACA;AACA,MAAMF,sBAAsB,CAAC;EACzB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,WAAWA,CAACC,MAAM,EAAEC,SAAS,EAAEC,KAAK,EAAE;IAClC,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,KAAK,GAAGA,KAAK;EACtB;EACA;EACA,IAAIC,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAACH,MAAM;EACtB;EACA;EACA,IAAII,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACH,SAAS;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACII,IAAIA,CAAA,EAAG;IACH,OAAO,IAAI,CAACH,KAAK;EACrB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACII,OAAOA,CAACC,KAAK,EAAE;IACX,IAAI,IAAI,KAAKA,KAAK,EAAE;MAChB,OAAO,IAAI;IACf;IACA,IAAI,EAAEA,KAAK,YAAYX,sBAAsB,CAAC,EAAE;MAC5C,OAAO,KAAK;IAChB;IACA;IACA;IACA;IACA,IAAI,CAAC,IAAI,CAACO,KAAK,CAACG,OAAO,CAACC,KAAK,CAACJ,KAAK,CAAC,EAAE;MAClC,OAAO,KAAK;IAChB;IACA,OAAON,SAAS,CAAC,IAAI,CAACK,KAAK,EAAEK,KAAK,CAACL,KAAK,CAAC;EAC7C;AACJ;AACAR,OAAO,CAACE,sBAAsB,GAAGA,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}